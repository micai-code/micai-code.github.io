<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java之HttpClient调用WebService接口发送短信实战源码</title>
      <link href="/2020/10/29/Java%E4%B9%8BHttpClient%E8%B0%83%E7%94%A8WebService%E6%8E%A5%E5%8F%A3%E5%8F%91%E9%80%81%E7%9F%AD%E4%BF%A1%E5%AE%9E%E6%88%98%E6%BA%90%E7%A0%81/"/>
      <url>/2020/10/29/Java%E4%B9%8BHttpClient%E8%B0%83%E7%94%A8WebService%E6%8E%A5%E5%8F%A3%E5%8F%91%E9%80%81%E7%9F%AD%E4%BF%A1%E5%AE%9E%E6%88%98%E6%BA%90%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>Java之HttpClient调用WebService接口实战</p><h3 id="一：接口文档"><a href="#一：接口文档" class="headerlink" title="一：接口文档"></a>一：接口文档</h3><p><img src="https://i.loli.net/2020/10/29/SAkKvUfimoqJ7Ve.png" alt="Java之HttpClient调用WebService接口源码-001.png"></p><p><img src="https://i.loli.net/2020/10/29/BPNaJ3pXzY4rcQo.png" alt="Java之HttpClient调用WebService接口源码-002.png"></p><h3 id="二：WSDL"><a href="#二：WSDL" class="headerlink" title="二：WSDL"></a>二：WSDL</h3><p><img src="https://i.loli.net/2020/10/29/bPYJVBr5AOFg86f.png" alt="Java之HttpClient调用WebService接口源码-003.png"></p><h3 id="三：HttpClient方法"><a href="#三：HttpClient方法" class="headerlink" title="三：HttpClient方法"></a>三：HttpClient方法</h3><h4 id="HttpClient方法一"><a href="#HttpClient方法一" class="headerlink" title="HttpClient方法一"></a>HttpClient方法一</h4><p><img src="https://i.loli.net/2020/10/29/alxRHWCdS4euTMv.png" alt="Java之HttpClient调用WebService接口源码-004.png"></p><h4 id="HttpClient方法二"><a href="#HttpClient方法二" class="headerlink" title="HttpClient方法二"></a>HttpClient方法二</h4><p><img src="https://i.loli.net/2020/10/29/UxD3zpOlPBJ4HKW.png" alt="Java之HttpClient调用WebService接口源码-005.png"></p><h4 id="HttpClient方法三"><a href="#HttpClient方法三" class="headerlink" title="HttpClient方法三"></a>HttpClient方法三</h4><p><img src="https://i.loli.net/2020/10/29/LH6trpjmRcbeK9v.png" alt="Java之HttpClient调用WebService接口源码-006.png"></p><h4 id="HttpClient方法四"><a href="#HttpClient方法四" class="headerlink" title="HttpClient方法四"></a>HttpClient方法四</h4><p><img src="https://i.loli.net/2020/10/29/QzySMjIWosfETXw.png" alt="Java之HttpClient调用WebService接口源码-007.png"></p><h3 id="四：封装soapXml方法-核心方法"><a href="#四：封装soapXml方法-核心方法" class="headerlink" title="四：封装soapXml方法(核心方法)"></a>四：封装soapXml方法(<strong>核心方法</strong>)</h3><p><img src="https://i.loli.net/2020/10/29/QIePE9STgFzdXvo.png" alt="Java之HttpClient调用WebService接口源码-008.png"></p><h3 id="五：调用WebService接口"><a href="#五：调用WebService接口" class="headerlink" title="五：调用WebService接口"></a>五：调用WebService接口</h3><p><img src="https://i.loli.net/2020/10/29/wxhH2Fr1DCEUAKv.png" alt="Java之HttpClient调用WebService接口源码-009.png"></p><h3 id="六：调用结果"><a href="#六：调用结果" class="headerlink" title="六：调用结果"></a>六：调用结果</h3><p><img src="https://i.loli.net/2020/10/29/RzdNDYuyUbZkcLo.png" alt="Java之HttpClient调用WebService接口源码--010.png"></p><h3 id="七：短信结果"><a href="#七：短信结果" class="headerlink" title="七：短信结果"></a>七：短信结果</h3><p><img src="https://i.loli.net/2020/10/29/V7xkegBrdWq1TMY.jpg" alt="Java之HttpClient调用WebService接口源码-011.jpg"></p><h2 id="完结"><a href="#完结" class="headerlink" title="完结"></a>完结</h2><p>以上就是Java之通过HttpClient方式调用WebService接口的完成流程</p>]]></content>
      
      
      <categories>
          
          <category> WebService </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebService </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 2 + MyBatis 实现动态传递表名称, 字段名称 查询数据</title>
      <link href="/2020/10/23/Spring-Boot-2-MyBatis-%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E4%BC%A0%E9%80%92%E8%A1%A8%E5%90%8D%E7%A7%B0-%E5%AD%97%E6%AE%B5%E5%90%8D%E7%A7%B0-%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE/"/>
      <url>/2020/10/23/Spring-Boot-2-MyBatis-%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E4%BC%A0%E9%80%92%E8%A1%A8%E5%90%8D%E7%A7%B0-%E5%AD%97%E6%AE%B5%E5%90%8D%E7%A7%B0-%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/07/13/QSKXOdpRUD1ky6o.png" alt="spring-boot.png"></p><h2 id="Spring-Boot-2-MyBatis-实现动态传递表名称-字段名称-查询数据"><a href="#Spring-Boot-2-MyBatis-实现动态传递表名称-字段名称-查询数据" class="headerlink" title="Spring Boot 2 + MyBatis 实现动态传递表名称, 字段名称 查询数据"></a>Spring Boot 2 + MyBatis 实现动态传递表名称, 字段名称 查询数据</h2><h3 id="摘要："><a href="#摘要：" class="headerlink" title="摘要："></a>摘要：</h3><p>之前有个需求,需要动态查询某一个表的某些字段,看了下MyBatis的文档,它可以支持的,具体做法如下:</p><h3 id="一-Controller层"><a href="#一-Controller层" class="headerlink" title="一:Controller层"></a>一:Controller层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> boss.portal.web.controller;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> boss.base.web.controller.BaseController;</span><br><span class="line"><span class="keyword">import</span> boss.base.web.support.ResponseModel;</span><br><span class="line"><span class="keyword">import</span> boss.portal.web.service.CommonService;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述：</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Author: 赵新国</span></span><br><span class="line"><span class="comment"> * Date: 2018/1/31 17:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Api</span>(value = <span class="string">"公共接口管理"</span>, description = <span class="string">"公共接口管理"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/common"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonController</span> <span class="keyword">extends</span> <span class="title">BaseController</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CommonService commonService;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"根据ID获取指定实体,字段对应的返回值"</span>, notes = <span class="string">"根据ID获取指定实体,字段对应的返回值"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/get"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseModel <span class="title">get</span><span class="params">(@RequestParam(required = <span class="keyword">false</span>)</span> String ids,</span></span><br><span class="line"><span class="function">                             @<span class="title">RequestParam</span><span class="params">(required = <span class="keyword">false</span>)</span> String tableName,</span></span><br><span class="line"><span class="function">                             @<span class="title">RequestParam</span><span class="params">(required = <span class="keyword">false</span>)</span> String fields) </span>&#123;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; maps = commonService.get(ids, tableName, fields);</span><br><span class="line">        <span class="keyword">return</span> renderSuccess(maps);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二-Service层"><a href="#二-Service层" class="headerlink" title="二:Service层"></a>二:Service层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> boss.portal.web.service;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> boss.auth.user.provider.IUserProvider;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.boot.dubbo.annotation.DubboConsumer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述：</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Author: 赵新国</span></span><br><span class="line"><span class="comment"> * Date: 2018/1/31 17:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonService</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@DubboConsumer</span>(lazy = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> IUserProvider userProvider;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String,Object&gt;&gt; get(String ids, String tableName, String fields) &#123;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; maps = userProvider.get(ids, tableName, fields);</span><br><span class="line">        <span class="keyword">return</span> maps;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三-Provider层"><a href="#三-Provider层" class="headerlink" title="三:Provider层"></a>三:Provider层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; get(String ids, String tableName, String fields) &#123;</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; maps = userMapper.get(ids, tableName, fields);</span><br><span class="line"><span class="keyword">if</span> (maps != <span class="keyword">null</span> &amp;&amp; !maps.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">return</span> maps;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四-Mapper层"><a href="#四-Mapper层" class="headerlink" title="四:Mapper层"></a>四:Mapper层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Map&lt;String,Object&gt;&gt; get(<span class="meta">@Param</span>(<span class="string">"ids"</span>) String ids, <span class="meta">@Param</span>(<span class="string">"tableName"</span>) String tableName, <span class="meta">@Param</span>(<span class="string">"fields"</span>) String fields);</span><br></pre></td></tr></table></figure><h3 id="五-Mapper-xml"><a href="#五-Mapper-xml" class="headerlink" title="五:Mapper.xml"></a>五:Mapper.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据指定ID获取指定数据表的指定字段的数据集 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"get"</span> <span class="attr">resultType</span>=<span class="string">"java.util.Map"</span> <span class="attr">statementType</span>=<span class="string">"STATEMENT"</span> &gt;</span></span><br><span class="line">    select $&#123;fields&#125; from $&#123;tableName&#125; where id in ( $&#123;ids&#125; )</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="六：附录"><a href="#六：附录" class="headerlink" title="六：附录"></a>六：附录</h3><p>最后说明一下,fields代表你要查询的字段,tableName代表你要查询的表名称,ids代表你要查询的id集合, 这样你就可以随意查询任何你想要的表和字段了,再也不用担心其他人让你加接口了!</p><h3 id="七：结束语"><a href="#七：结束语" class="headerlink" title="七：结束语"></a>七：结束语</h3><p>以上就是Spring Boot, MyBatis 实现动态传递表名称, 字段名称 查询数据的全部代码了，如有问题，请加群讨论：715224124</p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven之自定义archetype生成多模块结构的基础项目骨架（二）</title>
      <link href="/2020/10/23/Maven%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89archetype%E7%94%9F%E6%88%90%E5%A4%9A%E6%A8%A1%E5%9D%97%E7%BB%93%E6%9E%84%E7%9A%84%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%E9%AA%A8%E6%9E%B6%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2020/10/23/Maven%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89archetype%E7%94%9F%E6%88%90%E5%A4%9A%E6%A8%A1%E5%9D%97%E7%BB%93%E6%9E%84%E7%9A%84%E5%9F%BA%E7%A1%80%E9%A1%B9%E7%9B%AE%E9%AA%A8%E6%9E%B6%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="一：项目骨架介绍"><a href="#一：项目骨架介绍" class="headerlink" title="一：项目骨架介绍"></a>一：项目骨架介绍</h3><p>该项目骨架集成了Spring，SpringMVC，MyBatis，jsp，jquery，bootstrap等</p><h3 id="二：项目骨架使用介绍"><a href="#二：项目骨架使用介绍" class="headerlink" title="二：项目骨架使用介绍"></a>二：项目骨架使用介绍</h3><p>1.首先下载该项目到你的本地工程</p><p>2.通过dos窗口进入到该工程的pom.xml所在目录</p><p>3.搭建nexus私服</p><p>4.配置发布到私服的用户，主要是maven的settings.xml，如下 releases admin admin123 snapshots admin admin123</p><p>5.执行mvn clean install命令</p><p>6.执行mvn deploy命令</p><p>7.登录nexus可以查看到你刚才发布的archetype包</p><h3 id="三：在eclipse或者sts里面配置你刚才发布到私服的自定义archetype"><a href="#三：在eclipse或者sts里面配置你刚才发布到私服的自定义archetype" class="headerlink" title="三：在eclipse或者sts里面配置你刚才发布到私服的自定义archetype"></a>三：在eclipse或者sts里面配置你刚才发布到私服的自定义archetype</h3><p>1.打开你的开发工具，eclipse或者sts，我这里是sts</p><p>2.选择Window-&gt;Preferences-&gt;Maven-&gt;Archetypes</p><p>3.点击Add Remote Catalog，输入你的nexus私服中archetype的地址，我这里是 <a href="http://127.0.0.1:8081/nexus/content/groups/public/archetype-catalog.xml" target="_blank" rel="noopener">http://127.0.0.1:8081/nexus/content/groups/public/archetype-catalog.xml</a> 输入Description，随便输入都可以，我这里是micaicms-web-modules-archetype</p><p>4.点击Ok，点击Apply</p><p>5.重新启动你的开发工具eclipse或者sts</p><h3 id="四：使用自定义的archetype生成自定义的项目骨架"><a href="#四：使用自定义的archetype生成自定义的项目骨架" class="headerlink" title="四：使用自定义的archetype生成自定义的项目骨架"></a>四：使用自定义的archetype生成自定义的项目骨架</h3><p>1.选择New-&gt;Maven Project-&gt;Next</p><p>2.选择你刚才配置好的那个archetype</p><p>3.输入对应的groupId，artifactId，package，点击Finish就会生成四个工程，一个父工程，三个子工程，这样通过自定义的archetype生成多模块基础框架就完成了 ，接下来你可以很好的在此基础上写自己的代码了</p><h3 id="五：下载地址"><a href="#五：下载地址" class="headerlink" title="五：下载地址"></a>五：下载地址</h3><p><a href="https://github.com/sxdtzhaoxinguo/micaicms-web-modules-archetype" target="_blank" rel="noopener">https://github.com/sxdtzhaoxinguo/micaicms-web-modules-archetype</a></p>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven之自定义archetype创建自定义模板项目骨架（一）</title>
      <link href="/2020/10/23/Maven%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89archetype%E5%88%9B%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E6%9D%BF%E9%A1%B9%E7%9B%AE%E9%AA%A8%E6%9E%B6%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2020/10/23/Maven%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89archetype%E5%88%9B%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E6%9D%BF%E9%A1%B9%E7%9B%AE%E9%AA%A8%E6%9E%B6%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="描述：通过maven的自定义archetype创建自定义的项目模板骨架"><a href="#描述：通过maven的自定义archetype创建自定义的项目模板骨架" class="headerlink" title="描述：通过maven的自定义archetype创建自定义的项目模板骨架"></a>描述：通过maven的自定义archetype创建自定义的项目模板骨架</h3><h4 id="1-下载项目到你的本地workspace"><a href="#1-下载项目到你的本地workspace" class="headerlink" title="1.下载项目到你的本地workspace"></a>1.下载项目到你的本地workspace</h4><h4 id="2-进入到你该项目的根目录-也就是pom-xml所在的目录"><a href="#2-进入到你该项目的根目录-也就是pom-xml所在的目录" class="headerlink" title="2.进入到你该项目的根目录(也就是pom.xml所在的目录)"></a>2.进入到你该项目的根目录(也就是pom.xml所在的目录)</h4><h4 id="3-执行命令把该项目安装到你的本地仓库-mvn-clean-install"><a href="#3-执行命令把该项目安装到你的本地仓库-mvn-clean-install" class="headerlink" title="3.执行命令把该项目安装到你的本地仓库 mvn clean install"></a>3.执行命令把该项目安装到你的本地仓库 mvn clean install</h4><h4 id="4-执行命令更新你的本地仓库的索引-mvn-archetype-update-local-catalog"><a href="#4-执行命令更新你的本地仓库的索引-mvn-archetype-update-local-catalog" class="headerlink" title="4.执行命令更新你的本地仓库的索引 mvn archetype:update-local-catalog"></a>4.执行命令更新你的本地仓库的索引 mvn archetype:update-local-catalog</h4><h4 id="5-再次回到你的workspace工程目录，执行命令选择本地仓库的archetype创建项目-mvn-archetype-generate-DarchetypeCatalog-local"><a href="#5-再次回到你的workspace工程目录，执行命令选择本地仓库的archetype创建项目-mvn-archetype-generate-DarchetypeCatalog-local" class="headerlink" title="5.再次回到你的workspace工程目录，执行命令选择本地仓库的archetype创建项目 mvn archetype:generate -DarchetypeCatalog=local"></a>5.再次回到你的workspace工程目录，执行命令选择本地仓库的archetype创建项目 mvn archetype:generate -DarchetypeCatalog=local</h4><h4 id="6-选择你的archetype的编号，然后根据提示输入你自己的groupId，artifactId，packaging，version等等"><a href="#6-选择你的archetype的编号，然后根据提示输入你自己的groupId，artifactId，packaging，version等等" class="headerlink" title="6.选择你的archetype的编号，然后根据提示输入你自己的groupId，artifactId，packaging，version等等"></a>6.选择你的archetype的编号，然后根据提示输入你自己的groupId，artifactId，packaging，version等等</h4><h4 id="7-导入创建成功的项目到eclipse，就可以使用该项目了"><a href="#7-导入创建成功的项目到eclipse，就可以使用该项目了" class="headerlink" title="7.导入创建成功的项目到eclipse，就可以使用该项目了"></a>7.导入创建成功的项目到eclipse，就可以使用该项目了</h4><h4 id="8-下载地址"><a href="#8-下载地址" class="headerlink" title="8.下载地址"></a>8.下载地址</h4><p><a href="https://github.com/sxdtzhaoxinguo/micaicms-web-archetype" target="_blank" rel="noopener">https://github.com/sxdtzhaoxinguo/micaicms-web-archetype</a></p><h4 id="9-博客地址"><a href="#9-博客地址" class="headerlink" title="9.博客地址"></a>9.博客地址</h4><p><a href="https://blog.csdn.net/sxdtzhaoxinguo/article/details/46895013" target="_blank" rel="noopener">https://blog.csdn.net/sxdtzhaoxinguo/article/details/46895013</a></p>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring+Hibernate+SpringMVC+MySql实现多数据源</title>
      <link href="/2020/10/23/Spring-Hibernate-SpringMVC-MySql%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/"/>
      <url>/2020/10/23/Spring-Hibernate-SpringMVC-MySql%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h4 id="Spring-Hibernate-SpringMVC-MySql实现多数据源"><a href="#Spring-Hibernate-SpringMVC-MySql实现多数据源" class="headerlink" title="Spring+Hibernate+SpringMVC+MySql实现多数据源"></a>Spring+Hibernate+SpringMVC+MySql实现多数据源</h4><h4 id="1-下载下项目源代码，导入工程目录下"><a href="#1-下载下项目源代码，导入工程目录下" class="headerlink" title="1.下载下项目源代码，导入工程目录下"></a>1.下载下项目源代码，导入工程目录下</h4><h4 id="2-项目要求开发环境：-jdk-1-6-tomcat-6-0-mysql-5-0-maven-3-2"><a href="#2-项目要求开发环境：-jdk-1-6-tomcat-6-0-mysql-5-0-maven-3-2" class="headerlink" title="2.项目要求开发环境： jdk 1.6+ tomcat 6.0+ mysql 5.0+ maven 3.2"></a>2.项目要求开发环境： jdk 1.6+ tomcat 6.0+ mysql 5.0+ maven 3.2</h4><h4 id="3-导入后，先根据数据库配置文件，新建两个数据库dataSource1，dataSource2"><a href="#3-导入后，先根据数据库配置文件，新建两个数据库dataSource1，dataSource2" class="headerlink" title="3.导入后，先根据数据库配置文件，新建两个数据库dataSource1，dataSource2"></a>3.导入后，先根据数据库配置文件，新建两个数据库dataSource1，dataSource2</h4><h4 id="4-选择项目的pom-xml，运行Maven-test即可-顺利的话，会在控制台和target目录下看到执行测试的内容！"><a href="#4-选择项目的pom-xml，运行Maven-test即可-顺利的话，会在控制台和target目录下看到执行测试的内容！" class="headerlink" title="4.选择项目的pom.xml，运行Maven test即可,顺利的话，会在控制台和target目录下看到执行测试的内容！"></a>4.选择项目的pom.xml，运行Maven test即可,顺利的话，会在控制台和target目录下看到执行测试的内容！</h4><h4 id="5-下载地址：https-gitee-com-micai-code-SpringTwoDataSource-git"><a href="#5-下载地址：https-gitee-com-micai-code-SpringTwoDataSource-git" class="headerlink" title="5.下载地址：https://gitee.com/micai-code/SpringTwoDataSource.git"></a>5.下载地址：<a href="https://gitee.com/micai-code/SpringTwoDataSource.git" target="_blank" rel="noopener">https://gitee.com/micai-code/SpringTwoDataSource.git</a></h4>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> Spring MVC </category>
          
          <category> Hibernate </category>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
            <tag> Spring </tag>
            
            <tag> Spring MVC </tag>
            
            <tag> Hibernate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring，SpringMVC，MyBatis，bootstrap，jquery，jstl等集成的基础开发框架！</title>
      <link href="/2020/10/23/Spring%EF%BC%8CSpringMVC%EF%BC%8CMyBatis%EF%BC%8Cbootstrap%EF%BC%8Cjquery%EF%BC%8Cjstl%E7%AD%89%E9%9B%86%E6%88%90%E7%9A%84%E5%9F%BA%E7%A1%80%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%EF%BC%81/"/>
      <url>/2020/10/23/Spring%EF%BC%8CSpringMVC%EF%BC%8CMyBatis%EF%BC%8Cbootstrap%EF%BC%8Cjquery%EF%BC%8Cjstl%E7%AD%89%E9%9B%86%E6%88%90%E7%9A%84%E5%9F%BA%E7%A1%80%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<h4 id="Spring，SpringMVC，MyBatis，bootstrap，jquery，jstl等集成的基础开发框架！"><a href="#Spring，SpringMVC，MyBatis，bootstrap，jquery，jstl等集成的基础开发框架！" class="headerlink" title="Spring，SpringMVC，MyBatis，bootstrap，jquery，jstl等集成的基础开发框架！"></a>Spring，SpringMVC，MyBatis，bootstrap，jquery，jstl等集成的基础开发框架！</h4><h4 id="项目介绍："><a href="#项目介绍：" class="headerlink" title="项目介绍："></a>项目介绍：</h4><h4 id="1-软件架构组成："><a href="#1-软件架构组成：" class="headerlink" title="1.软件架构组成："></a>1.软件架构组成：</h4><p>Maven Spring SpringMVC MyBatis jquery bootstrap jsp</p><h4 id="2-软件集成依赖："><a href="#2-软件集成依赖：" class="headerlink" title="2.软件集成依赖："></a>2.软件集成依赖：</h4><p>Spring SpringMVC MyBatis Log4j jstl checkstyle findbugs</p><h4 id="3-该项目中继承的父项目请看：-https-github-com-sxdtzhaoxinguo-micaicms-pom"><a href="#3-该项目中继承的父项目请看：-https-github-com-sxdtzhaoxinguo-micaicms-pom" class="headerlink" title="3.该项目中继承的父项目请看： https://github.com/sxdtzhaoxinguo/micaicms-pom"></a>3.该项目中继承的父项目请看： <a href="https://github.com/sxdtzhaoxinguo/micaicms-pom" target="_blank" rel="noopener">https://github.com/sxdtzhaoxinguo/micaicms-pom</a></h4><h4 id="4-下载地址：https-gitee-com-micai-code-micaicms-ssmb-git"><a href="#4-下载地址：https-gitee-com-micai-code-micaicms-ssmb-git" class="headerlink" title="4.下载地址：https://gitee.com/micai-code/micaicms-ssmb.git"></a>4.下载地址：<a href="https://gitee.com/micai-code/micaicms-ssmb.git" target="_blank" rel="noopener">https://gitee.com/micai-code/micaicms-ssmb.git</a></h4>]]></content>
      
      
      <categories>
          
          <category> Spring MVC </category>
          
          <category> Spring </category>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
            <tag> Spring </tag>
            
            <tag> Spring MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring+Quartz集成实现的定时任务调度器，支持集群环境下的定时任务调用！</title>
      <link href="/2020/10/23/Spring-Quartz%E9%9B%86%E6%88%90%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%99%A8%EF%BC%8C%E6%94%AF%E6%8C%81%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E8%B0%83%E7%94%A8%EF%BC%81/"/>
      <url>/2020/10/23/Spring-Quartz%E9%9B%86%E6%88%90%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%99%A8%EF%BC%8C%E6%94%AF%E6%8C%81%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E8%B0%83%E7%94%A8%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<h4 id="Spring-Quartz集成实现的定时任务调度器，支持集群环境下的定时任务调用！"><a href="#Spring-Quartz集成实现的定时任务调度器，支持集群环境下的定时任务调用！" class="headerlink" title="Spring+Quartz集成实现的定时任务调度器，支持集群环境下的定时任务调用！"></a>Spring+Quartz集成实现的定时任务调度器，支持集群环境下的定时任务调用！</h4><h4 id="项目整体介绍："><a href="#项目整体介绍：" class="headerlink" title="项目整体介绍："></a>项目整体介绍：</h4><p>Spring+Quartz集成实现的定时任务调度器，支持集群环境下的定时任务调用！</p><h4 id="项目开发环境："><a href="#项目开发环境：" class="headerlink" title="项目开发环境："></a>项目开发环境：</h4><p>jdk1.7+，tomcat7.0+，sql server 2000+，mysql 5.6</p><h4 id="项目数据库支持："><a href="#项目数据库支持：" class="headerlink" title="项目数据库支持："></a>项目数据库支持：</h4><p>项目支持MySQL,SqlServer数据库，Oracle我这里没试，有兴趣的朋友可以自己做下，其实就是sql脚本不一样，具体的sql脚本可以下载quartz官方文档查看，里面有 支持各种数据库的sql脚本</p><h4 id="项目部署步骤："><a href="#项目部署步骤：" class="headerlink" title="项目部署步骤："></a>项目部署步骤：</h4><h5 id="MySQL版本部署步骤："><a href="#MySQL版本部署步骤：" class="headerlink" title="MySQL版本部署步骤："></a>MySQL版本部署步骤：</h5><p>1.首先根据jdbc.properties文件里面的配置新建对应的数据库</p><p>2.执行db文件夹下的sql文件，先执行mysql_db.sql文件，再执行init_db.sql文件</p><p>3.部署到tomcat即可查看定时任务的调度情况</p><h5 id="SqlServer版本部署步骤："><a href="#SqlServer版本部署步骤：" class="headerlink" title="SqlServer版本部署步骤："></a>SqlServer版本部署步骤：</h5><p>1.首先根据jdbc.properties文件里面的配置新建对应的数据库</p><p>2.执行db文件夹下的sql文件，先执行sqlserver_db.sql文件，再执行init_db.sql文件</p><p>3.部署到tomcat即可查看定时任务的调度情况</p><h4 id="下载地址：https-gitee-com-micai-code-quartzService-git"><a href="#下载地址：https-gitee-com-micai-code-quartzService-git" class="headerlink" title="下载地址：https://gitee.com/micai-code/quartzService.git"></a>下载地址：<a href="https://gitee.com/micai-code/quartzService.git" target="_blank" rel="noopener">https://gitee.com/micai-code/quartzService.git</a></h4>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> Quartz </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Quartz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot，Dubbo，Zookeeper、MySql，Swagger2组成搭建的分布式基础框架</title>
      <link href="/2020/10/23/Spring-Boot%EF%BC%8CDubbo%EF%BC%8CZookeeper%E3%80%81MySql%EF%BC%8CSwagger2%E7%BB%84%E6%88%90%E6%90%AD%E5%BB%BA%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/"/>
      <url>/2020/10/23/Spring-Boot%EF%BC%8CDubbo%EF%BC%8CZookeeper%E3%80%81MySql%EF%BC%8CSwagger2%E7%BB%84%E6%88%90%E6%90%AD%E5%BB%BA%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h4 id="由Spring-Boot，MyBatis，Dubbo，Zookeeper，MongoDB、RabbitMQ、Redis、MySql，Swagger2组成搭建的分布式基础框架！"><a href="#由Spring-Boot，MyBatis，Dubbo，Zookeeper，MongoDB、RabbitMQ、Redis、MySql，Swagger2组成搭建的分布式基础框架！" class="headerlink" title="由Spring Boot，MyBatis，Dubbo，Zookeeper，MongoDB、RabbitMQ、Redis、MySql，Swagger2组成搭建的分布式基础框架！"></a>由Spring Boot，MyBatis，Dubbo，Zookeeper，MongoDB、RabbitMQ、Redis、MySql，Swagger2组成搭建的分布式基础框架！</h4><h4 id="项目结构说明"><a href="#项目结构说明" class="headerlink" title="项目结构说明"></a>项目结构说明</h4><p>micai-boss  <br><br>—–micai-base      —–&gt;基础模块             <br><br>—–micai-doc       —–&gt;数据库脚本和文档      <br><br>—–micai-mongodb   —–&gt;MongoDB服务插件      <br><br>—–micai-order     —–&gt;订单模块             <br><br>—–micai-rabbitmq  —–&gt;RabbitMQ服务插件     <br><br>—–micai-redis     —–&gt;Redis服务插件        <br><br>—–micai-sms       —–&gt;短信服务插件          <br><br>—–micai-thrid     —–&gt;Dubbo服务插件        <br><br>—–micai-user      —–&gt;用户服务             <br><br>—–micai-utils     —–&gt;工具类模块           <br><br>—–micai-weixin    —–&gt;微信API服务模块      <br></p><h4 id="项目启动前准备"><a href="#项目启动前准备" class="headerlink" title="项目启动前准备"></a>项目启动前准备</h4><p>1.安装MySql服务 <br><br>2.安装Zookeeper服务 <br><br>3.安装Redis服务 <br><br>4.安装RabbitMQ服务 <br><br>5.安装MongoDB服务 <br></p><h4 id="项目启动步骤"><a href="#项目启动步骤" class="headerlink" title="项目启动步骤"></a>项目启动步骤</h4><p>1.首先从git仓库下载项目到本地工程目录下 git clone <a href="https://gitee.com/micai/micai-boss.git" target="_blank" rel="noopener">https://gitee.com/micai/micai-boss.git</a> <br><br>2.进入该项目的根目录下，通过命令的方式在本地编译项目 mvn clean compile -Dmaven.test.skip=true <br><br>3.编译成功后，导入IDEA工具中 <br><br>4.分别启动对应的Dubbo服务即可，这里一共有如下几个服务: <br><br>4.1.micai-user-provider，micai-user-consumer，micai-weixin-impl，micai-sms-queue-impl，micai-sms-service-impl，micai-order-consumer <br><br>4.2.启动其中的两个服务，其他的都是类似的启动方法，打开micai-user-provider，找到UserProviderApplication类启动即可 <br><br>4.3.当然启动Dubbo服务之前，一定记得先修改每个项目对应的配置文件，所有项目的配置文件都在resources目录下，读者可以根据自己实际情况修改即可 <br></p><h4 id="建议及改进"><a href="#建议及改进" class="headerlink" title="建议及改进 "></a>建议及改进 <br></h4><p>若您有任何建议，可以通过1）加入qq群715224124向群主提出，或2）发送邮件至<a href="mailto:827358369@qq.com" target="_blank" rel="noopener">827358369@qq.com</a>向我反馈。本人承诺，任何<br><br>建议都将会被认真考虑，优秀的建议将会被采用，但不保证一定会在当前版本中实现。<br></p><h4 id="下载地址：https-gitee-com-micai-code-micai-boss-git"><a href="#下载地址：https-gitee-com-micai-code-micai-boss-git" class="headerlink" title="下载地址：https://gitee.com/micai-code/micai-boss.git"></a>下载地址：<a href="https://gitee.com/micai-code/micai-boss.git" target="_blank" rel="noopener">https://gitee.com/micai-code/micai-boss.git</a></h4>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
          <category> Dubbo </category>
          
          <category> Zookeeper </category>
          
          <category> MySql </category>
          
          <category> Swagger </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Dubbo </tag>
            
            <tag> Zookeeper </tag>
            
            <tag> MySql </tag>
            
            <tag> Swagger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个Nginx部署多个vue前端项目总结</title>
      <link href="/2020/10/23/%E4%B8%80%E4%B8%AANginx%E9%83%A8%E7%BD%B2%E5%A4%9A%E4%B8%AAvue%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
      <url>/2020/10/23/%E4%B8%80%E4%B8%AANginx%E9%83%A8%E7%BD%B2%E5%A4%9A%E4%B8%AAvue%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要："><a href="#摘要：" class="headerlink" title="摘要："></a>摘要：</h2><p>近来接手了一个二次开发的前后端分离模式的项目，其中在前端项目的部署上需要让2个前端项目都部署到一个IP地址和端口下，那么我们这里就要用到Nginx了，接下来我们看看如何在一个Nginx下部署2个前端项目的</p><h2 id="编译打包2个前端项目"><a href="#编译打包2个前端项目" class="headerlink" title="编译打包2个前端项目"></a>编译打包2个前端项目</h2><h3 id="执行如下命令执行对前端工程的打包，以生成静态文件，如下："><a href="#执行如下命令执行对前端工程的打包，以生成静态文件，如下：" class="headerlink" title="执行如下命令执行对前端工程的打包，以生成静态文件，如下："></a>执行如下命令执行对前端工程的打包，以生成静态文件，如下：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>把打包生成的静态文件上传到Linux服务器的指定目录，我这里是：/usr/local/lawyer_wsla/frontend/dist</p><p><img src="https://i.loli.net/2020/09/29/DLS9vYslIeQG4V6.png" alt="Nginx部署vue-001.png"></p><h3 id="同上，把另一个前端工程也执行打包命令，以生成静态文件，如下："><a href="#同上，把另一个前端工程也执行打包命令，以生成静态文件，如下：" class="headerlink" title="同上，把另一个前端工程也执行打包命令，以生成静态文件，如下："></a>同上，把另一个前端工程也执行打包命令，以生成静态文件，如下：</h3><p>把打包生成的静态文件上传到Linux服务器的指定目录，我这里是：/usr/local/lawyer_wsla/frontend/zjwsla</p><p><img src="https://i.loli.net/2020/09/29/G8vlm9Q2XZ6oe3n.png" alt="Nginx部署vue-002.png"></p><h2 id="配置Nginx-conf文件"><a href="#配置Nginx-conf文件" class="headerlink" title="配置Nginx.conf文件"></a>配置Nginx.conf文件</h2><p><img src="https://i.loli.net/2020/09/29/iKhkJlqwonEIDyj.png" alt="Nginx部署vue-003.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line">#user  nobody;</span><br><span class="line">user root;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root  /usr/local/lawyer_wsla/frontend/dist;</span><br><span class="line">    try_files $uri $uri/ @router;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">location /zjwsla &#123;</span><br><span class="line">            alias /usr/local/lawyer_wsla/frontend/zjwsla;</span><br><span class="line">            try_files $uri $uri/ /zjwsla/index.html;</span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">location @router &#123;</span><br><span class="line">    rewrite ^.*$ /index.html last;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class="line">        # concurs with nginx&apos;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重启Nginx服务"><a href="#重启Nginx服务" class="headerlink" title="重启Nginx服务"></a>重启Nginx服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/sbin</span><br><span class="line"></span><br><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure><h2 id="访问项目"><a href="#访问项目" class="headerlink" title="访问项目"></a>访问项目</h2><p><img src="https://i.loli.net/2020/09/29/Szc2huyTKnBs8LX.png" alt="Nginx部署vue-004.png"></p><p><img src="https://i.loli.net/2020/09/29/7XU3wTC4op9cPBS.png" alt="Nginx部署vue-005.png"></p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>暂无</p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC 文件上传 源代码</title>
      <link href="/2020/10/23/Spring-MVC-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E6%BA%90%E4%BB%A3%E7%A0%81/"/>
      <url>/2020/10/23/Spring-MVC-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-%E6%BA%90%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要："><a href="#摘要：" class="headerlink" title="摘要："></a>摘要：</h2><p>Spring MVC实现文件上传：</p><h2 id="代码截图如下："><a href="#代码截图如下：" class="headerlink" title="代码截图如下："></a>代码截图如下：</h2><p><img src="https://i.loli.net/2020/09/24/kU1ByQlY6redFJp.jpg" alt="Spring MVC Upload Example 001.jpg"></p><h2 id="UploadController-java"><a href="#UploadController-java" class="headerlink" title="UploadController.java:"></a>UploadController.java:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.csdn.controller;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.ModelMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadController</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/upload.do"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">@RequestParam(value = <span class="string">"file"</span>, required = <span class="keyword">false</span>)</span> MultipartFile file,</span></span><br><span class="line"><span class="function">HttpServletRequest request, ModelMap modelMap) <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">String path = request.getSession().getServletContext().getRealPath(<span class="string">"upload"</span>);</span><br><span class="line">String fileName = file.getOriginalFilename();</span><br><span class="line">File targeFile = <span class="keyword">new</span> File(path,fileName);</span><br><span class="line"><span class="keyword">if</span>(!targeFile.exists())&#123;</span><br><span class="line">targeFile.mkdirs();</span><br><span class="line">&#125;</span><br><span class="line">file.transferTo(targeFile);</span><br><span class="line">modelMap.addAttribute(<span class="string">"fileUrl"</span>, request.getContextPath()+<span class="string">"/upload/"</span>+fileName);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"result"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="applicationContext-xml"><a href="#applicationContext-xml" class="headerlink" title="applicationContext.xml:"></a>applicationContext.xml:</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/mvc  </span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">default-lazy-init</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"</span> <span class="attr">lazy-init</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 另外最好还要加入DefaultAnnotationHandlerMapping，不然会被 XML或其它的映射覆盖！ --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 对模型视图名称的解析，即在模型视图名称添加前后缀 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span> <span class="attr">p:prefix</span>=<span class="string">"/WEB-INF/jsp/"</span> <span class="attr">p:suffix</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 支持上传文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"1048576"</span>/&gt;</span><span class="comment">&lt;!-- 设置上传文件的最大尺寸为1MB --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- SpringMVC在超出上传文件限制时，会抛出org.springframework.web.multipart.MaxUploadSizeExceededException --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"exceptionResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"exceptionMappings"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 遇到MaxUploadSizeExceededException异常时，自动跳转到/WEB-INF/jsp/error_fileupload.jsp页面 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"org.springframework.web.multipart.MaxUploadSizeExceededException"</span>&gt;</span>error_fileupload<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="codeifAction-xml"><a href="#codeifAction-xml" class="headerlink" title="codeifAction.xml:"></a>codeifAction.xml:</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/mvc  </span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">default-lazy-init</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"uploadController"</span> <span class="attr">class</span>=<span class="string">"cn.csdn.controller.UploadController"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="index-jsp"><a href="#index-jsp" class="headerlink" title="index.jsp:"></a>index.jsp:</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> <span class="keyword">import</span>=<span class="string">"java.util.*"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line"> String path = request.getContextPath();</span><br><span class="line"> String basePath = request.getScheme() + <span class="string">"://"</span></span><br><span class="line">   + request.getServerName() + <span class="string">":"</span> + request.getServerPort()</span><br><span class="line">   + path + <span class="string">"/"</span>;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;base href=<span class="string">"&lt;%=basePath%&gt;"</span>&gt;</span><br><span class="line">&lt;title&gt;上传图片&lt;/title&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"pragma"</span> content=<span class="string">"no-cache"</span>&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"cache-control"</span> content=<span class="string">"no-cache"</span>&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"expires"</span> content=<span class="string">"0"</span>&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"keywords"</span> content=<span class="string">"keyword1,keyword2,keyword3"</span>&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"description"</span> content=<span class="string">"This is my page"</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">"upload.do"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line"> &lt;input type=<span class="string">"file"</span> name=<span class="string">"file"</span>/&gt;</span><br><span class="line"> &lt;input type=<span class="string">"submit"</span> value=<span class="string">"上传"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="result-jsp"><a href="#result-jsp" class="headerlink" title="result.jsp:"></a>result.jsp:</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> <span class="keyword">import</span>=<span class="string">"java.util.*"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line"> String path = request.getContextPath();</span><br><span class="line"> String basePath = request.getScheme() + <span class="string">"://"</span></span><br><span class="line">   + request.getServerName() + <span class="string">":"</span> + request.getServerPort()</span><br><span class="line">   + path + <span class="string">"/"</span>;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;base href=<span class="string">"&lt;%=basePath%&gt;"</span>&gt;</span><br><span class="line">&lt;title&gt;上传结果&lt;/title&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"pragma"</span> content=<span class="string">"no-cache"</span>&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"cache-control"</span> content=<span class="string">"no-cache"</span>&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"expires"</span> content=<span class="string">"0"</span>&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"keywords"</span> content=<span class="string">"keyword1,keyword2,keyword3"</span>&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"description"</span> content=<span class="string">"This is my page"</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"> &lt;img alt=<span class="string">"#"</span> src=<span class="string">"$&#123;fileUrl&#125;"</span> style=<span class="string">"width: 200px;height: 200px;"</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="error-fileupload-jsp"><a href="#error-fileupload-jsp" class="headerlink" title="error_fileupload.jsp:"></a>error_fileupload.jsp:</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> <span class="keyword">import</span>=<span class="string">"java.util.*"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">String path = request.getContextPath();</span><br><span class="line">String basePath = request.getScheme()+<span class="string">"://"</span>+request.getServerName()+<span class="string">":"</span>+request.getServerPort()+path+<span class="string">"/"</span>;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;base href=<span class="string">"&lt;%=basePath%&gt;"</span>&gt;</span><br><span class="line">   </span><br><span class="line">    &lt;title&gt;My JSP 'error_fileupload.jsp' starting page&lt;/title&gt;</span><br><span class="line">   </span><br><span class="line"> &lt;meta http-equiv=<span class="string">"pragma"</span> content=<span class="string">"no-cache"</span>&gt;</span><br><span class="line"> &lt;meta http-equiv=<span class="string">"cache-control"</span> content=<span class="string">"no-cache"</span>&gt;</span><br><span class="line"> &lt;meta http-equiv=<span class="string">"expires"</span> content=<span class="string">"0"</span>&gt;   </span><br><span class="line"> &lt;meta http-equiv=<span class="string">"keywords"</span> content=<span class="string">"keyword1,keyword2,keyword3"</span>&gt;</span><br><span class="line"> &lt;meta http-equiv=<span class="string">"description"</span> content=<span class="string">"This is my page"</span>&gt;</span><br><span class="line"> &lt;!--</span><br><span class="line"> &lt;link rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href=<span class="string">"styles.css"</span>&gt;</span><br><span class="line"> --&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/head&gt;</span><br><span class="line"> </span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    文件太大&lt;a href="history.go(-1)"&gt;返回&lt;/a&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="项目运行截图："><a href="#项目运行截图：" class="headerlink" title="项目运行截图："></a>项目运行截图：</h2><p><img src="https://i.loli.net/2020/09/24/VPukRUtah4Kwbd2.jpg" alt="Spring MVC Upload Example 002.jpg"></p><p><img src="https://i.loli.net/2020/09/24/tvIsVSRG3glNqx4.jpg" alt="Spring MVC Upload Example 003.jpg"></p><h2 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h2><p><a href="http://pan.baidu.com/s/1qWNMxcS" target="_blank" rel="noopener">http://pan.baidu.com/s/1qWNMxcS</a></p>]]></content>
      
      
      <categories>
          
          <category> Spring MVC </category>
          
          <category> 文件上传 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring MVC </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 下安装 jdk-7u75-linux-x64.gz，jdk1.7.0_75，jdk1.7步骤</title>
      <link href="/2020/10/23/Linux-%E4%B8%8B%E5%AE%89%E8%A3%85-jdk-7u75-linux-x64-gz%EF%BC%8Cjdk1-7-0-75%EF%BC%8Cjdk1-7%E6%AD%A5%E9%AA%A4/"/>
      <url>/2020/10/23/Linux-%E4%B8%8B%E5%AE%89%E8%A3%85-jdk-7u75-linux-x64-gz%EF%BC%8Cjdk1-7-0-75%EF%BC%8Cjdk1-7%E6%AD%A5%E9%AA%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>近来又用到了Linux系统，所以就又新装了一个虚拟机和CentOS6.4来用，搞开发的程序猿们可能都知道，在现在的很多企业中，生产环境大多都是Linux服务器，并且用的比较多的大都是CentOS，Red hat系列的Linux系统环境，下面我就以我当前安装的CentOS 6.4来说明一下在该环境下安装Jdk 1.7.0_75版本的操作过程吧，如下所述：</p><h2 id="下载JDK"><a href="#下载JDK" class="headerlink" title="下载JDK"></a>下载JDK</h2><p>首先下载对应CentOS版本的jdk：这里我下载的是<a href="https://download.oracle.com/errors/download-fail-1505220.html" target="_blank" rel="noopener">jdk-7u75-linux-x64.tar.gz</a>，下载地址为：<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html</a></p><h2 id="上传JDK"><a href="#上传JDK" class="headerlink" title="上传JDK"></a>上传JDK</h2><p>下载该jdk到本地，并上传到你的CentOS 6.4系统的opt临时目录下。</p><h2 id="检测JDK"><a href="#检测JDK" class="headerlink" title="检测JDK"></a>检测JDK</h2><p>在安装自己下载的jdk之前，要先看看新安装的CentOS6.4系统自带的jdk版本，如果存在最好是卸载掉，然后再安装自己下载的jdk版本，如何卸载linux系统自带的jdk网上有很多例子，相信大家都会操作。</p><h2 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h2><p>新建一个jdk的安装目录，我这里是在/usr/local/下新建了java目录，命令:mkdir /usr/local/java ，再把 jdk-7u75-linux-x64.tar.gz压缩包从opt目录下复制到/usr/local/java目录下，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp jdk-7u75-linux-x64.tar.gz /usr/local/java</span><br></pre></td></tr></table></figure><h2 id="解压缩JDK"><a href="#解压缩JDK" class="headerlink" title="解压缩JDK"></a>解压缩JDK</h2><p>解压缩刚才下载的： jdk-7u75-linux-x64.tar.gz包，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xvf  jdk-7u75-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><h2 id="配置JDK环境变量"><a href="#配置JDK环境变量" class="headerlink" title="配置JDK环境变量"></a>配置JDK环境变量</h2><p>解压完成后，进入到：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost~]# cd /etc</span><br><span class="line"></span><br><span class="line">[root@localhost etc]# vi profile</span><br></pre></td></tr></table></figure><p>在profile文件的末尾加入如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/java/jdk1.7.0_75</span><br><span class="line">export JRE_HOME=/usr/local/java/jdk1.7.0_75/jre</span><br><span class="line">export PATH=$PATH:/usr/local/java/jdk1.7.0_75/bin</span><br><span class="line">export CLASSPATH=./:/usr/local/java/jdk1.7.0_75/lib:/usr/local/java/jdk1.7.0_75/jre/lib</span><br></pre></td></tr></table></figure><p>输入:wq保存并退出，然后再重启CentOS 6.4系统。</p><h2 id="验证JDK是否安装成功"><a href="#验证JDK是否安装成功" class="headerlink" title="验证JDK是否安装成功"></a>验证JDK是否安装成功</h2><p>重新启动系统后，输入：java -version，如果看到如下截图说明你的jdk已经安装成功了。</p><p><img src="https://i.loli.net/2020/09/24/357Enr2iHy9uMsk.jpg" alt="Linux 下安装 jdk-7u75-linux-x64.gz，jdk1.7.0_75，jdk1.7步骤.jpg"></p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>就是修改profile文件，主要是权限不够。 可以先ls -l /etc/profile ，看一下权限，应该是644，然后执行chmod 666 profile，改了权限之后，可以把那些jdk的信息填到profile的最后面，执行:wq保存退出，重启就可以看到版本号了。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> jdk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> jdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 从入门到精通</title>
      <link href="/2020/10/23/git-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/"/>
      <url>/2020/10/23/git-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要："><a href="#摘要：" class="headerlink" title="摘要："></a>摘要：</h2><p>git 操作指南</p><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p><a href="http://code.google.com/p/git-osx-installer/downloads/list?can=3" target="_blank" rel="noopener">下载 git OSX版</a><br><br><a href="http://code.google.com/p/msysgit/downloads/list?can=3" target="_blank" rel="noopener">下载 git Windows版</a><br><br><a href="http://book.git-scm.com/2_installing_git.html" target="_blank" rel="noopener">下载 git Linux版</a></p><h2 id="创建新仓库"><a href="#创建新仓库" class="headerlink" title="创建新仓库"></a>创建新仓库</h2><p>创建新文件夹，打开，然后执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git int</span><br></pre></td></tr></table></figure><p>以创建新的git仓库。</p><h2 id="检出仓库"><a href="#检出仓库" class="headerlink" title="检出仓库"></a>检出仓库</h2><p>执行如下命令以创建一个本地仓库的克隆版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone /path/to/repository</span><br></pre></td></tr></table></figure><p>如果是远端服务器上的仓库，你的命令会是这个样子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone username@host:/path/to/repository</span><br></pre></td></tr></table></figure><h2 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h2><p>你的本地仓库由git维护的三棵“树”组成。第一个是你的<strong>工作目录</strong>，它持有实际文件；第二个是<strong>缓存区(Index)</strong>，它像个缓存区域，临时报错你的改动；最后是<strong>HEAD</strong>，指向你最近一次提交后的结果。</p><p><img src="https://i.loli.net/2020/09/25/JNrz1t48fcZmsRi.png" alt="git 操作指南 -001.png"></p><h2 id="添加与提交"><a href="#添加与提交" class="headerlink" title="添加与提交"></a>添加与提交</h2><p>你可以计划改动(把它们添加到缓存区)，使用如下名称：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;filename&gt;</span><br><span class="line">git add *</span><br></pre></td></tr></table></figure><p>这是git基本工作流程的第一步；使用如下命令以实际提交改动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;代码提交信息&quot;</span><br></pre></td></tr></table></figure><p>现在，你的改动已经提交到了HEAD，但是还没到你的远端仓库。</p><h2 id="推送改动"><a href="#推送改动" class="headerlink" title="推送改动"></a>推送改动</h2><p>你的改动现在已经在本地仓库的HEAD中了。执行如下命令以将这些改动提交到远端仓库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>可以把master换成你想要推送的任何分支。</p><p>如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin &lt;server&gt;</span><br></pre></td></tr></table></figure><p>如此你就能够将你的改动推送到所添加的服务器上去了。</p><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>分支是用来将特性开发绝缘开来的。在你创建仓库的时候，master是“默认的”。在其他分支上进行开发，完成后再将它们合并到主分支上。</p><p><img src="https://i.loli.net/2020/09/25/W4oRHIdBhUXcSTA.png" alt="git 操作指南 -002.png"></p><p>创建一个叫做“feature_x”的分支，并切换过去：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b feature_x</span><br></pre></td></tr></table></figure><p>切换回主分支：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure><p>再把新建的分支删掉：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d feature_x</span><br></pre></td></tr></table></figure><p>除非你将分支推送到远端仓库，不然该分支就是 不为他人所见的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin &lt;branch&gt;</span><br></pre></td></tr></table></figure><h2 id="更新与合并"><a href="#更新与合并" class="headerlink" title="更新与合并"></a>更新与合并</h2><p>要更新你的本地仓库至最新改动，执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><p>以在你的工作目录中 获取（fetch） 并 合并（merge） 远端的改动。要合并其他分支到你的当前分支（例如 master），执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;branch&gt;</span><br></pre></td></tr></table></figure><p>两种情况下，git 都会尝试去自动合并改动。不幸的是，自动合并并非次<br>次都能成功，并可能导致 冲突（conflicts）。 这时候就需要你修改这些<br>文件来人肉合并这些 冲突（conflicts） 了。改完之后，你需要执行如下<br>命令以将它们标记为合并成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>在合并改动之前，也可以使用如下命令查看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff &lt;source_branch&gt; &lt;target_branch&gt;</span><br></pre></td></tr></table></figure><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p>在软件发布时创建标签，是被推荐的。这是个旧有概念，在 SVN 中也有。可以执行如下命令以创建一个叫做 1.0.0 的标签：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag 1.0.0 1b2e1d63ff</span><br></pre></td></tr></table></figure><p>1b2e1d63ff 是你想要标记的提交 ID 的前 10 位字符。使用如下命令获取提交 ID：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure><p>你也可以用该提交 ID 的少一些的前几位，只要它是唯一的。</p><h2 id="替换本地改动"><a href="#替换本地改动" class="headerlink" title="替换本地改动"></a>替换本地改动</h2><p>假如你做错事（自然，这是不可能的），你可以使用如下命令替换掉本地改动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到缓存区的改动，以及新文件，都不受影响。</p><p>假如你想要丢弃你所有的本地改动与提交，可以到服务器上获取最新的版本并将你本地主分支指向到它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin</span><br><span class="line"></span><br><span class="line">git reset --hard origin/master</span><br></pre></td></tr></table></figure><h2 id="有用的贴士"><a href="#有用的贴士" class="headerlink" title="有用的贴士"></a>有用的贴士</h2><p>内建的图形化 git：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitk</span><br></pre></td></tr></table></figure><p>彩色的 git 输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config color.ui true</span><br></pre></td></tr></table></figure><p>显示历史记录时，只显示一行注释信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config format.pretty oneline</span><br></pre></td></tr></table></figure><p>交互地添加文件至缓存区：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add -i</span><br></pre></td></tr></table></figure><h2 id="链接与资源"><a href="#链接与资源" class="headerlink" title="链接与资源"></a>链接与资源</h2><h3 id="图形化界面"><a href="#图形化界面" class="headerlink" title="图形化界面"></a>图形化界面</h3><p><a href="http://gitx.laullon.com/" target="_blank" rel="noopener">GitX (L) (OSX, open source)</a><br><br><a href="https://www.git-tower.com/" target="_blank" rel="noopener">Tower (OSX)</a><br><br><a href="http://www.sourcetreeapp.com/" target="_blank" rel="noopener">Source Tree (OSX, free)</a><br><br><a href="http://mac.github.com/" target="_blank" rel="noopener">GitHub for Mac (OSX, free)</a><br><br><a href="https://itunes.apple.com/gb/app/gitbox/id403388357?mt=12" target="_blank" rel="noopener">GitBox (OSX)</a></p><h3 id="指南与手册"><a href="#指南与手册" class="headerlink" title="指南与手册"></a>指南与手册</h3><p><a href="http://book.git-scm.com/" target="_blank" rel="noopener">Git 社区参考书</a><br><br><a href="http://progit.org/book/" target="_blank" rel="noopener">专业 Git</a><br><br><a href="http://think-like-a-git.net/" target="_blank" rel="noopener">如 git 思考</a><br><br><a href="http://help.github.com/" target="_blank" rel="noopener">GitHub 帮助</a><br><br><a href="http://marklodato.github.com/visual-git-guide/index-en.html" target="_blank" rel="noopener">图形化的 Git 指南一则</a></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot Mongodb Configuration Remove _class</title>
      <link href="/2020/10/23/Spring-Boot-Mongodb-Configuration-Remove-class/"/>
      <url>/2020/10/23/Spring-Boot-Mongodb-Configuration-Remove-class/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>在使用Spring Boot整合Mongodb的过程中，在做insert对象的时候，在Collection中会出现一个_class字段属性，出现这个问题的原因是在调用mongoTemplate的insert方法时, spring-data-mongodb的TypeConverter会自动给document添加一个_class属性, 值是你保存的类名. 这种设计并没有什么坏处. spring-data-mongodb是为了在把document转换成Java对象时能够转换到具体的子类. 但有时候我们并不希望出现这个字段, 主要是看上去会比较”烦”. 可以通过设置MappingMongoConverter的MongoTypeMapper来解决这个问题。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>在Spring Boot的启动类里面加入下面的代码即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.micai.springboot;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.MongoDbFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.MongoTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.convert.DefaultDbRefResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.convert.DefaultMongoTypeMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.convert.MappingMongoConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.mapping.MongoMappingContext;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Spring Boot应用启动类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 赵新国 on 2017/8/21.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//@EnableScheduling // 定时任务注解</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class,args);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//mongodb entity remove _class</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MongoTemplate <span class="title">mongoTemplate</span><span class="params">(MongoDbFactory mongoDbFactory, MongoMappingContext context)</span> </span>&#123;</span><br><span class="line">        MappingMongoConverter converter = <span class="keyword">new</span> MappingMongoConverter(<span class="keyword">new</span> DefaultDbRefResolver(mongoDbFactory), context);</span><br><span class="line">        converter.setTypeMapper(<span class="keyword">new</span> DefaultMongoTypeMapper(<span class="keyword">null</span>));</span><br><span class="line">        MongoTemplate mongoTemplate = <span class="keyword">new</span> MongoTemplate(mongoDbFactory, converter);</span><br><span class="line">        <span class="keyword">return</span> mongoTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
          <category> Mongodb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot+Spring Security+JWT 实现 RESTful Api 认证（二）</title>
      <link href="/2020/10/23/Spring-Boot-Spring-Security-JWT-%E5%AE%9E%E7%8E%B0-RESTful-Api-%E8%AE%A4%E8%AF%81%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2020/10/23/Spring-Boot-Spring-Security-JWT-%E5%AE%9E%E7%8E%B0-RESTful-Api-%E8%AE%A4%E8%AF%81%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-Boot-Spring-Security-JWT-实现-RESTful-Api-认证（二）"><a href="#Spring-Boot-Spring-Security-JWT-实现-RESTful-Api-认证（二）" class="headerlink" title="Spring Boot+Spring Security+JWT 实现 RESTful Api 认证（二）"></a>Spring Boot+Spring Security+JWT 实现 RESTful Api 认证（二）</h2><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>上一篇<a href="https://javaymw.com/post/59" target="_blank" rel="noopener">https://javaymw.com/post/59</a>我们已经实现了基本的登录和token认证接口，但是这里有个问题，对于那些活跃用户来说如果token的过期时间设置的太短，那么就会使用户频繁的登录，这样用户体验不好，所以我们需要根据一种机制来判断什么时候应该主动刷新token，并且对于活跃用户来说应该是无感知的才行，那么我这里提供一种思路，暂且叫它<strong>2倍时间机制</strong>，那么怎么理解呢，请看下图：</p><p><img src="https://i.loli.net/2020/07/09/cOfG5ntpIPYlx7T.jpg" alt="Spring Boot_Spring Security_JWT 实现 RESTful Api 认证（二）001.jpg"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><img src="https://i.loli.net/2020/07/09/od5ZTm8BtbKNXLu.jpg" alt="Spring Boot_Spring Security_JWT 实现 RESTful Api 认证（二）002.jpg"></p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://i.loli.net/2020/07/09/LH25J9E8wDdVRab.png" alt="Spring Boot_Spring Security_JWT 实现 RESTful Api 认证（二）003.png"></p><p><img src="https://i.loli.net/2020/07/09/mhS29iP4WMTDjqv.png" alt="Spring Boot_Spring Security_JWT 实现 RESTful Api 认证（二）004.png"></p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>以上就是对JWT的刷新方案的实现，欢迎各位客官交流。</p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
          <category> Spring Security </category>
          
          <category> JWT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Spring Security </tag>
            
            <tag> JWT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> Spring Boot+Spring Security+JWT 实现 RESTful Api 认证（一）</title>
      <link href="/2020/10/23/Spring-Boot-Spring-Security-JWT-%E5%AE%9E%E7%8E%B0-RESTful-Api-%E8%AE%A4%E8%AF%81%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2020/10/23/Spring-Boot-Spring-Security-JWT-%E5%AE%9E%E7%8E%B0-RESTful-Api-%E8%AE%A4%E8%AF%81%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p> Spring Boot+Spring Security+JWT 实现 RESTful Api 认证（一）</p><h2 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h2><p>Spring Boot 2、Spring Security 5、JWT</p><h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><p>IDEA+JDK8.0+MySQL5.0+</p><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>Spring Boot 2 + Spring Security 5 + JWT 实现给RestApi增加认证控制</p><h2 id="测试流程"><a href="#测试流程" class="headerlink" title="测试流程"></a>测试流程</h2><h3 id="下面对我们的程序进行简单的验证"><a href="#下面对我们的程序进行简单的验证" class="headerlink" title="下面对我们的程序进行简单的验证"></a>下面对我们的程序进行简单的验证</h3><h4 id="1-请求获取用户列表接口-http-localhost-8080-users-userList接口，会收到401错误"><a href="#1-请求获取用户列表接口-http-localhost-8080-users-userList接口，会收到401错误" class="headerlink" title="1.请求获取用户列表接口:http://localhost:8080/users/userList接口，会收到401错误"></a>1.请求获取用户列表接口:<a href="http://localhost:8080/users/userList接口，会收到401错误" target="_blank" rel="noopener">http://localhost:8080/users/userList接口，会收到401错误</a><br></h4><p>{<br>    “timestamp”: 1567564486909,<br>    “status”: 401,<br>    “error”: “Unauthorized”,<br>    “message”: “Full authentication is required to access this resource”,<br>    “path”: “/users/userList”<br>}<br>curl <a href="http://localhost:8080/users/userList" target="_blank" rel="noopener">http://localhost:8080/users/userList</a><br><br>原因就是因为这个url没有授权,所以返回401<br><br><img src="https://gitee.com/uploads/images/2018/0211/154022_8d9806ae_130820.png" alt="输入图片说明" title="jwt-1.png"></p><h4 id="2-注册一个新用户"><a href="#2-注册一个新用户" class="headerlink" title="2.注册一个新用户"></a>2.注册一个新用户<br></h4><p>curl -H “Content-Type: application/json” -X POST -d ‘{<br><br>    “username”: “admin”,<br><br>    “password”: “password”<br><br>}’ <a href="http://localhost:8080/users/signup" target="_blank" rel="noopener">http://localhost:8080/users/signup</a><br><br><img src="https://gitee.com/uploads/images/2018/0211/154042_74fb2aa6_130820.png" alt="输入图片说明" title="jwt-2.png"></p><h4 id="3-登录，会返回token，在http-header中，Authorization-Bearer-后面的部分就是token"><a href="#3-登录，会返回token，在http-header中，Authorization-Bearer-后面的部分就是token" class="headerlink" title="3.登录，会返回token，在http header中，Authorization: Bearer 后面的部分就是token"></a>3.登录，会返回token，在http header中，Authorization: Bearer 后面的部分就是token<br></h4><p>curl -i -H “Content-Type: application/json” -X POST -d ‘{<br><br>    “username”: “admin”,<br><br>    “password”: “password”<br><br>}’ <a href="http://localhost:8080/login" target="_blank" rel="noopener">http://localhost:8080/login</a><br><br>温馨提醒:这里的login方法是spring specurity框架提供的默认登录url<br><img src="https://gitee.com/uploads/images/2018/0211/154308_9576ce90_130820.png" alt="输入图片说明" title="jwt-3.png"></p><h4 id="4-用登录成功后拿到的token再次请求-users-userList接口"><a href="#4-用登录成功后拿到的token再次请求-users-userList接口" class="headerlink" title="4.用登录成功后拿到的token再次请求/users/userList接口"></a>4.用登录成功后拿到的token再次请求/users/userList接口<br></h4><p> 4.1将请求中的XXXXXX替换成拿到的token<br><br> 4.2这次可以成功调用接口了<br><br>curl -H “Content-Type: application/json”<br><br>-H “Authorization: Bearer XXXXXX”<br><br>“<a href="http://localhost:8080/users/userList&quot;" target="_blank" rel="noopener">http://localhost:8080/users/userList&quot;</a><br><img src="https://gitee.com/uploads/images/2018/0211/154315_241cd6b2_130820.png" alt="输入图片说明" title="jwt-4.png"></p><h4 id="5-设置了1分钟后Token过期，如果1分钟后再次请求-users-userList接口返回Token过期的异常提示如下图"><a href="#5-设置了1分钟后Token过期，如果1分钟后再次请求-users-userList接口返回Token过期的异常提示如下图" class="headerlink" title="5.设置了1分钟后Token过期，如果1分钟后再次请求/users/userList接口返回Token过期的异常提示如下图:"></a>5.设置了1分钟后Token过期，如果1分钟后再次请求/users/userList接口返回Token过期的异常提示如下图:<br></h4><p><img src="https://gitee.com/uploads/images/2018/0411/231525_74189dfe_130820.png" alt="输入图片说明" title="Token过期.png"></p><h4 id="6-集成Swagger-ui，方便前后端分离开发，默认访问地址：http-localhost-8080-swagger-ui-html"><a href="#6-集成Swagger-ui，方便前后端分离开发，默认访问地址：http-localhost-8080-swagger-ui-html" class="headerlink" title="6.集成Swagger-ui，方便前后端分离开发，默认访问地址：http://localhost:8080/swagger-ui.html "></a>6.集成Swagger-ui，方便前后端分离开发，默认访问地址：<a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8080/swagger-ui.html</a> <br></h4><p><img src="https://gitee.com/uploads/images/2018/0606/144813_c5dfeec8_130820.png" alt="输入图片说明" title="1.png"><br><img src="https://gitee.com/uploads/images/2018/0606/144822_b3698637_130820.png" alt="输入图片说明" title="22.png"><br><img src="https://gitee.com/uploads/images/2018/0606/144830_d28eda7f_130820.png" alt="输入图片说明" title="2.png"><br>温馨提示：这里的登录接口还是使用的默认地址，如果你的token过期了，需要你重新登录生成新的token.<br></p><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p><a href="https://gitee.com/micai-code/springboot-springsecurity-jwt-demo.git" target="_blank" rel="noopener">https://gitee.com/micai-code/springboot-springsecurity-jwt-demo.git</a></p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>在使用的过程中，如有问题，可以添加真正讨论技术的QQ交流群，QQ群号为：715224124</p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
          <category> Spring Security </category>
          
          <category> JWT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Spring Security </tag>
            
            <tag> JWT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot2 + Spring Security5 资源菜单按钮动态显示(7)</title>
      <link href="/2020/06/07/Spring-Boot2-Spring-Security5-%E8%B5%84%E6%BA%90%E8%8F%9C%E5%8D%95%E6%8C%89%E9%92%AE%E5%8A%A8%E6%80%81%E6%98%BE%E7%A4%BA-7/"/>
      <url>/2020/06/07/Spring-Boot2-Spring-Security5-%E8%B5%84%E6%BA%90%E8%8F%9C%E5%8D%95%E6%8C%89%E9%92%AE%E5%8A%A8%E6%80%81%E6%98%BE%E7%A4%BA-7/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上篇文章介绍了动态用户角色资源的权限管理，在结尾，也提到了个比较实际的问题</p><p>一般系统是不会让用户去点击了菜单才发现没有权限访问，而是<strong>针对不同的用户，动态显示不同的菜单</strong></p><h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>那么怎么实现呢，通过Spring Securiyt的标签和后台动态标签验证就可以解决</p><p>那么，要想引用Spring Security标签，那么就要引入相应的<strong>标签库</strong>，因为小编这里用的前端模板是Thymeleaf，所以引入标签库如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意，因为我这里使用的是 <strong>Spring Security5</strong> 的版本，所以对应也是</p><blockquote><p>thymeleaf-extras-springsecurity5</p></blockquote><p>如果是 <strong>Spring Security4</strong> 的话对应就是</p><blockquote><p>thymeleaf-extras-springsecurit4</p></blockquote><p>然后每个页面只需要在html头部引入</p><blockquote><p>xmlns:sec=“<a href="http://www.thymeleaf.org/extras/spring-security”" target="_blank" rel="noopener">http://www.thymeleaf.org/extras/spring-security”</a></p></blockquote><p>即可使用 Spring Security 标签库</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>这里基本介绍就介绍完了，下面开始说下怎么实现的动态显示菜单的问题</p><p>在需要动态显示的菜单上，加上</p><blockquote><p>&lt;标签 sec:authorize=“hasAuthority(‘key’)”&gt;</p></blockquote><p>key则为资源表中的资源标识字段</p><p>那我们看看接上篇文章的代码，现在我想给我的菜单1、菜单2、菜单3动态显示，那么实现代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:sec</span>=<span class="string">"http://www.thymeleaf.org/extras/spring-security"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">index页<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authorize</span>=<span class="string">"hasAuthority('menu1')"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"menu1Btn"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"sendAjax('/menu1')"</span>&gt;</span>菜单1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authorize</span>=<span class="string">"hasAuthority('menu2')"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"menu2Btn"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"sendAjax('/menu2')"</span>&gt;</span>菜单2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authorize</span>=<span class="string">"hasAuthority('menu3')"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"menu3Btn"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"sendAjax('/menu3')"</span>&gt;</span>菜单3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://libs.baidu.com/jquery/2.1.4/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    function sendAjax(url) &#123;</span><br><span class="line"></span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type: "GET",</span><br><span class="line">            url: url,</span><br><span class="line">            dataType: "text",</span><br><span class="line">            success: function (data) &#123;</span><br><span class="line">                console.log(data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>那么到这里我们就算完成了，我们看看效果</p><p>这里我们先用<strong>admin管理员角色</strong>登录，首页如下：</p><p><img src="https://i.loli.net/2020/06/07/MEh9NQDRcG4aLiP.png" alt="Spring Boot2 _ Spring Security5 资源菜单按钮动态显示_7_ - 01.png"></p><p>然后，再用teacher教师角色登录，首页如下：</p><p><img src="https://i.loli.net/2020/06/07/oy3OnHPESjtYBQc.png" alt="Spring Boot2 _ Spring Security5 资源菜单按钮动态显示_7_ - 02.png"></p><p>最后，再用student学生角色登录，首页如下：</p><p><img src="https://i.loli.net/2020/06/07/rtmkcsBlXK9d1YS.png" alt="Spring Boot2 _ Spring Security5 资源菜单按钮动态显示_7_ - 03.png"></p><p>可以看到，对应不同的权限，显示不同的资源按钮</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>那么基本代码和效果也演示完毕了</p><p>源码获取方式加加入<strong>QQ交流群</strong>(<strong>715224124</strong>)，进群找群主要源码，如果有问题，可以提出疑问，群主会尽量帮助解决~</p><p>希望能帮助到大家，如果有不好或者错误的地方希望能多多提出，谢谢大家~</p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
          <category> Spring Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Spring Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot2 + Spring Security5 动态用户角色资源的权限管理(6)</title>
      <link href="/2020/06/07/Spring-Boot2-Spring-Security5-%E5%8A%A8%E6%80%81%E7%94%A8%E6%88%B7%E8%A7%92%E8%89%B2%E8%B5%84%E6%BA%90%E7%9A%84%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86-6/"/>
      <url>/2020/06/07/Spring-Boot2-Spring-Security5-%E5%8A%A8%E6%80%81%E7%94%A8%E6%88%B7%E8%A7%92%E8%89%B2%E8%B5%84%E6%BA%90%E7%9A%84%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86-6/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上篇文章介绍了Spring Boot Security基于Redis的Spring Session管理</p><p>本篇文章，可以说比较核心、实用的功能，<strong>动态用户角色资源管理(RBAC)</strong>，可能篇幅会比较长，废话不多说，马上进入正题</p><h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>相信每个正规的系统，都会对<strong>系统安全</strong>和<strong>访问权限</strong>有严格的控制。简单的一句话总结，就是<strong>对的人访问对的资源</strong>，这里可能会比较抽象，博主给大家举个例子就懂了：</p><p>现在假设有个系统，里面有菜单A、菜单B和菜单C<br>客户有这么个需求，就是对于管理员来说，可以访问所有资源菜单，对于普通用户来说，只能访问菜单A和菜单B，如图：</p><p><img src="https://i.loli.net/2020/06/07/kzylAvTBSxnFhbO.png" alt="Spring Boot2 _ Spring Security5 动态用户角色资源的权限管理_6_ -01.png"></p><p>相信这个也是广大系统都有的最基础的需求，那么在系统中的表现，就是<strong>用户登录了系统</strong>后，如果是<strong>普通用户</strong>的话，前端<strong>只显示菜单A和菜单B</strong>，其他途径访问(直接输入URL)菜单C会被提示无权限，而<strong>管理员则显示所有菜单</strong></p><p>那么怎么实现呢，小编这里就是基于<strong>RBAC模型</strong>去实现的，简单来说就是：</p><p><img src="https://i.loli.net/2020/06/07/tkuBymHaN4pQrn2.png" alt="Spring Boot2 _ Spring Security5 动态用户角色资源的权限管理_6_ -02.png"></p><p>举个例子：</p><ul><li>用户就是登录系统的用户，像张三、李四、小王这样的具体登陆用户</li><li>角色就是假如张三是教师、李四是学生，那么教师和学生角色，也可能可以分得更细，这个根据需求来定义</li><li>资源就是访问系统的资源，如查询学生信息、编辑学生信息等等之类</li></ul><p>用户和资源是没有直接关联的，<strong>用户是通过关联角色，角色再关联资源这种间接的方式去判断自己的资源权限</strong>。这样做的好处就是可以更简单直观的去管理用户资源间的关联，不需要说每创建一个用户，就去再重新分配资源这么繁琐，减少数据库冗余设计</p><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><p>数据库表的设计如图：</p><p><img src="https://i.loli.net/2020/06/07/jIrg1WBdNqpeRiH.png" alt="Spring Boot2 _ Spring Security5 动态用户角色资源的权限管理_6_ -03.png"></p><p>这里有几点要说明下：</p><ul><li>一般 用户 与 角色 是一对一或者一对多的关系，我这里为了方便所以<strong>选择一对一的关系</strong></li><li>角色 与 资源 是<strong>多对多的关系</strong>，所以需要中间表 sys_role_resource 存储中间的联系</li></ul><p>实体代码如下：</p><h2 id="Role-java"><a href="#Role-java" class="headerlink" title="Role.java"></a>Role.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Copyright 2020. javaymw.com Studio All Right Reserved</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Create on 2020-06-07 11:38</span></span><br><span class="line"><span class="comment"> * Created by zhaoxinguo</span></span><br><span class="line"><span class="comment"> * Version 2.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.javaymw.demo.sys.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 角色实体类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaoxinguo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/6/7 11:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"sys_role"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> <span class="keyword">implements</span> <span class="title">GrantedAuthority</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//id</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">protected</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//角色标识</span></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> String roleKey;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//角色名称</span></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> String roleName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//角色拥有的资源(多对多)</span></span><br><span class="line">    <span class="meta">@ManyToMany</span>(targetEntity = Resource.class, fetch = FetchType.EAGER)</span><br><span class="line">    <span class="meta">@JoinTable</span>(</span><br><span class="line">            name = <span class="string">"sys_role_resource"</span>,</span><br><span class="line">            joinColumns = &#123;</span><br><span class="line">                    <span class="meta">@JoinColumn</span>(name = <span class="string">"role_id"</span>, referencedColumnName = <span class="string">"id"</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            inverseJoinColumns = &#123;</span><br><span class="line">                    <span class="meta">@JoinColumn</span>(name = <span class="string">"resource_id"</span>, referencedColumnName = <span class="string">"id"</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Resource&gt; resources;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAuthority</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roleKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRoleKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roleKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoleKey</span><span class="params">(String roleKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roleKey = roleKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRoleName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roleName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoleName</span><span class="params">(String roleName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roleName = roleName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Resource&gt; <span class="title">getResources</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> resources;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResources</span><span class="params">(Set&lt;Resource&gt; resources)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.resources = resources;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里要说明下，GrantedAuthority 接口中的getAuthorities()方法返回的<strong>当前用户对象拥有的权限</strong>，简单的说就是该用户的角色信息，所以这里我<strong>角色标识roleKey</strong>表示</p><h2 id="Resource-java"><a href="#Resource-java" class="headerlink" title="Resource.java"></a>Resource.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Copyright 2020. javaymw.com Studio All Right Reserved</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Create on 2020-06-07 11:42</span></span><br><span class="line"><span class="comment"> * Created by zhaoxinguo</span></span><br><span class="line"><span class="comment"> * Version 2.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.javaymw.demo.sys.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 资源实体类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaoxinguo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/6/7 11:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"sys_resource"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Resource</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//id</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">protected</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//资源名称</span></span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> String resourceName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//资源标识</span></span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> String resourceKey;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//资源url</span></span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 资源类型</span></span><br><span class="line"><span class="comment">     * 0:菜单</span></span><br><span class="line"><span class="comment">     * 1:按钮</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer type;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getResourceName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> resourceName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResourceName</span><span class="params">(String resourceName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.resourceName = resourceName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getResourceKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> resourceKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResourceKey</span><span class="params">(String resourceKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.resourceKey = resourceKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(Integer type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相信这些代码大家都看得明白，下面开始进入核心部分</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>在这里，博主介绍下怎么在Spring Security中实现资源管理功能，也就是针对不同的用户角色，动态的判断是否能访问相应的资源菜单</p><p>先看看项目结构图：</p><p><img src="https://i.loli.net/2020/06/07/iQuUja7kcyER3Ww.png" alt="Spring Boot2 _ Spring Security5 动态用户角色资源的权限管理_6_ -04.png"></p><p>首先，我们需要在自定义登录认证那里，设置权限信息：</p><h2 id="LoginValidateAuthenticationProvider-java"><a href="#LoginValidateAuthenticationProvider-java" class="headerlink" title="LoginValidateAuthenticationProvider.java"></a>LoginValidateAuthenticationProvider.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Copyright 2020. javaymw.com Studio All Right Reserved</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Create on 2020-06-05 21:59</span></span><br><span class="line"><span class="comment"> * Created by zhaoxinguo</span></span><br><span class="line"><span class="comment"> * Version 2.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.javaymw.demo.core;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.javaymw.demo.sys.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.javaymw.demo.sys.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.authority.SimpleGrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 自定义认证核心类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaoxinguo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/6/5 21:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginValidateAuthenticationProvider</span> <span class="keyword">implements</span> <span class="title">AuthenticationProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解密用的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 进行身份验证</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authentication</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AuthenticationException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">authenticate</span><span class="params">(Authentication authentication)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="comment">//获取输入的用户名</span></span><br><span class="line">        String username = authentication.getName();</span><br><span class="line">        <span class="comment">//获取输入的明文</span></span><br><span class="line">        String rawPassword = (String) authentication.getCredentials();</span><br><span class="line">        <span class="comment">//查询用户是否存在</span></span><br><span class="line">        User user = (User) userService.loadUserByUsername(username);</span><br><span class="line">        <span class="keyword">if</span> (!user.isEnabled()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> DisabledException(<span class="string">"该账户已被禁用，请联系管理员"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!user.isAccountNonLocked()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LockedException(<span class="string">"该账号已被锁定"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!user.isAccountNonExpired()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AccountExpiredException(<span class="string">"该账号已过期，请联系管理员"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!user.isCredentialsNonExpired()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> CredentialsExpiredException(<span class="string">"该账户的登录凭证已过期，请重新登录"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//验证密码</span></span><br><span class="line">        <span class="keyword">if</span> (!passwordEncoder.matches(rawPassword, user.getPassword())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(<span class="string">"输入密码错误!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO Spring Boot2 + Spring Security5 动态用户角色资源的权限管理(6) 添加代码</span></span><br><span class="line">        <span class="comment">// 设置权限信息</span></span><br><span class="line">        Set&lt;GrantedAuthority&gt; grantedAuthorities  = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (com.javaymw.demo.sys.entity.Resource resource : user.getRole().getResources()) &#123;</span><br><span class="line">            <span class="comment">//资源key作为权限标识</span></span><br><span class="line">            grantedAuthorities.add(<span class="keyword">new</span> SimpleGrantedAuthority(resource.getResourceKey()));</span><br><span class="line">            user.setAuthorities(grantedAuthorities);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UsernamePasswordAuthenticationToken(user, rawPassword, user.getAuthorities());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; authentication)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//确保authentication能转成该类</span></span><br><span class="line">        <span class="keyword">return</span> authentication.equals(UsernamePasswordAuthenticationToken.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里要注意的是，我们把resource实体的<strong>resourceKey作为资源的权限标识</strong>，设置进<strong>grantedAuthorities集合</strong>里面，以便spring security<strong>根据注解@PreAuthorize自动权限判断</strong></p><p>由于我们设计的<strong>用户与角色是一对一关联</strong>，所以我们这里GrantedAuthority集合就只有一条角色信息数据</p><p>然后就是自定义权限不足handler</p><h2 id="PerAccessDeniedHandler-java"><a href="#PerAccessDeniedHandler-java" class="headerlink" title="PerAccessDeniedHandler.java"></a>PerAccessDeniedHandler.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Copyright 2020. javaymw.com Studio All Right Reserved</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Create on 2020-06-07 11:50</span></span><br><span class="line"><span class="comment"> * Created by zhaoxinguo</span></span><br><span class="line"><span class="comment"> * Version 2.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.javaymw.demo.core.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.access.AccessDeniedException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.access.AccessDeniedHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 自定义权限不足handler</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaoxinguo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/6/7 11:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PerAccessDeniedHandler</span> <span class="keyword">implements</span> <span class="title">AccessDeniedHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">//登录成功返回</span></span><br><span class="line">        Map&lt;String, Object&gt; paramMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">        paramMap.put(<span class="string">"code"</span>, <span class="string">"503"</span>);</span><br><span class="line">        paramMap.put(<span class="string">"message"</span>, accessDeniedException.getMessage());</span><br><span class="line">        <span class="comment">//设置返回请求头</span></span><br><span class="line">        response.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">        <span class="comment">//写出流</span></span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        out.write(JSONObject.toJSONString(paramMap));</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后我们看看Spring Security配置类的变化：</p><h2 id="SecurityConfig-java"><a href="#SecurityConfig-java" class="headerlink" title="SecurityConfig.java"></a>SecurityConfig.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Copyright 2020. javaymw.com Studio All Right Reserved</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Create on 2020-06-05 21:58</span></span><br><span class="line"><span class="comment"> * Created by zhaoxinguo</span></span><br><span class="line"><span class="comment"> * Version 2.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.javaymw.demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.javaymw.demo.core.LoginValidateAuthenticationProvider;</span><br><span class="line"><span class="keyword">import</span> com.javaymw.demo.core.handler.LoginFailureHandler;</span><br><span class="line"><span class="keyword">import</span> com.javaymw.demo.core.handler.LoginSuccessHandler;</span><br><span class="line"><span class="keyword">import</span> com.javaymw.demo.core.handler.PerAccessDeniedHandler;</span><br><span class="line"><span class="keyword">import</span> com.javaymw.demo.sys.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Spring Security 核心配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaoxinguo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/6/5 21:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity</span>(securedEnabled = <span class="keyword">true</span>, prePostEnabled = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据源</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户业务层</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义认证</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> LoginValidateAuthenticationProvider loginValidateAuthenticationProvider;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//登录成功handler</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> LoginSuccessHandler loginSuccessHandler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//登录失败handler</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> LoginFailureHandler loginFailureHandler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//权限不足handler</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PerAccessDeniedHandler perAccessDeniedHandler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 权限核心配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> http</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//基础设置</span></span><br><span class="line">        http.httpBasic()<span class="comment">//配置HTTP基本身份验证</span></span><br><span class="line">                .and()</span><br><span class="line">                    .authorizeRequests()</span><br><span class="line">                    .anyRequest().authenticated()<span class="comment">//所有请求都需要认证</span></span><br><span class="line">                .and()</span><br><span class="line">                    .formLogin() <span class="comment">//登录表单</span></span><br><span class="line">                    .loginPage(<span class="string">"/login"</span>)<span class="comment">//登录页面url</span></span><br><span class="line">                    .loginProcessingUrl(<span class="string">"/login"</span>)<span class="comment">//登录验证url</span></span><br><span class="line">                    .defaultSuccessUrl(<span class="string">"/index"</span>)<span class="comment">//成功登录跳转</span></span><br><span class="line">                    .successHandler(loginSuccessHandler)<span class="comment">//成功登录处理器</span></span><br><span class="line">                    .failureHandler(loginFailureHandler)<span class="comment">//失败登录处理器</span></span><br><span class="line">                    .permitAll()<span class="comment">//登录成功后有权限访问所有页面</span></span><br><span class="line">                .and()</span><br><span class="line">                    .exceptionHandling().accessDeniedHandler(perAccessDeniedHandler)<span class="comment">//设置权限不足handler</span></span><br><span class="line">                .and()</span><br><span class="line">                    .rememberMe()<span class="comment">//记住我功能</span></span><br><span class="line">                    .userDetailsService(userService)<span class="comment">//设置用户业务</span></span><br><span class="line">                    .tokenRepository(persistentTokenRepository())<span class="comment">//设置持久化token</span></span><br><span class="line">                    .tokenValiditySeconds(<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>);<span class="comment">//记住登录1天(24小时 *60分钟 * 60秒)</span></span><br><span class="line">        <span class="comment">//关闭csrf跨域攻击防御</span></span><br><span class="line">        http.csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//这里要设置自定义认证</span></span><br><span class="line">        auth.authenticationProvider(loginValidateAuthenticationProvider);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * BCrypt加密</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 记住我功能，持久化的token服务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PersistentTokenRepository <span class="title">persistentTokenRepository</span><span class="params">()</span></span>&#123;</span><br><span class="line">        JdbcTokenRepositoryImpl tokenRepository = <span class="keyword">new</span> JdbcTokenRepositoryImpl();</span><br><span class="line">        <span class="comment">//数据源设置</span></span><br><span class="line">        tokenRepository.setDataSource(dataSource);</span><br><span class="line">        <span class="comment">//启动的时候创建表，这里只执行一次，第二次就注释掉，否则每次启动都重新创建表</span></span><br><span class="line">        <span class="comment">/*tokenRepository.setCreateTableOnStartup(true);*/</span></span><br><span class="line">        <span class="keyword">return</span> tokenRepository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Spring Security配置文件中，我们只需要设置<strong>PerAccessDeniedHandler</strong>就可以了，还要记得在头部添加<strong>@EnableGlobalMethodSecurity(securedEnabled = true, prePostEnabled=true)注解，以启动spring security注解生效</strong></p><p>接下来就是前端页面和控制层：</p><h2 id="UserContorller-java"><a href="#UserContorller-java" class="headerlink" title="UserContorller.java"></a>UserContorller.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Copyright 2020. javaymw.com Studio All Right Reserved</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Create on 2020-06-05 22:01</span></span><br><span class="line"><span class="comment"> * Created by zhaoxinguo</span></span><br><span class="line"><span class="comment"> * Version 2.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.javaymw.demo.sys.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.security.access.prepost.PreAuthorize;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaoxinguo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/6/5 22:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录页面跳转</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login.html"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * index页跳转</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"index"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index.html"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * menu1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PreAuthorize</span>(<span class="string">"hasAuthority('menu1')"</span>)</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"menu1"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">menu1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"menu1"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * menu2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PreAuthorize</span>(<span class="string">"hasAuthority('menu2')"</span>)</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"menu2"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">menu2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"menu2"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * menu3</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PreAuthorize</span>(<span class="string">"hasAuthority('menu3')"</span>)</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"menu3"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">menu3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"menu3"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里要注意的是，<strong>每个需要权限判断的方法中，都需要增加@PreAuthorize(“hasAuthority(‘key’)”)注解，否则权限判断不生效</strong>，key对应数据库资源表中的资源标识字段</p><h2 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">index页<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"menu1Btn"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"sendAjax('/menu1')"</span>&gt;</span>菜单1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"menu2Btn"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"sendAjax('/menu2')"</span>&gt;</span>菜单2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"menu3Btn"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"sendAjax('/menu3')"</span>&gt;</span>菜单3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://libs.baidu.com/jquery/2.1.4/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    function sendAjax(url) &#123;</span><br><span class="line"></span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type: "GET",</span><br><span class="line">            url: url,</span><br><span class="line">            dataType: "text",</span><br><span class="line">            success: function (data) &#123;</span><br><span class="line">                console.log(data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里简单的说说数据库的数据</p><blockquote><p>用户表：admin、teacher和student <br><br>角色表：管理员、教师和学生 <br><br>资源表：menu1、menu2、menu3 </p></blockquote><blockquote><p>对应权限：<br>管理员：menu1、menu2、menu3 <br><br>教师：menu1、menu2 <br><br>学生：meun1</p></blockquote><p>下面我们看看效果，<strong>登录页：</strong></p><p><img src="https://i.loli.net/2020/06/07/2JMl9poz7PmiDC1.png" alt="Spring Boot2 _ Spring Security5 动态用户角色资源的权限管理_6_ -05.png"></p><p>index页：</p><p><img src="https://i.loli.net/2020/06/07/wYo9tPah1Jx4QSy.png" alt="Spring Boot2 _ Spring Security5 动态用户角色资源的权限管理_6_ -06.png"></p><p>这里我们先用<strong>admin管理员角色</strong>登录，然后<strong>点击所有菜单</strong>：</p><p>可以看到数据正常，并且已经访问到了所有资源菜单</p><p>然后我们用 <strong>teacher教师角色</strong> 登录，也是<strong>点击所有菜单</strong>：</p><p>会发现，在点击第三个菜单的时候，会返回没有权限访问</p><p><img src="https://i.loli.net/2020/06/07/Dz9q2RIr1CBEpkT.png" alt="Spring Boot2 _ Spring Security5 动态用户角色资源的权限管理_6_ -07.png"></p><p>我们再用 <strong>student学生角色</strong> 登录，也是<strong>点击所有菜单</strong>：</p><p><img src="https://i.loli.net/2020/06/07/UjnAYoHpL7OdFNu.png" alt="Spring Boot2 _ Spring Security5 动态用户角色资源的权限管理_6_ -08.png"></p><p>这里说明我们的动态权限资源管理都生效了</p><p>那么文章就介绍到这里，在这里留了个坑，一般系统是不会让用户去点击了菜单才发现没有权限访问，<strong>而是针对不同的用户，动态显示不同的菜单，这个内容小编下篇文章就会讲解</strong></p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>那么基本代码和效果也演示完毕了</p><p>源码获取方式加加入<strong>QQ交流群</strong>(<strong>715224124</strong>)，进群找群主要源码，如果有问题，可以提出疑问，群主会尽量帮助解决~</p><p>希望能帮助到大家，如果有不好或者错误的地方希望能多多提出，谢谢大家~</p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
          <category> Spring Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Spring Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot2 + Spring Security5 基于Redis的Spring Session管理(5)</title>
      <link href="/2020/06/07/Spring-Boot2-Spring-Security5-%E5%9F%BA%E4%BA%8ERedis%E7%9A%84Spring-Session%E7%AE%A1%E7%90%86-5-1/"/>
      <url>/2020/06/07/Spring-Boot2-Spring-Security5-%E5%9F%BA%E4%BA%8ERedis%E7%9A%84Spring-Session%E7%AE%A1%E7%90%86-5-1/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前面几篇文章介绍了如何在Spring Boot 引入Security，并实现自定义登录，以及记住我功能</p><p>那么这篇文章，是想讲述下关于<strong>Session在Spring Security的管理</strong>以及实现过程</p><h2 id="简单流程"><a href="#简单流程" class="headerlink" title="简单流程"></a>简单流程</h2><p>在<strong>传统Web应用</strong>中，一般都是是使用tomcat、weblogic、jboss等Web容器去部署应用，然后每个Web项目部署在对应一个或多个Tomcat(很少会这样)中，每个Web项目是相互独立的，每个项目都会拥有<strong>自己的Session</strong>，并且是<strong>相互独立</strong>的，传统部署方案如图：</p><p><img src="https://i.loli.net/2020/06/06/xFLmwEMbhQ1pauo.png" alt="Spring Boot2 _ Spring Security5 基于Redis的Spring Session管理_5_ - 01.png"></p><p>假如说现在有这么个需求，就是说现在有三个项目A、B和C，如上图所示，那么现在如果我想<strong>登录了其中任意一个项目系统</strong>之后，接下来再进入其他项目系统的时候，可以<strong>不需要再次登录而直接进入</strong>，这就是单点登录</p><p>那么，目前来看，各个项目的Session都是独立的，要实现起来是非常复杂的。对此，为了解决这个问题，这里就需要让这<strong>三个项目都共享同一个Session</strong>，就可以完美解决，那么实现思路就是把<strong>Session存入中间件</strong>中，当需要认证的时候就从中间件中去取出判断，如图：</p><p><img src="https://i.loli.net/2020/06/06/erJq8sP3Ch6nTgB.png" alt="Spring Boot2 _ Spring Security5 基于Redis的Spring Session管理_5_ - 02.png"></p><p>中间件一般就是使用Redis/Memcache去存储Session，大致上是这么个流程<br>当然，Session存储在中间件上也是有很多其他好处，像服务器重启了Session也不会被销毁等等</p><p>那么，这里讲了那么多，目的是为了说明<strong>整合Spring Session与Redis的原因</strong>，那么下面开始展示代码</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>还是基于前面几篇文章的代码上，我们要引入了Spring Session和Redis依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Lettuce pool 连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里要说明下，Redis的连接方式一般分为<strong>Jedis 和Lettuce</strong> ，相信大家对Jedis会比较熟悉，不过在Spring Boot2.x之后，已经默认为Lettuce连接方式</p><p>Lettuce是基于Netty框架，通过异步方式可以更好的节省系统资源，<strong>并且能在多个线程间并发访问</strong>，满足了多线程环境要求，这也是让博主转向了Lettuce的原因</p><p>yml配置如下：</p><h2 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">  jpa:</span></span><br><span class="line"><span class="attr">    database:</span> <span class="string">MYSQL</span></span><br><span class="line"><span class="attr">    show-sql:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    hibernate:</span></span><br><span class="line"><span class="attr">      ddl-auto:</span> <span class="string">update</span></span><br><span class="line"><span class="attr">    database-platform:</span> <span class="string">org.hibernate.dialect.MySQL5InnoDBDialect</span></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    database:</span> <span class="number">0</span> <span class="comment">#索引</span></span><br><span class="line"><span class="attr">    host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">6379</span></span><br><span class="line"><span class="attr">    password:</span>  <span class="comment">#修改成对应自己的redis密码</span></span><br><span class="line"><span class="attr">    lettuce:</span></span><br><span class="line"><span class="attr">      pool:</span></span><br><span class="line"><span class="attr">        max-active:</span> <span class="number">8</span> <span class="comment">#最大连接数</span></span><br><span class="line"><span class="attr">        max-idle:</span> <span class="number">8</span> <span class="comment">#最大空闲连接</span></span><br><span class="line"><span class="attr">        min-idle:</span> <span class="number">0</span> <span class="comment">#最小空闲连接</span></span><br></pre></td></tr></table></figure><p>这里只是新增了redis的基础信息配置</p><p>接下来看看Spring Session配置类：</p><h2 id="SessionConfig-java"><a href="#SessionConfig-java" class="headerlink" title="SessionConfig.java"></a>SessionConfig.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Copyright 2020. javaymw.com Studio All Right Reserved</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Create on 2020-06-06 15:03</span></span><br><span class="line"><span class="comment"> * Created by zhaoxinguo</span></span><br><span class="line"><span class="comment"> * Version 2.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.javaymw.demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.session.data.redis.config.annotation.web.http.EnableRedisHttpSession;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Spring Session配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaoxinguo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/6/6 15:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableRedisHttpSession</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对的，你没看错，只要<strong>加上@EnableRedisHttpSession</strong>注解就默认开启了Spring Session</p><p>然后就是Redis的配置类：</p><h2 id="RedisConfig-java"><a href="#RedisConfig-java" class="headerlink" title="RedisConfig.java"></a>RedisConfig.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Copyright 2020. javaymw.com Studio All Right Reserved</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Create on 2020-06-06 15:05</span></span><br><span class="line"><span class="comment"> * Created by zhaoxinguo</span></span><br><span class="line"><span class="comment"> * Version 2.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.javaymw.demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.support.spring.FastJsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.EnableCaching;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Redis的配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaoxinguo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/6/6 15:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span> <span class="comment">//缓存启动注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//redis连接工厂</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> LettuceConnectionFactory lettuceConnectionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置自定义redisTemplate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(lettuceConnectionFactory);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用FastJsonRedisSerializer序列化和反序列化redis的key、value值</span></span><br><span class="line">        template.setValueSerializer(fastJsonRedisSerializer());</span><br><span class="line">        template.setKeySerializer(fastJsonRedisSerializer());</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * fastjson序列化Bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FastJsonRedisSerializer&lt;?&gt; fastJsonRedisSerializer() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FastJsonRedisSerializer&lt;&gt;(Object.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里，实现的代码已经演示完毕了，是不是非常简洁。因为这里<strong>Spring Security都已经帮我们实现好了session存入redis</strong>中，我们只要配置下就可以用了</p><p>启动项目前要<strong>先启动redis服务</strong>，我们看看效果</p><p><img src="https://i.loli.net/2020/06/06/VqG1hbIkznf8tYi.png" alt="Spring Boot2 _ Spring Security5 基于Redis的Spring Session管理_5_ - 03.png"></p><p>当我点击登录并成功登录后，看看redis：</p><p><img src="https://i.loli.net/2020/06/06/Am8uvcSHr9xLCWU.png" alt="Spring Boot2 _ Spring Security5 基于Redis的Spring Session管理_5_ - 04.png"></p><p>可有清楚的看到，redis已经存储了session相关信息</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>那么基本代码和效果也演示完毕了</p><p>源码获取方式加加入<strong>QQ交流群</strong>(<strong>715224124</strong>)，进群找群主要源码，如果有问题，可以提出疑问，群主会尽量帮助解决~</p><p>希望能帮助到大家，如果有不好或者错误的地方希望能多多提出，谢谢大家~</p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
          <category> Spring Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Spring Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot2 + Spring Security5 记住我功能(4)</title>
      <link href="/2020/06/07/Spring-Boot2-Spring-Security5-%E8%AE%B0%E4%BD%8F%E6%88%91%E5%8A%9F%E8%83%BD-4/"/>
      <url>/2020/06/07/Spring-Boot2-Spring-Security5-%E8%AE%B0%E4%BD%8F%E6%88%91%E5%8A%9F%E8%83%BD-4/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上篇文章介绍了Spring Boot Security配置了自定义登录<br>本篇文章，博主会介绍实现记住我功能</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>Spring Security记住我功能，其实就是就是当用户勾选了”记住我”然后成功认证登录了，那在有效时间内免登录直接进入<br>那么，Spring Security实现记住我的方式有两种：</p><ul><li>1.本地存储(cookie)</li><li>2.持久化存储</li></ul><p>这里博主简单的说下流程，当Spring Security用户登录成功的时候，它会生成<strong>授权信息(token)</strong><br>然后方法一的话，Spring Security会把<strong>token传输到用户本地浏览器cookie里面存储起来</strong><br>方法二的话就是把<strong>token存入数据库</strong>中，那么相信大家也就清楚了</p><p>像token这种敏感的数据，是不建议暴露用户那边的，因为这样很容易会被中间人劫持，又或者被伪造请求(CSRF)，所以博主是建议使用第二种办法</p><p>那么下面开始展示实现代码，，我们继上篇的代码，在Spring Security配置类上添加持久化配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Copyright 2020. javaymw.com Studio All Right Reserved</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Create on 2020-06-05 21:58</span></span><br><span class="line"><span class="comment"> * Created by zhaoxinguo</span></span><br><span class="line"><span class="comment"> * Version 2.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.javaymw.demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.javaymw.demo.core.LoginValidateAuthenticationProvider;</span><br><span class="line"><span class="keyword">import</span> com.javaymw.demo.core.handler.LoginFailureHandler;</span><br><span class="line"><span class="keyword">import</span> com.javaymw.demo.core.handler.LoginSuccessHandler;</span><br><span class="line"><span class="keyword">import</span> com.javaymw.demo.sys.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Spring Security 核心配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaoxinguo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/6/5 21:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity</span>(securedEnabled = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据源</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户业务层</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义认证</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> LoginValidateAuthenticationProvider loginValidateAuthenticationProvider;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//登录成功handler</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> LoginSuccessHandler loginSuccessHandler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//登录失败handler</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> LoginFailureHandler loginFailureHandler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 权限核心配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> http</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//基础设置</span></span><br><span class="line">        http.httpBasic()<span class="comment">//配置HTTP基本身份验证</span></span><br><span class="line">                .and()</span><br><span class="line">                    .authorizeRequests()</span><br><span class="line">                    .anyRequest().authenticated()<span class="comment">//所有请求都需要认证</span></span><br><span class="line">                .and()</span><br><span class="line">                    .formLogin() <span class="comment">//登录表单</span></span><br><span class="line">                    .loginPage(<span class="string">"/login"</span>)<span class="comment">//登录页面url</span></span><br><span class="line">                    .loginProcessingUrl(<span class="string">"/login"</span>)<span class="comment">//登录验证url</span></span><br><span class="line">                    .defaultSuccessUrl(<span class="string">"/index"</span>)<span class="comment">//成功登录跳转</span></span><br><span class="line">                    .successHandler(loginSuccessHandler)<span class="comment">//成功登录处理器</span></span><br><span class="line">                    .failureHandler(loginFailureHandler)<span class="comment">//失败登录处理器</span></span><br><span class="line">                    .permitAll()<span class="comment">//登录成功后有权限访问所有页面</span></span><br><span class="line">                .and()</span><br><span class="line">                    .rememberMe()<span class="comment">//记住我功能</span></span><br><span class="line">                    .userDetailsService(userService)<span class="comment">//设置用户业务</span></span><br><span class="line">                    .tokenRepository(persistentTokenRepository())<span class="comment">//设置持久化token</span></span><br><span class="line">                    .tokenValiditySeconds(<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>);<span class="comment">//记住登录1天(24小时 *60分钟 * 60秒)</span></span><br><span class="line">        <span class="comment">//关闭csrf跨域攻击防御</span></span><br><span class="line">        http.csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//这里要设置自定义认证</span></span><br><span class="line">        auth.authenticationProvider(loginValidateAuthenticationProvider);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * BCrypt加密</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 记住我功能，持久化的token服务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PersistentTokenRepository <span class="title">persistentTokenRepository</span><span class="params">()</span></span>&#123;</span><br><span class="line">        JdbcTokenRepositoryImpl tokenRepository = <span class="keyword">new</span> JdbcTokenRepositoryImpl();</span><br><span class="line">        <span class="comment">//数据源设置</span></span><br><span class="line">        tokenRepository.setDataSource(dataSource);</span><br><span class="line">        <span class="comment">//启动的时候创建表，这里只执行一次，第二次就注释掉，否则每次启动都重新创建表</span></span><br><span class="line">        tokenRepository.setCreateTableOnStartup(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> tokenRepository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，要想存储到数据库种，那是需要创建数据库表存储，这里通过tokenRepository.setCreateTableOnStartup(true)方法就可以让<strong>Spring Security自动创建数据库表，不过记得下次启动的时候一定要注释起来</strong></p><p>其次就是在权限核心配置方法中追加了.rememberMe()的一系列配置。</p><p>接下来，在前端登录页面上，需要新添加一个复选框，然后加上属性name=”remember-me”即可记住我</p><h2 id="login-html"><a href="#login-html" class="headerlink" title="login.html"></a>login.html</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"remember-me"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>登录页<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"loginForm"</span> <span class="attr">action</span>=<span class="string">"/login"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    密&amp;nbsp;&amp;nbsp;&amp;nbsp;码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"remember-me"</span>/&gt;</span>记住我<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"loginBtn"</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://libs.baidu.com/jquery/2.1.4/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">    $("#loginBtn").click(function () &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type: "POST",</span><br><span class="line">            url: "/login",</span><br><span class="line">            data: $("#loginForm").serialize(),</span><br><span class="line">            dataType: "JSON",</span><br><span class="line">            success: function (data) &#123;</span><br><span class="line">                console.log(data);</span><br><span class="line">                //window.location.href = "/index";</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>开始启动程序，之后打开数据库会发现自动创建了存储token的persistent_logins表：</p><p><img src="https://i.loli.net/2020/06/06/KCYk9TqdUDSJpRs.png" alt="Spring Boot2 _ Spring Security5 记住我功能_4_-01.png"></p><p>然后再看看登录效果：</p><p><img src="https://i.loli.net/2020/06/06/7XtgsY5OZR4NUWp.png" alt="Spring Boot2 _ Spring Security5 记住我功能_4_ -02.png"></p><p>当我点击登录并登录成功后，persistent_logins表就多了条信息：</p><p><img src="https://i.loli.net/2020/06/06/CqtkOg3njSK7dEv.png" alt="Spring Boot2 _ Spring Security5 记住我功能_4_-04.png"></p><p>那么基本代码和效果也演示完毕了</p><p>源码获取方式加加入<strong>QQ交流群</strong>(<strong>715224124</strong>)，进群找群主要源码，如果有问题，可以提出疑问，群主会尽量帮助解决~</p><p>希望能帮助到大家，如果有不好或者错误的地方希望能多多提出，谢谢大家~</p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
          <category> Spring Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Spring Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot2 + Spring Security5 自定义登录验证(3)</title>
      <link href="/2020/06/07/Spring-Boot2-Spring-Security5-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81-3/"/>
      <url>/2020/06/07/Spring-Boot2-Spring-Security5-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81-3/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上篇文章介绍了如何在Spring Boot引入Security</p><p>接下来，博主会简单的介绍下如何自定义登录配置</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>首先，我们要有数据库的用户表，这里我用的是mysql5.6<br>表结构如下：</p><p><img src="https://i.loli.net/2020/06/05/uHVBACXeDOIfm24.png" alt="Spring Boot2 _ Spring Security5 自定义登录验证_3_ - 01.png"></p><p>字段的话就不详细介绍了，相信看名字就能懂</p><p>整体demo结构如图：</p><p><img src="https://i.loli.net/2020/06/05/VeZBbWAnKGY8cgF.png" alt="Spring Boot2 _ Spring Security5 自定义登录验证_3_ - 02.png"></p><p>虽然说是demo，但是本着严格务实的态度，也是遵守MVC的调用流程，所以包可能会有点繁琐</p><p>这里简单的说下这个<strong>登录验证的流程</strong>，以便大家更好的理解下面的代码，先看图：</p><p><img src="https://i.loli.net/2020/06/05/seWCXnlaxqMoYi2.png" alt="Spring Boot2 _ Spring Security5 自定义登录验证_3_ - 03.png"></p><p><strong>绿色背景色为自定义实现</strong>的，也就是下面会出现的类方法<br>对于中间件那块来说是暂时没有的，可以不管先，后面的文章会引入，到时候再作介绍</p><p>当然，Spring Security认证的流程是没有那么简单的，这里只是给大家方便理解才简化了很多流程</p><p>下面开始展示代码</p><p>由于需要操作数据库，以及展示页面等，小编这里就需要引入持久层以及前端页面一些框架<br>这里博主用的是<strong>Spring Data Jpa</strong>，前端用的是<strong>Thymeleaf</strong>，Maven代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.javaymw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.58<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加完相关的依赖，还是到项目的根目录下，执行maven的编译命令，把相关的jar下载下来：mvn clean compile</p><p>yml的配置不需要多大的修改，这次只是配置了数据源和jpa的一些基础属性，代码如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  tomcat:</span></span><br><span class="line"><span class="attr">  uri-encoding:</span> <span class="string">UTF-8</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">  jpa:</span></span><br><span class="line"><span class="attr">    database:</span> <span class="string">MYSQL</span></span><br><span class="line"><span class="attr">    show-sql:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    hibernate:</span></span><br><span class="line"><span class="attr">      ddl-auto:</span> <span class="string">update</span></span><br><span class="line"><span class="attr">    database-platform:</span> <span class="string">org.hibernate.dialect.MySQL5InnoDBDialect</span></span><br></pre></td></tr></table></figure><p>这里要注意的是，当引入的mysql-connector-java版本是6.0以上的话，那驱动就是：</p><blockquote><p>com.mysql.cj.jdbc.Driver</p></blockquote><p>中间是多个cj的<br>还有就是在数据源url后面要加上serverTimezone=UTC这条参数，否则也是会报错的</p><blockquote><p>jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</p></blockquote><p>接下来就是编写<strong>spring security的配置类：</strong></p><h2 id="SecurityConfig-java"><a href="#SecurityConfig-java" class="headerlink" title="SecurityConfig .java"></a>SecurityConfig .java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Copyright 2020. javaymw.com Studio All Right Reserved</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Create on 2020-06-05 21:58</span></span><br><span class="line"><span class="comment"> * Created by zhaoxinguo</span></span><br><span class="line"><span class="comment"> * Version 2.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.javaymw.demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.javaymw.demo.core.LoginValidateAuthenticationProvider;</span><br><span class="line"><span class="keyword">import</span> com.javaymw.demo.core.handler.LoginFailureHandler;</span><br><span class="line"><span class="keyword">import</span> com.javaymw.demo.core.handler.LoginSuccessHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Spring Security 核心配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaoxinguo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/6/5 21:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义认证</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> LoginValidateAuthenticationProvider loginValidateAuthenticationProvider;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//登录成功handler</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> LoginSuccessHandler loginSuccessHandler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//登录失败handler</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> LoginFailureHandler loginFailureHandler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 权限核心配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> http</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//基础设置</span></span><br><span class="line">        http.httpBasic()<span class="comment">//配置HTTP基本身份验证</span></span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .anyRequest().authenticated()<span class="comment">//所有请求都需要认证</span></span><br><span class="line">                .and()</span><br><span class="line">                .formLogin() <span class="comment">//登录表单</span></span><br><span class="line">                .loginPage(<span class="string">"/login"</span>)<span class="comment">//登录页面url</span></span><br><span class="line">                .loginProcessingUrl(<span class="string">"/login"</span>)<span class="comment">//登录验证url</span></span><br><span class="line">                .defaultSuccessUrl(<span class="string">"/index"</span>)<span class="comment">//成功登录跳转</span></span><br><span class="line">                .successHandler(loginSuccessHandler)<span class="comment">//成功登录处理器</span></span><br><span class="line">                .failureHandler(loginFailureHandler)<span class="comment">//失败登录处理器</span></span><br><span class="line">                .permitAll();<span class="comment">//登录成功后有权限访问所有页面</span></span><br><span class="line">        <span class="comment">//关闭csrf跨域攻击防御</span></span><br><span class="line">        http.csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//这里要设置自定义认证</span></span><br><span class="line">        auth.authenticationProvider(loginValidateAuthenticationProvider);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * BCrypt加密</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，Spring Security配置类<strong>必须继承WebSecurityConfigurerAdapter</strong>类才会生效</p><p>这里BCrypt加密方式是官方推荐使用的，还有就是<strong>Spring Security5.x是不需要配置加密方式</strong>的，因为它可以匹配多种加密方式以用来解密，只需要在密码前面加上加密方式即可，格式如下：</p><blockquote><p>{加密方式}密文</p></blockquote><p>例如：</p><ul><li>{MD5}e10adc3949ba59abbe56e057f20f883e</li><li>{bcrypt}$2a101010bOZ5qFQS4OojeLUdb6K8.OU/KrVR8vzdo7QaCNKNG4oaIYUrAGKJ2</li></ul><p>这样就可以实现兼容多个加密方式，可以说是挺人性化的，不过我这里还是规定死了哈哈哈哈</p><p>然后就是编写User实体类和UserService实现类：</p><h2 id="User-java"><a href="#User-java" class="headerlink" title="User.java"></a>User.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Copyright 2020. javaymw.com Studio All Right Reserved</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Create on 2020-06-05 22:01</span></span><br><span class="line"><span class="comment"> * Created by zhaoxinguo</span></span><br><span class="line"><span class="comment"> * Version 2.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.javaymw.demo.sys.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaoxinguo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/6/5 22:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"sys_user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">UserDetails</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//id</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">protected</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户名</span></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//密码</span></span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否锁定</span></span><br><span class="line"><span class="comment">     * true: 未锁定</span></span><br><span class="line"><span class="comment">     * false: 锁定</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> lockedFlag;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//security存储权限认证用的</span></span><br><span class="line">    <span class="meta">@Transient</span></span><br><span class="line">    <span class="keyword">private</span> Collection&lt;? extends GrantedAuthority&gt; authorities;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="keyword">return</span> authorities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户账号是否过期</span></span><br><span class="line"><span class="comment">     * true: 未过期</span></span><br><span class="line"><span class="comment">     * false: 已过期</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户账号是否被锁定</span></span><br><span class="line"><span class="comment">     * true: 未锁定</span></span><br><span class="line"><span class="comment">     * false: 锁定</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lockedFlag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户账号凭证(密码)是否过期</span></span><br><span class="line"><span class="comment">     * 简单的说就是可能会因为修改了密码导致凭证过期这样的场景</span></span><br><span class="line"><span class="comment">     * true: 过期</span></span><br><span class="line"><span class="comment">     * false: 无效</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户账号是否被启用</span></span><br><span class="line"><span class="comment">     * true: 启用</span></span><br><span class="line"><span class="comment">     * false: 未启用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLockedFlag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lockedFlag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLockedFlag</span><span class="params">(<span class="keyword">boolean</span> lockedFlag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lockedFlag = lockedFlag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthorities</span><span class="params">(Collection&lt;? extends GrantedAuthority&gt; authorities)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.authorities = authorities;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里要说明下，UserDetails是Spring Security提供的一个保存用户账号信息的接口，详情请看代码注释，因为有些地方是没有用到的，所以就写死了很多属性，大家可根据实际需求来修改使用</p><h2 id="UserService-java"><a href="#UserService-java" class="headerlink" title="UserService.java"></a>UserService.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Copyright 2020. javaymw.com Studio All Right Reserved</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Create on 2020-06-05 22:04</span></span><br><span class="line"><span class="comment"> * Created by zhaoxinguo</span></span><br><span class="line"><span class="comment"> * Version 2.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.javaymw.demo.sys.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.javaymw.demo.sys.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.javaymw.demo.sys.repository.UserRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaoxinguo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/6/5 22:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        User user = userRepository.findUserByUsername(username);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"不存在该用户!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同理 UserDetailsService 也是是spring security提供的，这里实现了加载用户名称的方法，目的是为了获取用户信息，以便接下来的认证</p><h2 id="UserRepository-java"><a href="#UserRepository-java" class="headerlink" title="UserRepository .java"></a>UserRepository .java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Copyright 2020. javaymw.com Studio All Right Reserved</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Create on 2020-06-05 22:03</span></span><br><span class="line"><span class="comment"> * Created by zhaoxinguo</span></span><br><span class="line"><span class="comment"> * Version 2.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.javaymw.demo.sys.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.javaymw.demo.sys.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaoxinguo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/6/5 22:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">findUserByUsername</span><span class="params">(String username)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个相信不用多说了吧</p><p>下面就是自定义认证的核心代码：</p><h2 id="LoginValidateAuthenticationProvider-java"><a href="#LoginValidateAuthenticationProvider-java" class="headerlink" title="LoginValidateAuthenticationProvider.java"></a>LoginValidateAuthenticationProvider.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Copyright 2020. javaymw.com Studio All Right Reserved</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Create on 2020-06-05 21:59</span></span><br><span class="line"><span class="comment"> * Created by zhaoxinguo</span></span><br><span class="line"><span class="comment"> * Version 2.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.javaymw.demo.core;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.javaymw.demo.sys.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.javaymw.demo.sys.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 自定义认证核心类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaoxinguo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/6/5 21:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginValidateAuthenticationProvider</span> <span class="keyword">implements</span> <span class="title">AuthenticationProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解密用的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 进行身份验证</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authentication</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AuthenticationException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">authenticate</span><span class="params">(Authentication authentication)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="comment">//获取输入的用户名</span></span><br><span class="line">        String username = authentication.getName();</span><br><span class="line">        <span class="comment">//获取输入的明文</span></span><br><span class="line">        String rawPassword = (String) authentication.getCredentials();</span><br><span class="line">        <span class="comment">//查询用户是否存在</span></span><br><span class="line">        User user = (User) userService.loadUserByUsername(username);</span><br><span class="line">        <span class="keyword">if</span> (!user.isEnabled()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> DisabledException(<span class="string">"该账户已被禁用，请联系管理员"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!user.isAccountNonLocked()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LockedException(<span class="string">"该账号已被锁定"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!user.isAccountNonExpired()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AccountExpiredException(<span class="string">"该账号已过期，请联系管理员"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!user.isCredentialsNonExpired()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> CredentialsExpiredException(<span class="string">"该账户的登录凭证已过期，请重新登录"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//验证密码</span></span><br><span class="line">        <span class="keyword">if</span> (!passwordEncoder.matches(rawPassword, user.getPassword())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(<span class="string">"输入密码错误!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UsernamePasswordAuthenticationToken(user, rawPassword, user.getAuthorities());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; authentication)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//确保authentication能转成该类</span></span><br><span class="line">        <span class="keyword">return</span> authentication.equals(UsernamePasswordAuthenticationToken.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里通过实现AuthenticationProvider 认证授权类，以达到自定义登录的效果，注意，这里是结合了之前实现的loadUserByUsername方法去获取用户信息，以及用户状态去判断登录是否能通过</p><p>接下来就是handler代码：</p><h2 id="LoginSuccessHandler-java"><a href="#LoginSuccessHandler-java" class="headerlink" title="LoginSuccessHandler.java"></a>LoginSuccessHandler.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Copyright 2020. javaymw.com Studio All Right Reserved</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Create on 2020-06-05 22:01</span></span><br><span class="line"><span class="comment"> * Created by zhaoxinguo</span></span><br><span class="line"><span class="comment"> * Version 2.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.javaymw.demo.core.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 登陆成功处理handler</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaoxinguo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/6/5 22:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginSuccessHandler</span> <span class="keyword">extends</span> <span class="title">SavedRequestAwareAuthenticationSuccessHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//登录成功返回</span></span><br><span class="line">        Map&lt;String, Object&gt; paramMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">        paramMap.put(<span class="string">"code"</span>, <span class="string">"200"</span>);</span><br><span class="line">        paramMap.put(<span class="string">"message"</span>, <span class="string">"登录成功!"</span>);</span><br><span class="line">        <span class="comment">//设置返回请求头</span></span><br><span class="line">        response.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">        <span class="comment">//写出流</span></span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        out.write(JSONObject.toJSONString(paramMap));</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LoginFailureHandler-java"><a href="#LoginFailureHandler-java" class="headerlink" title="LoginFailureHandler.java"></a>LoginFailureHandler.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Copyright 2020. javaymw.com Studio All Right Reserved</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Create on 2020-06-05 22:00</span></span><br><span class="line"><span class="comment"> * Created by zhaoxinguo</span></span><br><span class="line"><span class="comment"> * Version 2.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.javaymw.demo.core.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 登录失败处理handler</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaoxinguo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/6/5 22:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFailureHandler</span> <span class="keyword">extends</span> <span class="title">SimpleUrlAuthenticationFailureHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationFailure</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">//登录失败信息返回</span></span><br><span class="line">        Map&lt;String, Object&gt; paramMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">        paramMap.put(<span class="string">"code"</span>, <span class="string">"500"</span>);</span><br><span class="line">        paramMap.put(<span class="string">"message"</span>, exception.getMessage());</span><br><span class="line">        <span class="comment">//设置返回请求头</span></span><br><span class="line">        response.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">        <span class="comment">//写出流</span></span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        out.write(JSONObject.toJSONString(paramMap));</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么到这里，也已经差不多了，现在还差的是登录的前端页面和一些效果</p><h2 id="login-html"><a href="#login-html" class="headerlink" title="login.html"></a>login.html</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>登录页<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"loginForm"</span> <span class="attr">action</span>=<span class="string">"/login"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    密&amp;nbsp;&amp;nbsp;&amp;nbsp;码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"loginBtn"</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://libs.baidu.com/jquery/2.1.4/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">    $("#loginBtn").click(function () &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type: "POST",</span><br><span class="line">            url: "/login",</span><br><span class="line">            data: $("#loginForm").serialize(),</span><br><span class="line">            dataType: "JSON",</span><br><span class="line">            success: function (data) &#123;</span><br><span class="line">                console.log(data);</span><br><span class="line">                //window.location.href = "/index";</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里为了方便演示，就直接在前端输出登录信息，下面看看演示图：</p><p><img src="https://i.loli.net/2020/06/05/kDOUo3FWqwRhB6g.png" alt="Spring Boot2 _ Spring Security5 自定义登录验证_3_ - 04.png"></p><p>这里我在数据库加了条登录数据，数据默认用户脚本如下，用户名、密码（admin/123456)：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`test`</span>.<span class="string">`sys_user`</span> (<span class="string">`id`</span>, <span class="string">`locked_flag`</span>, <span class="string">`password`</span>, <span class="string">`username`</span>) <span class="keyword">VALUES</span> (<span class="string">'1'</span>, b<span class="string">'1'</span>, <span class="string">'$2a$10$UNVzCpRC3ND2XrCu8rZWJ.OkAzpyP651itODJiKTMOpqLMWrTLcEi'</span>, <span class="string">'admin'</span>);</span><br></pre></td></tr></table></figure><p>这里我在数据库加了条登录数据，当填正确账号点击登录的时候，显示是成功的</p><p><img src="https://i.loli.net/2020/06/05/NdBVFa6zeA2iRJx.png" alt="Spring Boot2 _ Spring Security5 自定义登录验证_3_ - 05.png"></p><p>随便输入个错误的密码则是：</p><p><img src="https://i.loli.net/2020/06/05/fWCdwnvEbt7XoKg.png" alt="Spring Boot2 _ Spring Security5 自定义登录验证_3_ - 06.png"></p><p>输入个不存在的用户名则是：</p><p><img src="https://i.loli.net/2020/06/05/718nW5DXAxGftHe.png" alt="Spring Boot2 _ Spring Security5 自定义登录验证_3_ - 07.png"></p><p>修改用户状态为锁定则是：</p><p><img src="https://i.loli.net/2020/06/05/K1QAVHjgXtpU7zI.png" alt="Spring Boot2 _ Spring Security5 自定义登录验证_3_ - 08.png"></p><p>那么基本代码和效果也演示完毕了</p><p>源码获取方式加加入<strong>QQ交流群</strong>(<strong>715224124</strong>)，进群找群主要源码，如果有问题，可以提出疑问，群主会尽量帮助解决~</p><p>希望能帮助到大家，如果有不好或者错误的地方希望能多多提出，谢谢大家~</p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
          <category> Spring Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Spring Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot2 + Spring Security5 简单使用教程(2)</title>
      <link href="/2020/06/07/Spring-Boot2-Spring-Security5-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B-2/"/>
      <url>/2020/06/07/Spring-Boot2-Spring-Security5-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B-2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇文章博主给大家展示Spring Boot2 + Spring Security5的搭建<br>好的，废话不多说，进入主题</p><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><h3 id="首先我们登录Spring官方的创建demo的网址：https-start-spring-io"><a href="#首先我们登录Spring官方的创建demo的网址：https-start-spring-io" class="headerlink" title="首先我们登录Spring官方的创建demo的网址：https://start.spring.io/"></a>首先我们登录Spring官方的创建demo的网址：<a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a></h3><p><img src="https://i.loli.net/2020/06/05/x6N4EwdpCqgAY5B.png" alt="Spring Boot2 _ Spring Security5 简单使用教程_2_.01.png"></p><h3 id="选择对应的Spring-Boot版本，选择jdk版本，见下图，然后创建项目"><a href="#选择对应的Spring-Boot版本，选择jdk版本，见下图，然后创建项目" class="headerlink" title="选择对应的Spring Boot版本，选择jdk版本，见下图，然后创建项目"></a>选择对应的Spring Boot版本，选择jdk版本，见下图，然后创建项目</h3><p><img src="https://i.loli.net/2020/06/05/gYbPNsR46wWJCMO.png" alt="Spring Boot2 _ Spring Security5 简单使用教程_2_.02.png"></p><h3 id="创建好项目，复制到你的本地工程目录下，见下图，然后先编译一下，让项目依赖的jar下载到本地仓库"><a href="#创建好项目，复制到你的本地工程目录下，见下图，然后先编译一下，让项目依赖的jar下载到本地仓库" class="headerlink" title="创建好项目，复制到你的本地工程目录下，见下图，然后先编译一下，让项目依赖的jar下载到本地仓库"></a>创建好项目，复制到你的本地工程目录下，见下图，然后先编译一下，让项目依赖的jar下载到本地仓库</h3><p><img src="https://i.loli.net/2020/06/05/4MnhG3PNHzrFKS7.png" alt="Spring Boot2 _ Spring Security5 简单使用教程_2_.03.png"><br><img src="https://i.loli.net/2020/06/05/CVaW1qPSpFJdZrf.png" alt="Spring Boot2 _ Spring Security5 简单使用教程_2_.04.png"><br><img src="https://i.loli.net/2020/06/05/LOvu7qS1PlTM4oQ.png" alt="Spring Boot2 _ Spring Security5 简单使用教程_2_.05.png"></p><h3 id="编译成功后，导入项目到你的开发工具，我这里是IDEA（社区版）"><a href="#编译成功后，导入项目到你的开发工具，我这里是IDEA（社区版）" class="headerlink" title="编译成功后，导入项目到你的开发工具，我这里是IDEA（社区版）"></a>编译成功后，导入项目到你的开发工具，我这里是IDEA（社区版）</h3><h3 id="导入成功后，接下来就可以添加Spring-Security的依赖了："><a href="#导入成功后，接下来就可以添加Spring-Security的依赖了：" class="headerlink" title="导入成功后，接下来就可以添加Spring Security的依赖了："></a>导入成功后，接下来就可以添加Spring Security的依赖了：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加完Spring-Security的依赖后，需要在开发工具再编译项目下才能下载下Spring-Security对应的依赖jar"><a href="#添加完Spring-Security的依赖后，需要在开发工具再编译项目下才能下载下Spring-Security对应的依赖jar" class="headerlink" title="添加完Spring Security的依赖后，需要在开发工具再编译项目下才能下载下Spring Security对应的依赖jar"></a>添加完Spring Security的依赖后，需要在开发工具再编译项目下才能下载下Spring Security对应的依赖jar</h3><h3 id="添加完Spring-Security的依赖后，这个项目还启动不了，还需要添加下Spring-Boot的-Web模块才行"><a href="#添加完Spring-Security的依赖后，这个项目还启动不了，还需要添加下Spring-Boot的-Web模块才行" class="headerlink" title="添加完Spring Security的依赖后，这个项目还启动不了，还需要添加下Spring Boot的 Web模块才行"></a>添加完Spring Security的依赖后，这个项目还启动不了，还需要添加下Spring Boot的 Web模块才行</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加完Web模块的依赖，同样重复刚才的编译动作"><a href="#添加完Web模块的依赖，同样重复刚才的编译动作" class="headerlink" title="添加完Web模块的依赖，同样重复刚才的编译动作"></a>添加完Web模块的依赖，同样重复刚才的编译动作</h3><h3 id="然后就可以启动项目，启动成功后访问-http-127-0-0-1-8080"><a href="#然后就可以启动项目，启动成功后访问-http-127-0-0-1-8080" class="headerlink" title="然后就可以启动项目，启动成功后访问 http://127.0.0.1:8080"></a>然后就可以启动项目，启动成功后访问 <a href="http://127.0.0.1:8080" target="_blank" rel="noopener">http://127.0.0.1:8080</a></h3><p>就可以看到，security已经生效了，这里的登录页面是spring security自带的</p><p><img src="https://i.loli.net/2020/06/05/xPVnp1WtdaKAHUF.png" alt="Spring Boot2 _ Spring Security5 简单使用教程_2_.06.png"></p><h3 id="那么到这里，简单的引入security的工作已经完成了"><a href="#那么到这里，简单的引入security的工作已经完成了" class="headerlink" title="那么到这里，简单的引入security的工作已经完成了"></a>那么到这里，简单的引入security的工作已经完成了</h3><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>下篇文章内容是自定义登录页面的集成，谢谢大家~</p><p>源码获取方式加加入<strong>QQ交流群</strong>(<strong>715224124</strong>)，进群找群主要源码，如果有问题，可以提出疑问，群主会尽量帮助解决~</p><p>希望能帮助到大家，如果有不好或者错误的地方希望能多多提出，谢谢大家~</p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
          <category> Spring Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Spring Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot2 + Spring Security5 系列搭建教程开头篇(1)</title>
      <link href="/2020/06/07/Spring-Boot2-Spring-Security5-%E7%B3%BB%E5%88%97%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B%E5%BC%80%E5%A4%B4%E7%AF%87-1/"/>
      <url>/2020/06/07/Spring-Boot2-Spring-Security5-%E7%B3%BB%E5%88%97%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B%E5%BC%80%E5%A4%B4%E7%AF%87-1/</url>
      
        <content type="html"><![CDATA[<h2 id="随便说点"><a href="#随便说点" class="headerlink" title="随便说点"></a>随便说点</h2><p>因为公司项目重构的原因，博主需要搭建个Spring Boot全家桶框架，但是网上资料要不就是比较旧版本的，要不就是不完整的。所以博主在大量查阅官方各种英文文档，和一些相关教程，总结出一系列Spring Boot2 + Spring Security5的搭建以及简单入门</p><p>在这里，博主会写出搭建过程以及自己的一些理解，当然因为真正落地的程序是比较复杂的，所以博客上写下的都是简化版demo以便于理解。每一篇文章的链接如下：</p><ul><li><a href="https://javaymw.com/post/50" target="_blank" rel="noopener">1.Spring Boot2 + Spring Security5 系列搭建教程开头篇(1)</a></li><li><a href="https://javaymw.com/post/49" target="_blank" rel="noopener">2.Spring Boot2 + Spring Security5 简单使用教程(2)</a></li><li><a href="https://javaymw.com/post/51" target="_blank" rel="noopener">3.Spring Boot2 + Spring Security5 自定义登录验证(3)</a></li><li><a href="https://javaymw.com/post/52" target="_blank" rel="noopener">4.Spring Boot2 + Spring Security5 记住我功能(4)</a></li><li><a href="https://javaymw.com/post/53" target="_blank" rel="noopener">5.Spring Boot2 + Spring Security5 基于Redis的Spring Session管理(5)</a></li><li><a href="https://javaymw.com/post/54" target="_blank" rel="noopener">6.Spring Boot2 + Spring Security5 用户角色资源管理的权限管理(6)</a></li><li><a href="https://javaymw.com/post/55" target="_blank" rel="noopener">7.Spring Boot2 + Spring Security5 资源菜单按钮动态显示(7)</a></li><li>8.Spring Boot2 + Spring Security5 基于JWT实现的token认证方案(8)</li><li>9.Spring Boot2 + Spring Security5 基于JWT实现的token刷新方案(9)</li></ul><p>当然，博主也会把这个demo源码放出来给大家借鉴下</p><p>源码获取方式加加入<strong>QQ交流群(715224124)</strong>，进群下载即可，如果有问题，可以提出疑问，群主会尽量帮助解决~</p><p>希望能帮助到大家，如果有不好或者错误的地方希望能多多提出，谢谢大家~</p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
          <category> Spring Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Spring Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 3.x企业应用开发实战（高清版）.pdf、随书源码、下载</title>
      <link href="/2020/05/20/Spring-3-x%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%EF%BC%88%E9%AB%98%E6%B8%85%E7%89%88%EF%BC%89-pdf%E3%80%81%E9%9A%8F%E4%B9%A6%E6%BA%90%E7%A0%81%E3%80%81%E4%B8%8B%E8%BD%BD/"/>
      <url>/2020/05/20/Spring-3-x%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%EF%BC%88%E9%AB%98%E6%B8%85%E7%89%88%EF%BC%89-pdf%E3%80%81%E9%9A%8F%E4%B9%A6%E6%BA%90%E7%A0%81%E3%80%81%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h5 id="Spring-3-x企业应用开发实战（高清版）-pdf-随书源码"><a href="#Spring-3-x企业应用开发实战（高清版）-pdf-随书源码" class="headerlink" title="Spring 3.x企业应用开发实战（高清版）.pdf +随书源码"></a>Spring 3.x企业应用开发实战（高清版）.pdf +随书源码</h5><h6 id="一：Spring-3-x企业应用开发实战（高清版）-pdf"><a href="#一：Spring-3-x企业应用开发实战（高清版）-pdf" class="headerlink" title="一：Spring 3.x企业应用开发实战（高清版）.pdf"></a>一：Spring 3.x企业应用开发实战（高清版）.pdf</h6><p><img src="https://i.loli.net/2020/05/20/4otG9UalKFnwrCe.png" alt="Spring 3.x企业应用开发实战（高清版）-pdf.01.png"></p><h6 id="二：Spring-3-x企业应用开发实战（高清版）-章节介绍"><a href="#二：Spring-3-x企业应用开发实战（高清版）-章节介绍" class="headerlink" title="二：Spring 3.x企业应用开发实战（高清版）.章节介绍"></a>二：Spring 3.x企业应用开发实战（高清版）.章节介绍</h6><p><img src="https://i.loli.net/2020/05/20/b2yJgFN7MqYtQ6E.png" alt="Spring 3.x企业应用开发实战（高清版）-介绍.00.png"></p><h6 id="三：Spring-3-x企业应用开发实战（高清版）-随书源码"><a href="#三：Spring-3-x企业应用开发实战（高清版）-随书源码" class="headerlink" title="三：Spring 3.x企业应用开发实战（高清版）.随书源码"></a>三：Spring 3.x企业应用开发实战（高清版）.随书源码</h6><p><img src="https://i.loli.net/2020/05/20/r7I9TLVxQzobclu.png" alt="Spring 3.x企业应用开发实战（高清版）-随书源码.02.png"></p><h6 id="四：文档和源码获取方式，扫码加入QQ交流群找群主获取"><a href="#四：文档和源码获取方式，扫码加入QQ交流群找群主获取" class="headerlink" title="四：文档和源码获取方式，扫码加入QQ交流群找群主获取"></a>四：文档和源码获取方式，扫码加入QQ交流群找群主获取</h6><p><img src="https://javaymw.com/dist/images/logo/qq_group.jpg" alt="qq_group.02.png"></p><h6 id="五：温馨提示，加入QQ群需要个鸡腿钱，大佬请绕道"><a href="#五：温馨提示，加入QQ群需要个鸡腿钱，大佬请绕道" class="headerlink" title="五：温馨提示，加入QQ群需要个鸡腿钱，大佬请绕道"></a>五：温馨提示，加入QQ群需要个鸡腿钱，大佬请绕道</h6>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java实现文件切片和合并</title>
      <link href="/2020/04/13/Java%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E5%88%87%E7%89%87%E5%92%8C%E5%90%88%E5%B9%B6/"/>
      <url>/2020/04/13/Java%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E5%88%87%E7%89%87%E5%92%8C%E5%90%88%E5%B9%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="Java实现文件切片和合并"><a href="#Java实现文件切片和合并" class="headerlink" title="Java实现文件切片和合并"></a>Java实现文件切片和合并</h3><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a><strong>摘要</strong></h3><p>日常工作中，会有对文件传输的需求，那么文件传输中，如果是小文件，可以一次性的传输过去，那么如果是比较大的文件呢，比如：十几MB的呢<br>如果一次性传输肯定很慢，并且还有带宽占用大、文件传输慢的问题，这里面我们就可以通过对文件切片后，分段传输，下面是具体的代码实现</p><h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Copyright 2020. javaymw.com Studio All Right Reserved</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Create on 04-13 11:08</span></span><br><span class="line"><span class="comment"> * Created by zhaoxinguo</span></span><br><span class="line"><span class="comment"> * Version 2.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> org.javaymw.base.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.RandomAccessFile;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Java实现文件切片和合并</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaoxinguo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/4/13 11:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileSplitUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件拆分</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getSplitFile</span><span class="params">(String file, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//预分配文件所占用的磁盘空间，在磁盘创建一个指定大小的文件，“r”表示只读，“rw”支持随机读写</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            RandomAccessFile raf = <span class="keyword">new</span> RandomAccessFile(<span class="keyword">new</span> File(file), <span class="string">"r"</span>);</span><br><span class="line">            <span class="comment">//计算文件大小</span></span><br><span class="line">            <span class="keyword">long</span> length = raf.length();</span><br><span class="line">            System.out.println(length);</span><br><span class="line">            <span class="comment">//计算文件切片后每一份文件的大小</span></span><br><span class="line">            <span class="keyword">long</span> maxSize = length / count;</span><br><span class="line">            System.out.println(maxSize);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//定义初始文件的偏移量(读取进度)</span></span><br><span class="line">            <span class="keyword">long</span> offset = <span class="number">0L</span>;</span><br><span class="line">            <span class="comment">//开始切割文件</span></span><br><span class="line">            <span class="comment">//count-1最后一份文件不处理</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count - <span class="number">1</span>; i++)&#123;</span><br><span class="line">                <span class="comment">//标记初始化</span></span><br><span class="line">                <span class="keyword">long</span> fbegin = offset;</span><br><span class="line">                <span class="comment">//分割第几份文件</span></span><br><span class="line">                <span class="keyword">long</span> fend = (i+<span class="number">1</span>) * maxSize;</span><br><span class="line">                <span class="comment">//写入文件</span></span><br><span class="line">                offset = getWrite(file, i, fbegin, fend);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//剩余部分文件写入到最后一份(如果不能平平均分配的时候)</span></span><br><span class="line">            <span class="keyword">if</span> (length - offset &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//写入文件</span></span><br><span class="line">                getWrite(file, count-<span class="number">1</span>, offset, length);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定文件每一份的边界，写入不同文件中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file 源文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 源文件的顺序标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> begin 开始指针的位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end 结束指针的位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> long</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getWrite</span><span class="params">(String file, <span class="keyword">int</span> index, <span class="keyword">long</span> begin, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> endPointer = <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//申明文件切割后的文件磁盘</span></span><br><span class="line">            RandomAccessFile in = <span class="keyword">new</span> RandomAccessFile(<span class="keyword">new</span> File(file), <span class="string">"r"</span>);</span><br><span class="line">            <span class="comment">//定义一个可读，可写的文件并且后缀名为.tmp的二进制文件</span></span><br><span class="line">            RandomAccessFile out = <span class="keyword">new</span> RandomAccessFile(<span class="keyword">new</span> File(file + <span class="string">"_"</span> + index + <span class="string">".tmp"</span>), <span class="string">"rw"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//申明具体每一文件的字节数组</span></span><br><span class="line">            <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//从指定位置读取文件字节流</span></span><br><span class="line">            in.seek(begin);</span><br><span class="line">            <span class="comment">//判断文件流读取的边界</span></span><br><span class="line">            <span class="keyword">while</span> (in.getFilePointer() &lt;= end &amp;&amp; (n = in.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//从指定每一份文件的范围，写入不同的文件</span></span><br><span class="line">                out.write(b, <span class="number">0</span>, n);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//定义当前读取文件的指针</span></span><br><span class="line">            endPointer = in.getFilePointer();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//关闭输入流</span></span><br><span class="line">            in.close();</span><br><span class="line">            <span class="comment">//关闭输出流</span></span><br><span class="line">            out.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> endPointer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件合并</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file 指定合并文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tempFile 分割前的文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tempCount 文件个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(String file, String tempFile, <span class="keyword">int</span> tempCount)</span> </span>&#123;</span><br><span class="line">        RandomAccessFile raf = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//申明随机读取文件RandomAccessFile</span></span><br><span class="line">            raf = <span class="keyword">new</span> RandomAccessFile(<span class="keyword">new</span> File(file), <span class="string">"rw"</span>);</span><br><span class="line">            <span class="comment">//开始合并文件，对应切片的二进制文件</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tempCount; i++) &#123;</span><br><span class="line">                <span class="comment">//读取切片文件</span></span><br><span class="line">                RandomAccessFile reader = <span class="keyword">new</span> RandomAccessFile(<span class="keyword">new</span> File(tempFile + <span class="string">"_"</span> + i + <span class="string">".tmp"</span>), <span class="string">"r"</span>);</span><br><span class="line">                <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> ((n = reader.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="comment">//一边读，一边写</span></span><br><span class="line">                    raf.write(b, <span class="number">0</span>, n);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                raf.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 第一步</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String file = <span class="string">"D:\\BaiduNetdiskDownload\\Beginning Spring Boot 2.pdf"</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">5</span>;</span><br><span class="line">        <span class="comment">//1.根据现有的文件编写文件编写文件切片工具类</span></span><br><span class="line">        <span class="comment">//2.写入到二进制临时文件</span></span><br><span class="line">        getSplitFile(file, count);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 第二步</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//3.根据实际的需求合并指定数量的文件</span></span><br><span class="line">        String mergeFile = <span class="string">"D:\\BaiduNetdiskDownload\\Beginning Spring Boot 2_temp.pdf"</span>;</span><br><span class="line">        merge(mergeFile, file, count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文件拆分"><a href="#文件拆分" class="headerlink" title="文件拆分"></a>文件拆分</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件拆分</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> count</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getSplitFile</span><span class="params">(String file, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//预分配文件所占用的磁盘空间，在磁盘创建一个指定大小的文件，“r”表示只读，“rw”支持随机读写</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        RandomAccessFile raf = <span class="keyword">new</span> RandomAccessFile(<span class="keyword">new</span> File(file), <span class="string">"r"</span>);</span><br><span class="line">        <span class="comment">//计算文件大小</span></span><br><span class="line">        <span class="keyword">long</span> length = raf.length();</span><br><span class="line">        System.out.println(length);</span><br><span class="line">        <span class="comment">//计算文件切片后每一份文件的大小</span></span><br><span class="line">        <span class="keyword">long</span> maxSize = length / count;</span><br><span class="line">        System.out.println(maxSize);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义初始文件的偏移量(读取进度)</span></span><br><span class="line">        <span class="keyword">long</span> offset = <span class="number">0L</span>;</span><br><span class="line">        <span class="comment">//开始切割文件</span></span><br><span class="line">        <span class="comment">//count-1最后一份文件不处理</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count - <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="comment">//标记初始化</span></span><br><span class="line">            <span class="keyword">long</span> fbegin = offset;</span><br><span class="line">            <span class="comment">//分割第几份文件</span></span><br><span class="line">            <span class="keyword">long</span> fend = (i+<span class="number">1</span>) * maxSize;</span><br><span class="line">            <span class="comment">//写入文件</span></span><br><span class="line">            offset = getWrite(file, i, fbegin, fend);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//剩余部分文件写入到最后一份(如果不能平平均分配的时候)</span></span><br><span class="line">        <span class="keyword">if</span> (length - offset &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//写入文件</span></span><br><span class="line">            getWrite(file, count-<span class="number">1</span>, offset, length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="指定文件每一份的边界，写入不同文件中"><a href="#指定文件每一份的边界，写入不同文件中" class="headerlink" title="指定文件每一份的边界，写入不同文件中"></a>指定文件每一份的边界，写入不同文件中</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 指定文件每一份的边界，写入不同文件中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> file 源文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index 源文件的顺序标识</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> begin 开始指针的位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> end 结束指针的位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> long</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getWrite</span><span class="params">(String file, <span class="keyword">int</span> index, <span class="keyword">long</span> begin, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> endPointer = <span class="number">0L</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//申明文件切割后的文件磁盘</span></span><br><span class="line">        RandomAccessFile in = <span class="keyword">new</span> RandomAccessFile(<span class="keyword">new</span> File(file), <span class="string">"r"</span>);</span><br><span class="line">        <span class="comment">//定义一个可读，可写的文件并且后缀名为.tmp的二进制文件</span></span><br><span class="line">        RandomAccessFile out = <span class="keyword">new</span> RandomAccessFile(<span class="keyword">new</span> File(file + <span class="string">"_"</span> + index + <span class="string">".tmp"</span>), <span class="string">"rw"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//申明具体每一文件的字节数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//从指定位置读取文件字节流</span></span><br><span class="line">        in.seek(begin);</span><br><span class="line">        <span class="comment">//判断文件流读取的边界</span></span><br><span class="line">        <span class="keyword">while</span> (in.getFilePointer() &lt;= end &amp;&amp; (n = in.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//从指定每一份文件的范围，写入不同的文件</span></span><br><span class="line">            out.write(b, <span class="number">0</span>, n);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义当前读取文件的指针</span></span><br><span class="line">        endPointer = in.getFilePointer();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭输入流</span></span><br><span class="line">        in.close();</span><br><span class="line">        <span class="comment">//关闭输出流</span></span><br><span class="line">        out.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> endPointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文件合并"><a href="#文件合并" class="headerlink" title="文件合并"></a>文件合并</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件合并</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> file 指定合并文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> tempFile 分割前的文件名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> tempCount 文件个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(String file, String tempFile, <span class="keyword">int</span> tempCount)</span> </span>&#123;</span><br><span class="line">    RandomAccessFile raf = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//申明随机读取文件RandomAccessFile</span></span><br><span class="line">        raf = <span class="keyword">new</span> RandomAccessFile(<span class="keyword">new</span> File(file), <span class="string">"rw"</span>);</span><br><span class="line">        <span class="comment">//开始合并文件，对应切片的二进制文件</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tempCount; i++) &#123;</span><br><span class="line">            <span class="comment">//读取切片文件</span></span><br><span class="line">            RandomAccessFile reader = <span class="keyword">new</span> RandomAccessFile(<span class="keyword">new</span> File(tempFile + <span class="string">"_"</span> + i + <span class="string">".tmp"</span>), <span class="string">"r"</span>);</span><br><span class="line">            <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((n = reader.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//一边读，一边写</span></span><br><span class="line">                raf.write(b, <span class="number">0</span>, n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            raf.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第一步</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String file = <span class="string">"D:\\BaiduNetdiskDownload\\Beginning Spring Boot 2.pdf"</span>;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">//1.根据现有的文件编写文件编写文件切片工具类</span></span><br><span class="line">    <span class="comment">//2.写入到二进制临时文件</span></span><br><span class="line">    getSplitFile(file, count);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第二步</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//3.根据实际的需求合并指定数量的文件</span></span><br><span class="line">    String mergeFile = <span class="string">"D:\\BaiduNetdiskDownload\\Beginning Spring Boot 2_temp.pdf"</span>;</span><br><span class="line">    merge(mergeFile, file, count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="https://i.loli.net/2020/04/13/z9nT6pJmVrW3f5P.png" alt="TIM截图20200413113100.png"></p>]]></content>
      
      
      <categories>
          
          <category> 文件处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Activiti 5.16 Spring 集成</title>
      <link href="/2020/04/09/Activiti-5-16-Spring-%E9%9B%86%E6%88%90/"/>
      <url>/2020/04/09/Activiti-5-16-Spring-%E9%9B%86%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h3 id="Chapter-5-Spring-集成"><a href="#Chapter-5-Spring-集成" class="headerlink" title="Chapter 5. Spring 集成"></a>Chapter 5. Spring 集成</h3><p>虽然没有Spring你也可以使用Activiti，但是我们提供了一些非常不错的集成特性。这一章我们将介绍这些特性。</p><h4 id="ProcessEngineFactoryBean"><a href="#ProcessEngineFactoryBean" class="headerlink" title="ProcessEngineFactoryBean"></a>ProcessEngineFactoryBean</h4><p>可以把流程引擎（ProcessEngine）作为一个普通的Spring bean进行配置。 类 org.activiti.spring.ProcessEngineFactoryBean是集成的切入点。 这个bean需要一个流程引擎配置来创建流程引擎。这也意味着在文档的配置这一章的介绍属性的创建和配置对于Spring来说也是一样的。对于Spring集成的配置和流程引擎bean看起来像这样：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngineConfiguration"</span> <span class="attr">class</span>=<span class="string">"org.activiti.spring.SpringProcessEngineConfiguration"</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngine"</span> <span class="attr">class</span>=<span class="string">"org.activiti.spring.ProcessEngineFactoryBean"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"processEngineConfiguration"</span> <span class="attr">ref</span>=<span class="string">"processEngineConfiguration"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意现在使用的 processEngineConfiguration bean 是 org.activiti.spring.SpringProcessEngineConfiguration 类。</p><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><p>我们将会一步一步地解释在Spring examples中公布的 SpringTransactionIntegrationTest 下面是我们使用这个例子的Spring配置文件（你可以在SpringTransactionIntegrationTest-context.xml找到它）以下展示的部分包括数据源（dataSource）， 事务管理器（transactionManager），流程引擎（processEngine）和Activiti引擎服务。</p><p>当把数据源（DataSource）传递给 SpringProcessEngineConfiguration （使用”dataSource”属性）之后，Activiti内部使用了一个org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy代理来封装传递进来的数据源（DataSource）。 这样做是为了确保从数据源（DataSource）获取的SQL连接能够与Spring的事物结合在一起发挥得更出色。这意味它不再需要在你的Spring配置中代理数据源（dataSource）了。 然而它仍然允许你传递一个TransactionAwareDataSourceProxy到SpringProcessEngineConfiguration中。在这个例子中并不会发生多余的包装。</p><p><strong>为了确保在你的Spring配置中申明的一个TransactionAwareDataSourceProxy，你不能把使用它的应用交给Spring事物控制的资源。（例如 DataSourceTransactionManager 和JPATransactionManager需要非代理的数据源 ）</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/tx      http://www.springframework.org/schema/tx/spring-tx-3.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.SimpleDriverDataSource"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"org.h2.Driver"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:h2:mem:activiti;DB_CLOSE_DELAY=1000"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"sa"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngineConfiguration"</span> <span class="attr">class</span>=<span class="string">"org.activiti.spring.SpringProcessEngineConfiguration"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span> <span class="attr">ref</span>=<span class="string">"transactionManager"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"databaseSchemaUpdate"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jobExecutorActivate"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngine"</span> <span class="attr">class</span>=<span class="string">"org.activiti.spring.ProcessEngineFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"processEngineConfiguration"</span> <span class="attr">ref</span>=<span class="string">"processEngineConfiguration"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"repositoryService"</span> <span class="attr">factory-bean</span>=<span class="string">"processEngine"</span> <span class="attr">factory-method</span>=<span class="string">"getRepositoryService"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"runtimeService"</span> <span class="attr">factory-bean</span>=<span class="string">"processEngine"</span> <span class="attr">factory-method</span>=<span class="string">"getRuntimeService"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"taskService"</span> <span class="attr">factory-bean</span>=<span class="string">"processEngine"</span> <span class="attr">factory-method</span>=<span class="string">"getTaskService"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"historyService"</span> <span class="attr">factory-bean</span>=<span class="string">"processEngine"</span> <span class="attr">factory-method</span>=<span class="string">"getHistoryService"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"managementService"</span> <span class="attr">factory-bean</span>=<span class="string">"processEngine"</span> <span class="attr">factory-method</span>=<span class="string">"getManagementService"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Spring配置文件的其余部分包含beans和我们将要在这个特有的例子中的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userBean"</span> <span class="attr">class</span>=<span class="string">"org.activiti.spring.test.UserBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"runtimeService"</span> <span class="attr">ref</span>=<span class="string">"runtimeService"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"printer"</span> <span class="attr">class</span>=<span class="string">"org.activiti.spring.test.Printer"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首先使用任意的一种Spring创建应用上下文的方式创建其Spring应用上下文。在这个例子中你可以使用类路径下面的XML资源来配置我们的Spring应用上下文：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ClassPathXmlApplicationContext applicationContext =</span><br><span class="line">    <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"org/activiti/examples/spring/SpringTransactionIntegrationTest-context.xml"</span>);</span><br></pre></td></tr></table></figure><p>或者, 如果它是一个测试的话:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:org/activiti/spring/test/transaction/SpringTransactionIntegrationTest-context.xml"</span>)</span><br></pre></td></tr></table></figure><p>然后我们就可以得到Activiti的服务beans并且调用该服务上面的方法。ProcessEngineFactoryBean将会对该服务添加一些额外的拦截器，在Activiti服务上面的方法使用的是 Propagation.REQUIRED事物语义。所以，我们可以使用repositoryService去部署一个流程，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">RepositoryService repositoryService = (RepositoryService) applicationContext.getBean(<span class="string">"repositoryService"</span>);</span><br><span class="line">String deploymentId = repositoryService</span><br><span class="line">  .createDeployment()</span><br><span class="line">  .addClasspathResource(<span class="string">"org/activiti/spring/test/hello.bpmn20.xml"</span>)</span><br><span class="line">  .deploy()</span><br><span class="line">  .getId();</span><br></pre></td></tr></table></figure><p>其他相同的服务也是同样可以这么使用。在这个例子中，Spring的事物将会围绕在userBean.hello()上，并且调用Activiti服务的方法也会加入到这个事物中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UserBean userBean = (UserBean) applicationContext.getBean(<span class="string">"userBean"</span>);</span><br><span class="line">userBean.hello();</span><br></pre></td></tr></table></figure><p>这个UserBean看起来像这样。记得在上面Spring bean的配置中我们把repositoryService注入到userBean中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 由Spring注入 */</span></span><br><span class="line">  <span class="keyword">private</span> RuntimeService runtimeService;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRuntimeService</span><span class="params">(RuntimeService runtimeService)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.runtimeService = runtimeService;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Transactional</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//这里，你可以在你们的领域模型中做一些事物处理。</span></span><br><span class="line">        <span class="comment">//当在调用Activiti RuntimeService的startProcessInstanceByKey方法时，</span></span><br><span class="line">        <span class="comment">//它将会结合到同一个事物中。</span></span><br><span class="line">    runtimeService.startProcessInstanceByKey(<span class="string">"helloProcess"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h4><p>当使用ProcessEngineFactoryBean时候，默认情况下，在BPMN流程中的所有表达式都将会’看见’所有的Spring beans。 它可以限制你在表达式中暴露出的beans或者甚至可以在你的配置中使用一个Map不暴露任何beans。下面的例子暴露了一个单例bean（printer），可以把”printer”当作关键字使用. <strong>想要不暴露任何beans，仅仅只需要在SpringProcessEngineConfiguration中传递一个空的list作为’beans’的属性。当不设置’beans’的属性时，在应用上下文中Spring beans都是可以使用的</strong>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngineConfiguration"</span> <span class="attr">class</span>=<span class="string">"org.activiti.spring.SpringProcessEngineConfiguration"</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"beans"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"printer"</span> <span class="attr">value-ref</span>=<span class="string">"printer"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"printer"</span> <span class="attr">class</span>=<span class="string">"org.activiti.examples.spring.Printer"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>现在暴露出来的beans就可以在表达式中使用：例如，在SpringTransactionIntegrationTest中的 hello.bpmn20.xml展示的是如何使用UEL方法表达式去调用Spring bean的方法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">id</span>=<span class="string">"definitions"</span> <span class="attr">...</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"helloProcess"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"start"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow1"</span> <span class="attr">sourceRef</span>=<span class="string">"start"</span> <span class="attr">targetRef</span>=<span class="string">"print"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">serviceTask</span> <span class="attr">id</span>=<span class="string">"print"</span> <span class="attr">activiti:expression</span>=<span class="string">"#&#123;printer.printMessage()&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow2"</span> <span class="attr">sourceRef</span>=<span class="string">"print"</span> <span class="attr">targetRef</span>=<span class="string">"end"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"end"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里的 Printer 看起来像这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Printer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"hello world"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且Spring bean的配置（如上文所示）看起来像这样：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"printer"</span> <span class="attr">class</span>=<span class="string">"org.activiti.examples.spring.Printer"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="资源的自动部署"><a href="#资源的自动部署" class="headerlink" title="资源的自动部署"></a>资源的自动部署</h4><p>Spring的集成也有一个专门用于对资源部署的特性。在流程引擎的配置中，你可以指定一组资源。当流程引擎被创建的时候， 所有在这里的资源都将会被自动扫描与部署。在这里有过滤以防止资源重新部署，只有当这个资源真正发生改变的时候，它才会向Activiti使用的数据库创建新的部署。 这对于很多用例来说，当Spring容器经常重启的情况下（例如 测试），使用它是非常不错的选择。</p><p>这里有一个例子：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngineConfiguration"</span> <span class="attr">class</span>=<span class="string">"org.activiti.spring.SpringProcessEngineConfiguration"</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"deploymentResources"</span> <span class="attr">value</span>=<span class="string">"classpath*:/org/activiti/spring/test/autodeployment/autodeploy.*.bpmn20.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngine"</span> <span class="attr">class</span>=<span class="string">"org.activiti.spring.ProcessEngineFactoryBean"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"processEngineConfiguration"</span> <span class="attr">ref</span>=<span class="string">"processEngineConfiguration"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>默认，上面的配置会把所有匹配的资源发布到Activiti引擎的一个单独发布包下。用来检测防止未修改资源重复发布的机制会作用到整个发布包中。 有时候，这可能不是你想要的。比如，如果你发布了很多流程资源，但是只修改里其中某一个单独的流程定义， 整个发布包都会被认为变更了，导致整个发布包下的所有流程定义都会被重新发布， 结果就是每个流程定义都生成了新版本，虽然其中只有一个流程发生了改变。</p><p>为了定制发布方式，你可以为SpringProcessEngineConfiguration指定一个额外的参数deploymentMode。<br>这个参数指定了匹配多个资源时的发布处理方式。默认下这个参数支持设置三个值：</p><ul><li>default: 把所有资源放在一个单独的发布包中，对这个发布包进行重复检测。 这是默认值，如果你没有指定参数值，就会使用它。</li><li>single-resource: 为每个单独的资源创建一个发布包，并对这些发布包进行重复检测。 你可以单独发布每个流程定义，并在修改流程定义后只创建一个新的流程定义版本。</li><li>resource-parent-folder: 把放在同一个上级目录下的资源发布在一个单独的发布包中，并对发布包进行重复检测。 当需要多资源需要创建发布包，但是需要根据共同的文件夹来组合一些资源时，可以使用它。</li></ul><p>这儿有一个例子来演示将deploymentMode参数配置为single-resource的情况：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngineConfiguration"</span> <span class="attr">class</span>=<span class="string">"org.activiti.spring.SpringProcessEngineConfiguration"</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"deploymentResources"</span> <span class="attr">value</span>=<span class="string">"classpath*:/activiti/*.bpmn"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"deploymentMode"</span> <span class="attr">value</span>=<span class="string">"single-resource"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果想使用上面三个值之外的参数值，你需要自定义处理发布包的行为。 你可以创建一个SpringProcessEngineConfiguration的子类，重写getAutoDeploymentStrategy(String deploymentMode)方法。 这个方法中处理了对应deploymentMode的发布策略。</p><h4 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h4><p>当集成Spring时，使用标准的Activiti测试工具类是非常容易的对业务流程进行测试。 下面的例子展示了如何在一个典型的基于Spring单元测试测试业务流程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:org/activiti/spring/test/junit4/springTypicalUsageTest-context.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBusinessProcessTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> RuntimeService runtimeService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> TaskService taskService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="meta">@Rule</span></span><br><span class="line">  <span class="keyword">public</span> ActivitiRule activitiSpringRule;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="meta">@Deployment</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">simpleProcessTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    runtimeService.startProcessInstanceByKey(<span class="string">"simpleProcess"</span>);</span><br><span class="line">    Task task = taskService.createTaskQuery().singleResult();</span><br><span class="line">    assertEquals(<span class="string">"My Task"</span>, task.getName());</span><br><span class="line"></span><br><span class="line">    taskService.complete(task.getId());</span><br><span class="line">    assertEquals(<span class="number">0</span>, runtimeService.createProcessInstanceQuery().count());</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意对于这种方式，你需要在Spring配置中（在上文的例子中它是自动注入的）定义一个org.activiti.engine.test.ActivitiRulebean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"activitiRule"</span> <span class="attr">class</span>=<span class="string">"org.activiti.engine.test.ActivitiRule"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"processEngine"</span> <span class="attr">ref</span>=<span class="string">"processEngine"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="基于注解的配置"><a href="#基于注解的配置" class="headerlink" title="基于注解的配置"></a>基于注解的配置</h4><p>@EnableActiviti注解相对较新，未来可能会有变更。</p><p>除了基于XML的配置以外，还可以选择基于注解的方式来配置Spring环境。 这与使用XML的方法非常相似，除了要使用@Bean注解， 而且配置是使用java编写的。 它已经可以直接用于Activiti-Spring的集成了：</p><p>首先介绍（需要Spring 3.0+）的是@EnableActiviti注解。 最简单的用法如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableActiviti</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SimplestConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它会创建一个Spring环境，并对Activiti流程引擎进行如下配置：</p><ul><li>默认的内存H2数据库，启用数据库自动升级。</li><li>一个简单的 DataSourceTransactionManager</li><li>一个默认的 SpringJobExecutor</li><li>自动扫描 processes/ 目录下的bpmn20.xml文件。</li></ul><p>在这样一个环境里，可以直接通过注入操作Activiti引擎：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ProcessEngine processEngine;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RuntimeService runtimeService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> TaskService taskService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> HistoryService historyService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RepositoryService repositoryService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ManagementService managementService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> FormService formService;</span><br></pre></td></tr></table></figure><p>当然，默认值都可以自定义。比如，如果配置了DataSource，它就会代替默认创建的数据库配置。 事务管理器，job执行器和其他组件都与之相同。 比如如下配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableActiviti</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      BasicDataSource basicDataSource = <span class="keyword">new</span> BasicDataSource();</span><br><span class="line">      basicDataSource.setUsername(<span class="string">"sa"</span>);</span><br><span class="line">      basicDataSource.setUrl(<span class="string">"jdbc:h2:mem:anotherDatabase"</span>);</span><br><span class="line">      basicDataSource.setDefaultAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">      basicDataSource.setDriverClassName(org.h2.Driver.class.getName());</span><br><span class="line">      basicDataSource.setPassword(<span class="string">""</span>);</span><br><span class="line">      <span class="keyword">return</span> basicDataSource;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他数据库会代替默认的。</p><p>下面介绍了更加复杂的配置。注意AbstractActivitiConfigurer用法， 它暴露了流程引擎的配置，可以用来对它的细节进行详细的配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableActiviti</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span>(proxyTargetClass = <span class="keyword">true</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JPAConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OpenJpaVendorAdapter <span class="title">openJpaVendorAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        OpenJpaVendorAdapter openJpaVendorAdapter = <span class="keyword">new</span> OpenJpaVendorAdapter();</span><br><span class="line">        openJpaVendorAdapter.setDatabasePlatform(H2Dictionary.class.getName());</span><br><span class="line">        <span class="keyword">return</span> openJpaVendorAdapter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BasicDataSource basicDataSource = <span class="keyword">new</span> BasicDataSource();</span><br><span class="line">        basicDataSource.setUsername(<span class="string">"sa"</span>);</span><br><span class="line">        basicDataSource.setUrl(<span class="string">"jdbc:h2:mem:activiti"</span>);</span><br><span class="line">        basicDataSource.setDefaultAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">        basicDataSource.setDriverClassName(org.h2.Driver.class.getName());</span><br><span class="line">        basicDataSource.setPassword(<span class="string">""</span>);</span><br><span class="line">        <span class="keyword">return</span> basicDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalContainerEntityManagerFactoryBean <span class="title">entityManagerFactoryBean</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        OpenJpaVendorAdapter openJpaVendorAdapter, DataSource ds)</span> </span>&#123;</span><br><span class="line">        LocalContainerEntityManagerFactoryBean emf = <span class="keyword">new</span> LocalContainerEntityManagerFactoryBean();</span><br><span class="line">        emf.setPersistenceXmlLocation(<span class="string">"classpath:/org/activiti/spring/test/jpa/custom-persistence.xml"</span>);</span><br><span class="line">        emf.setJpaVendorAdapter(openJpaVendorAdapter);</span><br><span class="line">        emf.setDataSource(ds);</span><br><span class="line">        <span class="keyword">return</span> emf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">jpaTransactionManager</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        EntityManagerFactory entityManagerFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JpaTransactionManager(entityManagerFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AbstractActivitiConfigurer <span class="title">abstractActivitiConfigurer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> EntityManagerFactory emf,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> PlatformTransactionManager transactionManager)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AbstractActivitiConfigurer() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessSpringProcessEngineConfiguration</span><span class="params">(SpringProcessEngineConfiguration engine)</span> </span>&#123;</span><br><span class="line">                engine.setTransactionManager(transactionManager);</span><br><span class="line">                engine.setJpaEntityManagerFactory(emf);</span><br><span class="line">                engine.setJpaHandleTransaction(<span class="keyword">false</span>);</span><br><span class="line">                engine.setJobExecutorActivate(<span class="keyword">false</span>);</span><br><span class="line">                engine.setJpaCloseEntityManager(<span class="keyword">false</span>);</span><br><span class="line">                engine.setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// A random bean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LoanRequestBean <span class="title">loanRequestBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LoanRequestBean();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JPA-和-Hibernate-4-2-x"><a href="#JPA-和-Hibernate-4-2-x" class="headerlink" title="JPA 和 Hibernate 4.2.x"></a>JPA 和 Hibernate 4.2.x</h4><p>在Activiti引擎的serviceTask或listener中使用Hibernate 4.2.x JPA时，需要添加Spring ORM这个额外的依赖。 Hibernate 4.1.x及以下版本是不需要的。应该添加如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;org.springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Activiti </category>
          
          <category> 工作流 </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Activiti </tag>
            
            <tag> 工作流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Activiti 5.16 API 讲解</title>
      <link href="/2020/04/09/Activiti-5-16-API-%E8%AE%B2%E8%A7%A3/"/>
      <url>/2020/04/09/Activiti-5-16-API-%E8%AE%B2%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="Chapter-4-Activiti-API"><a href="#Chapter-4-Activiti-API" class="headerlink" title="Chapter 4. Activiti API"></a>Chapter 4. Activiti API</h3><p>Table of Contents</p><p>流程引擎的API和服务<br>异常策略<br>使用Activiti的服务</p><ul><li>发布流程</li><li>启动一个流程实例</li><li>完成任务</li><li>挂起，激活一个流程</li><li>更多知识</li></ul><p>查询API<br>表达式<br>单元测试<br>调试单元测试<br>web应用中的流程引擎</p><h3 id="流程引擎的API和服务"><a href="#流程引擎的API和服务" class="headerlink" title="流程引擎的API和服务"></a>流程引擎的API和服务</h3><p>引擎API是与Activiti打交道的最常用方式。 我们从ProcessEngine开始， 创建它的很多种方法都已经在 配置章节中有所涉及。 从ProcessEngine中，你可以获得很多囊括工作流/BPM方法的服务。 ProcessEngine和服务类都是线程安全的。 你可以在整个服务器中仅保持它们的一个引用就可以了。</p><p><img src="https://i.loli.net/2020/04/09/OUAIfEYZo7WzcHl.png" alt="activiti 5.16 Chapter 4 api.services.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line"></span><br><span class="line">RuntimeService runtimeService = processEngine.getRuntimeService();</span><br><span class="line">RepositoryService repositoryService = processEngine.getRepositoryService();</span><br><span class="line">TaskService taskService = processEngine.getTaskService();</span><br><span class="line">ManagementService managementService = processEngine.getManagementService();</span><br><span class="line">IdentityService identityService = processEngine.getIdentityService();</span><br><span class="line">HistoryService historyService = processEngine.getHistoryService();</span><br><span class="line">FormService formService = processEngine.getFormService();</span><br></pre></td></tr></table></figure><p>ProcessEngines.getDefaultProcessEngine()会在第一次调用时 初始化并创建一个流程引擎，以后再调用就会返回相同的流程引擎。 使用对应的方法可以创建和关闭所有流程引擎：ProcessEngines.init() 和 ProcessEngines.destroy()。</p><p>ProcessEngines会扫描所有activiti.cfg.xml 和 activiti-context.xml 文件。 对于activiti.cfg.xml文件，流程引擎会使用Activiti的经典方式构建： ProcessEngineConfiguration.createProcessEngineConfigurationFromInputStream(inputStream).buildProcessEngine(). 对于activiti-context.xml文件，流程引擎会使用Spring方法构建：先创建一个Spring的环境， 然后通过环境获得流程引擎。</p><p>所有服务都是无状态的。这意味着可以在多节点集群环境下运行Activiti，每个节点都指向同一个数据库， 不用担心哪个机器实际执行前端的调用。 无论在哪里执行服务都没有问题。</p><p><strong>RepositoryService</strong>可能是使用Activiti引擎时最先接触的服务。 它提供了管理和控制发布包和流程定义的操作。 这里不涉及太多细节，流程定义是BPMN 2.0流程的java实现。 它包含了一个流程每个环节的结构和行为。 发布包是Activiti引擎的打包单位。一个发布包可以包含多个BPMN 2.0 xml文件和其他资源。 开发者可以自由选择把任意资源包含到发布包中。 既可以把一个单独的BPMN 2.0 xml文件放到发布包里，也可以把整个流程和相关资源都放在一起。 （比如，’hr-processes’实例可以包含hr流程相关的任何资源）。 可以通过RepositoryService来部署这种发布包。 发布一个发布包，意味着把它上传到引擎中，所有流程都会在保存进数据库之前分析解析好。 从这点来说，系统知道这个发布包的存在，发布包中包含的流程就已经可以启动了。</p><p>除此之外，服务可以</p><ul><li>查询引擎中的发布包和流程定义。</li><li>暂停或激活发布包，对应全部和特定流程定义。 暂停意味着它们不能再执行任何操作了，激活是对应的反向操作。</li><li>获得多种资源，像是包含在发布包里的文件， 或引擎自动生成的流程图。</li><li>获得流程定义的pojo版本， 可以用来通过java解析流程，而不必通过xml。</li></ul><p>正如<strong>RepositoryService</strong>负责静态信息（比如，不会改变的数据，至少是不怎么改变的）， <strong>RuntimeService</strong>正好是完全相反的。它负责启动一个流程定义的新实例。 如上所述，流程定义定义了流程各个节点的结构和行为。 流程实例就是这样一个流程定义的实例。对每个流程定义来说，同一时间会有很多实例在执行。 <strong>RuntimeService</strong>也可以用来获取和保存流程变量。 这些数据是特定于某个流程实例的，并会被很多流程中的节点使用 （比如，一个排他网关常常使用流程变量来决定选择哪条路径继续流程）。 <strong>Runtimeservice</strong>也能查询流程实例和执行。 执行对应BPMN 2.0中的’token’。基本上执行指向流程实例当前在哪里。 最后，RuntimeService可以在流程实例等待外部触发时使用，这时可以用来继续流程实例。 流程实例可以有很多暂停状态，而服务提供了多种方法来’触发’实例， 接受外部触发后，流程实例就会继续向下执行。</p><p>任务是由系统中真实人员执行的，它是Activiti这类BPMN引擎的核心功能之一。 所有与任务有关的功能都包含在<strong>TaskService</strong>中：</p><ul><li>查询分配给用户或组的任务</li><li>创建独立运行任务。这些任务与流程实例无关。</li><li>手工设置任务的执行者，或者这些用户通过何种方式与任务关联。</li><li>认领并完成一个任务。认领意味着一个人期望成为任务的执行者， 即这个用户会完成这个任务。完成意味着“做这个任务要求的事情”。 通常来说会有很多种处理形式。</li></ul><p><strong>IdentityService</strong>非常简单。它可以管理（创建，更新，删除，查询…）群组和用户。 请注意， Activiti执行时并没有对用户进行检查。 例如，任务可以分配给任何人，但是引擎不会校验系统中是否存在这个用户。 这是Activiti引擎也可以使用外部服务，比如ldap，活动目录，等等。</p><p><strong>FormService</strong>是一个可选服务。即使不使用它，Activiti也可以完美运行， 不会损失任何功能。这个服务提供了启动表单和任务表单两个概念。 启动表单会在流程实例启动之前展示给用户， 任务表单会在用户完成任务时展示。Activiti支持在BPMN 2.0流程定义中设置这些表单。 这个服务以一种简单的方式将数据暴露出来。再次重申，它是可选的， 表单也不一定要嵌入到流程定义中。</p><p><strong>HistoryService</strong>提供了Activiti引擎手机的所有历史数据。 在执行流程时，引擎会保存很多数据（根据配置），比如流程实例启动时间，任务的参与者， 完成任务的时间，每个流程实例的执行路径，等等。 这个服务主要通过查询功能来获得这些数据。</p><p><strong>ManagementService</strong>在使用Activiti的定制环境中基本上不会用到。 它可以查询数据库的表和表的元数据。另外，它提供了查询和管理异步操作的功能。 Activiti的异步操作用途很多，比如定时器，异步操作， 延迟暂停、激活，等等。后续，会讨论这些功能的更多细节。</p><h3 id="异常策略"><a href="#异常策略" class="headerlink" title="异常策略"></a>异常策略</h3><p>Activiti中的基础异常为org.activiti.engine.ActivitiException，一个非检查异常。 这个异常可以在任何时候被API抛出，不过特定方法抛出的“特定”的异常都记录在 javadocs中。 例如，下面的TaskService：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Called when the task is successfully executed.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> taskId the id of the task to complete, cannot be null.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ActivitiObjectNotFoundException when no task exists with the given id.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">complete</span><span class="params">(String taskId)</span></span>;</span><br></pre></td></tr></table></figure><p>在上面的例子中，当传入一个不存在的任务的id时，就会抛出异常。 同时，javadoc<strong>明确指出taskId不能为null，如果传入null， 就会抛出ActivitiIllegalArgumentException。</strong></p><p>我们希望避免过多的异常继承，下面的子类用于特定的场合。 流程引擎和API调用的其他场合不会使用下面的异常， 它们会抛出一个普通的ActivitiExceptions。</p><ul><li>ActivitiWrongDbException：当Activiti引擎发现数据库版本号和引擎版本号不一致时抛出。</li><li>ActivitiOptimisticLockingException：对同一数据进行并发方法并出现乐观锁时抛出。</li><li>ActivitiClassLoadingException：当无法找到需要加载的类或在加载类时出现了错误（比如，JavaDelegate，TaskListener等。</li><li>ActivitiObjectNotFoundException：当请求或操作的对应不存在时抛出。</li><li>ActivitiIllegalArgumentException：这个异常表示调用Activiti API时传入了一个非法的参数，可能是引擎配置中的非法值，或提供了一个非法值，或流程定义中使用的非法值。</li><li>ActivitiTaskAlreadyClaimedException：当任务已经被认领了，再调用taskService.claim(…)就会抛出。</li></ul><h3 id="使用Activiti的服务"><a href="#使用Activiti的服务" class="headerlink" title="使用Activiti的服务"></a>使用Activiti的服务</h3><p>像上面介绍的那样，要想操作Activiti引擎，需要通过 org.activiti.engine.ProcessEngine实例暴露的服务。 下面的代码假设你已经拥有了一个可以运行的Activiti环境。 你就可以操作一个org.activiti.engine.ProcessEngine。 如果只想简单尝试一下代码， 可以下载或者clone<a href="https://github.com/Activiti/activiti-unit-test-template" title="Activiti单元测试模板" target="_blank" rel="noopener">Activiti单元测试模板</a>， 导入到IDE中，把testUserguideCode()方法添加到 org.activiti.MyUnitTest中。</p><p>这个小例子的最终目标是做一个工作业务流程， 演示公司中简单的请假申请：</p><p><img src="https://i.loli.net/2020/04/09/FHx1SMR4LayUQIP.png" alt="activiti 5.16 Chapter 4 api.vacationRequest.png"></p><h4 id="发布流程"><a href="#发布流程" class="headerlink" title="发布流程"></a>发布流程</h4><p>任何与“静态”资源有关的数据（比如流程定义）都可以通过 <strong>RepositoryService</strong>访问。 从概念上讲，所以静态数据都是Activiti的资源内容。</p><p>在src/test/resources/org/activiti/test目录下创建一个新的xml文件 VacationRequest.bpmn20.xml（如果不使用单元测试模板，你也可以在任何地方创建）， 内容如下。注意这一章不会解释例子中使用的xml结构。 如果有需要可以先阅读bpmn 2.0章来了解这些。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">id</span>=<span class="string">"definitions"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">targetNamespace</span>=<span class="string">"http://activiti.org/bpmn20"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns</span>=<span class="string">"http://www.omg.org/spec/BPMN/20100524/MODEL"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:activiti</span>=<span class="string">"http://activiti.org/bpmn"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"vacationRequest"</span> <span class="attr">name</span>=<span class="string">"Vacation request"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"request"</span> <span class="attr">activiti:initiator</span>=<span class="string">"employeeName"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activiti:formProperty</span> <span class="attr">id</span>=<span class="string">"numberOfDays"</span> <span class="attr">name</span>=<span class="string">"Number of days"</span> <span class="attr">type</span>=<span class="string">"long"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">required</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activiti:formProperty</span> <span class="attr">id</span>=<span class="string">"startDate"</span> <span class="attr">name</span>=<span class="string">"First day of holiday (dd-MM-yyy)"</span> <span class="attr">datePattern</span>=<span class="string">"dd-MM-yyyy hh:mm"</span> <span class="attr">type</span>=<span class="string">"date"</span> <span class="attr">required</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activiti:formProperty</span> <span class="attr">id</span>=<span class="string">"vacationMotivation"</span> <span class="attr">name</span>=<span class="string">"Motivation"</span> <span class="attr">type</span>=<span class="string">"string"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">startEvent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow1"</span> <span class="attr">sourceRef</span>=<span class="string">"request"</span> <span class="attr">targetRef</span>=<span class="string">"handleRequest"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"handleRequest"</span> <span class="attr">name</span>=<span class="string">"Handle vacation request"</span> &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">documentation</span>&gt;</span></span><br><span class="line">        $&#123;employeeName&#125; would like to take $&#123;numberOfDays&#125; day(s) of vacation (Motivation: $&#123;vacationMotivation&#125;).</span><br><span class="line">      <span class="tag">&lt;/<span class="name">documentation</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">activiti:formProperty</span> <span class="attr">id</span>=<span class="string">"vacationApproved"</span> <span class="attr">name</span>=<span class="string">"Do you approve this vacation"</span> <span class="attr">type</span>=<span class="string">"enum"</span> <span class="attr">required</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">activiti:value</span> <span class="attr">id</span>=<span class="string">"true"</span> <span class="attr">name</span>=<span class="string">"Approve"</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">activiti:value</span> <span class="attr">id</span>=<span class="string">"false"</span> <span class="attr">name</span>=<span class="string">"Reject"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activiti:formProperty</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activiti:formProperty</span> <span class="attr">id</span>=<span class="string">"managerMotivation"</span> <span class="attr">name</span>=<span class="string">"Motivation"</span> <span class="attr">type</span>=<span class="string">"string"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">potentialOwner</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resourceAssignmentExpression</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">formalExpression</span>&gt;</span>management<span class="tag">&lt;/<span class="name">formalExpression</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resourceAssignmentExpression</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">potentialOwner</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow2"</span> <span class="attr">sourceRef</span>=<span class="string">"handleRequest"</span> <span class="attr">targetRef</span>=<span class="string">"requestApprovedDecision"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusiveGateway</span> <span class="attr">id</span>=<span class="string">"requestApprovedDecision"</span> <span class="attr">name</span>=<span class="string">"Request approved?"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow3"</span> <span class="attr">sourceRef</span>=<span class="string">"requestApprovedDecision"</span> <span class="attr">targetRef</span>=<span class="string">"sendApprovalMail"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">conditionExpression</span> <span class="attr">xsi:type</span>=<span class="string">"tFormalExpression"</span>&gt;</span>$&#123;vacationApproved == 'true'&#125;<span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">task</span> <span class="attr">id</span>=<span class="string">"sendApprovalMail"</span> <span class="attr">name</span>=<span class="string">"Send confirmation e-mail"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow4"</span> <span class="attr">sourceRef</span>=<span class="string">"sendApprovalMail"</span> <span class="attr">targetRef</span>=<span class="string">"theEnd1"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"theEnd1"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow5"</span> <span class="attr">sourceRef</span>=<span class="string">"requestApprovedDecision"</span> <span class="attr">targetRef</span>=<span class="string">"adjustVacationRequestTask"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">conditionExpression</span> <span class="attr">xsi:type</span>=<span class="string">"tFormalExpression"</span>&gt;</span>$&#123;vacationApproved == 'false'&#125;<span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"adjustVacationRequestTask"</span> <span class="attr">name</span>=<span class="string">"Adjust vacation request"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">documentation</span>&gt;</span></span><br><span class="line">        Your manager has disapproved your vacation request for $&#123;numberOfDays&#125; days.</span><br><span class="line">        Reason: $&#123;managerMotivation&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">documentation</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activiti:formProperty</span> <span class="attr">id</span>=<span class="string">"numberOfDays"</span> <span class="attr">name</span>=<span class="string">"Number of days"</span> <span class="attr">value</span>=<span class="string">"$&#123;numberOfDays&#125;"</span> <span class="attr">type</span>=<span class="string">"long"</span> <span class="attr">required</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activiti:formProperty</span> <span class="attr">id</span>=<span class="string">"startDate"</span> <span class="attr">name</span>=<span class="string">"First day of holiday (dd-MM-yyy)"</span> <span class="attr">value</span>=<span class="string">"$&#123;startDate&#125;"</span> <span class="attr">datePattern</span>=<span class="string">"dd-MM-yyyy hh:mm"</span> <span class="attr">type</span>=<span class="string">"date"</span> <span class="attr">required</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activiti:formProperty</span> <span class="attr">id</span>=<span class="string">"vacationMotivation"</span> <span class="attr">name</span>=<span class="string">"Motivation"</span> <span class="attr">value</span>=<span class="string">"$&#123;vacationMotivation&#125;"</span> <span class="attr">type</span>=<span class="string">"string"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activiti:formProperty</span> <span class="attr">id</span>=<span class="string">"resendRequest"</span> <span class="attr">name</span>=<span class="string">"Resend vacation request to manager?"</span> <span class="attr">type</span>=<span class="string">"enum"</span> <span class="attr">required</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">activiti:value</span> <span class="attr">id</span>=<span class="string">"true"</span> <span class="attr">name</span>=<span class="string">"Yes"</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">activiti:value</span> <span class="attr">id</span>=<span class="string">"false"</span> <span class="attr">name</span>=<span class="string">"No"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activiti:formProperty</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">humanPerformer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resourceAssignmentExpression</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">formalExpression</span>&gt;</span>$&#123;employeeName&#125;<span class="tag">&lt;/<span class="name">formalExpression</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resourceAssignmentExpression</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">humanPerformer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow6"</span> <span class="attr">sourceRef</span>=<span class="string">"adjustVacationRequestTask"</span> <span class="attr">targetRef</span>=<span class="string">"resendRequestDecision"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusiveGateway</span> <span class="attr">id</span>=<span class="string">"resendRequestDecision"</span> <span class="attr">name</span>=<span class="string">"Resend request?"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow7"</span> <span class="attr">sourceRef</span>=<span class="string">"resendRequestDecision"</span> <span class="attr">targetRef</span>=<span class="string">"handleRequest"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">conditionExpression</span> <span class="attr">xsi:type</span>=<span class="string">"tFormalExpression"</span>&gt;</span>$&#123;resendRequest == 'true'&#125;<span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">sequenceFlow</span> <span class="attr">id</span>=<span class="string">"flow8"</span> <span class="attr">sourceRef</span>=<span class="string">"resendRequestDecision"</span> <span class="attr">targetRef</span>=<span class="string">"theEnd2"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">conditionExpression</span> <span class="attr">xsi:type</span>=<span class="string">"tFormalExpression"</span>&gt;</span>$&#123;resendRequest == 'false'&#125;<span class="tag">&lt;/<span class="name">conditionExpression</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sequenceFlow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">endEvent</span> <span class="attr">id</span>=<span class="string">"theEnd2"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为了让Activiti引擎知道这个流程，我们必须先进行“发布”。 发布意味着引擎会把BPMN 2.0 xml解析成可以执行的东西， “发布包”中的所有流程定义都会添加到数据库中。 这样，当引擎重启时，它依然可以获得“已发布”的流程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">RepositoryService repositoryService = processEngine.getRepositoryService();</span><br><span class="line">repositoryService.createDeployment().addClasspathResource(<span class="string">"org/activiti/test/VacationRequest.bpmn20.xml"</span>).deploy();</span><br><span class="line">Log.info(<span class="string">"Number of process definitions: "</span> + repositoryService.createProcessDefinitionQuery().count());</span><br></pre></td></tr></table></figure><p>可以阅读发布章来了解更多关于发布的信息。</p><h4 id="启动一个流程实例"><a href="#启动一个流程实例" class="headerlink" title="启动一个流程实例"></a>启动一个流程实例</h4><p>把流程定义发布到Activiti引擎后，我们可以基于它发起新流程实例。 对每个流程定义，都可以有很多流程实例。 流程定义是“蓝图”，流程实例是它的一个运行的执行。</p><p>所有与流程运行状态相关的东西都可以通过RuntimeService获得。 有很多方法可以启动一个新流程实例。在下面的代码中，我们使用定义在流程定义xml 中的key来启动流程实例。 我们也可以在流程实例启动时添加一些流程变量，因为第一个用户任务的表达式需要这些变量。 流程变量经常会被用到，因为它们赋予来自同一个流程定义的不同流程实例的特别含义。 简单来说，流程变量是区分流程实例的关键。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; variables = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">variables.put(<span class="string">"employeeName"</span>, <span class="string">"Kermit"</span>);</span><br><span class="line">variables.put(<span class="string">"numberOfDays"</span>, <span class="keyword">new</span> Integer(<span class="number">4</span>));</span><br><span class="line">variables.put(<span class="string">"vacationMotivation"</span>, <span class="string">"I'm really tired!"</span>);</span><br><span class="line"></span><br><span class="line">RuntimeService runtimeService = processEngine.getRuntimeService();</span><br><span class="line">ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(<span class="string">"vacationRequest"</span>, variables);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Verify that we started a new process instance</span></span><br><span class="line">Log.info(<span class="string">"Number of process instances: "</span> + runtimeService.createProcessInstanceQuery().count());</span><br></pre></td></tr></table></figure><h4 id="完成任务"><a href="#完成任务" class="headerlink" title="完成任务"></a>完成任务</h4><p>流程启动后，第一步就是用户任务。这是必须由系统用户处理的一个环节。 通常，用户会有一个“任务列表”，展示了所有必须由这个用户处理的任务。 下面的代码展示了对应的查询可能是怎样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fetch all tasks for the management group</span></span><br><span class="line">TaskService taskService = processEngine.getTaskService();</span><br><span class="line">List&lt;Task&gt; tasks = taskService.createTaskQuery().taskCandidateGroup(<span class="string">"management"</span>).list();</span><br><span class="line"><span class="keyword">for</span> (Task task : tasks) &#123;</span><br><span class="line">  Log.info(<span class="string">"Task available: "</span> + task.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了让流程实例继续运行，我们需要完成整个任务。对Activiti来说，就是需要complete任务。 下面的代码展示了如何做这件事：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Task task = tasks.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">Map&lt;String, Object&gt; taskVariables = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">taskVariables.put(<span class="string">"vacationApproved"</span>, <span class="string">"false"</span>);</span><br><span class="line">taskVariables.put(<span class="string">"managerMotivation"</span>, <span class="string">"We have a tight deadline!"</span>);</span><br><span class="line">taskService.complete(task.getId(), taskVariables);</span><br></pre></td></tr></table></figure><p>流程实例会进入到下一个环节。在这里例子中， 下一环节允许员工通过表单调整原始的请假申请。员工可以重新提交请假申请， 这会使流程重新进入到第一个任务。</p><h4 id="挂起，激活一个流程"><a href="#挂起，激活一个流程" class="headerlink" title="挂起，激活一个流程"></a>挂起，激活一个流程</h4><p>我们可以挂起一个流程定义。当挂起流程定时时， 就不能创建新流程了（会抛出一个异常）。 可以通过RepositoryService挂起一个流程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine();</span><br><span class="line">RepositoryService repositoryService = processEngine.getRepositoryService();</span><br><span class="line">repositoryService.suspendProcessDefinitionByKey(<span class="string">"vacationRequest"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  runtimeService.startProcessInstanceByKey(<span class="string">"vacationRequest"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ActivitiException e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要想重新激活一个流程定义，可以调用repositoryService.activateProcessDefinitionXXX方法。</p><p>也可以挂起一个流程实例。挂起时，流程不能继续执行（比如，完成任务会抛出异常）， 异步操作（比如定时器）也不会执行。 挂起流程实例可以调用 runtimeService.suspendProcessInstance方法。 激活流程实例可以调用runtimeService.activateProcessInstanceXXX方法。</p><h4 id="更多知识"><a href="#更多知识" class="headerlink" title="更多知识"></a>更多知识</h4><p>上面章节中我们仅仅覆盖了Activiti功能的表层。 未来我们会继续扩展这些章节，以覆盖更多Activiti API。 当然，像其他开源项目一样，学习的最好方式 是研究代码，阅读javadoc。</p><h3 id="查询API"><a href="#查询API" class="headerlink" title="查询API"></a>查询API</h3><p>有两种方法可以从引擎中查询数据：查询API和原生查询。查询API提供了完全类型安全的API。 你可以为自己的查询条件添加很多条件 （所有条件都以AND组合）和精确的排序条件。下面的代码展示了一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Task&gt; tasks = taskService.createTaskQuery()</span><br><span class="line">         .taskAssignee(<span class="string">"kermit"</span>)</span><br><span class="line">         .processVariableValueEquals(<span class="string">"orderId"</span>, <span class="string">"0815"</span>)</span><br><span class="line">         .orderByDueDate().asc()</span><br><span class="line">         .list();</span><br></pre></td></tr></table></figure><p>有时，你需要更强大的查询，比如使用OR条件或不能使用查询API实现的条件。 这时，我们推荐原生查询，它让你可以编写自己的SQL查询。 返回类型由你使用的查询对象决定，数据会映射到正确的对象上。比如，任务，流程实例，，执行，等等。 因为查询会作用在数据库上，你必须使用数据库中定义的表名和列名；这要求了解内部数据结构， 因此使用原生查询时一定要注意。表名可以通过API获得，可以尽量减少对数据库的依赖。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Task&gt; tasks = taskService.createNativeTaskQuery()</span><br><span class="line">.sql(<span class="string">"SELECT count(*) FROM "</span> + managementService.getTableName(Task.class) + <span class="string">" T WHERE T.NAME_ = #&#123;taskName&#125;"</span>)</span><br><span class="line">.parameter(<span class="string">"taskName"</span>, <span class="string">"gonzoTask"</span>)</span><br><span class="line">.list();</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> count = taskService.createNativeTaskQuery()</span><br><span class="line">.sql(<span class="string">"SELECT count(*) FROM "</span> + managementService.getTableName(Task.class) + <span class="string">" T1, "</span></span><br><span class="line">       + managementService.getTableName(VariableInstanceEntity.class) + <span class="string">" V1 WHERE V1.TASK_ID_ = T1.ID_"</span>)</span><br><span class="line">.count();</span><br></pre></td></tr></table></figure><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><p>Activiti使用UEL处理表达式。UEL即统一表达式语言，它时EE6规范的一部分（参考 <a href="https://docs.oracle.com/javaee/6/tutorial/doc/gjddd.html" title="EE6规范" target="_blank" rel="noopener">EE6规范</a>）。为了在所有运行环境都支持最新UEL的所有功能，我们使用了一个JUEL的修改版本。</p><p>表达式可以用在很多场景下，比如Java服务任务，执行监听器，任务监听器和条件流。虽然有两重表达式，值表达式和方法表达式，Activiti进行了抽象，所以两者可以同样使用在需要表达式的场景中。</p><ul><li><p>Value expression：解析为值。默认，所有流程变量都可以使用。所有spring bean（spring环境中）也可以使用在表达式中。 一些实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&#123;myVar&#125;</span><br><span class="line">$&#123;myBean.myProperty&#125;</span><br></pre></td></tr></table></figure></li><li><p>Method expression：调用一个方法，使用或不使用参数。当调用一个无参数的方法时，记得在方法名后添加空的括号（以区分值表达式）。传递的参数可以是字符串也可以是表达式，它们会被自动解析。例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&#123;printer.print()&#125;</span><br><span class="line">$&#123;myBean.addNewOrder(<span class="string">'orderName'</span>)&#125;</span><br><span class="line">$&#123;myBean.doSomething(myVar, execution)&#125;</span><br></pre></td></tr></table></figure></li></ul><p>注意这些表达式支持解析原始类型（包括比较），bean，list，数组和map。</p><p>在所有流程实例中，表达式中还可以使用一些默认对象：</p><ul><li>execution：DelegateExecution提供外出执行的额外信息。</li><li>task：DelegateTask提供当前任务的额外信息。注意，只对任务监听器的表达式有效。</li><li>authenticatedUserId：当前登录的用户id。如果没有用户登录，这个变量就不可用。</li></ul><p>想要更多具体的使用方式和例子，参考spring中的表达式，Java服务任务，执行监听器，任务监听器或条件流。</p><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>业务流程是软件项目的一部分，它也应该和普通的业务流程一样进行测试： 使用单元测试。 因为Activiti是一个嵌入式的java引擎， 为业务流程编写单元测试和写普通单元测试完全一样。</p><p>Activiti支持JUnit 3和4进行单元测试。使用JUnit 3时， 必须集成org.activiti.engine.test.ActivitiTestCase。 它通过保护的成员变量提供ProcessEngine和服务， 在测试的setup()中， 默认会使用classpath下的activiti.cfg.xml初始化流程引擎。 想使用不同的配置文件，可以重写getConfigurationResource()方法。 如果配置文件相同的话，对应的流程引擎会被静态缓存， 就可以用于多个单元测试。</p><p>继承了ActivitiTestCase你，可以在测试方法上使用 org.activiti.engine.test.Deployment注解。 测试执行前，与测试类在同一个包下的， 格式为testClassName.testMethod.bpmn20.xml的资源文件，会被部署。 测试结束后，发布包也会被删除，包括所有相关的流程实例，任务，等等。 Deployment注解也可以直接设置资源的位置。 参考Javadocs获得更多信息。</p><p>把这些放在一起，JUnit 3测试看起来像这样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBusinessProcessTest</span> <span class="keyword">extends</span> <span class="title">ActivitiTestCase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Deployment</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSimpleProcess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">runtimeService.startProcessInstanceByKey(<span class="string">"simpleProcess"</span>);</span><br><span class="line"></span><br><span class="line">Task task = taskService.createTaskQuery().singleResult();</span><br><span class="line">assertEquals(<span class="string">"My Task"</span>, task.getName());</span><br><span class="line"></span><br><span class="line">taskService.complete(task.getId());</span><br><span class="line">assertEquals(<span class="number">0</span>, runtimeService.createProcessInstanceQuery().count());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要想在使用JUnit 4编写单元测试时获得同样的功能， 可以使用org.activiti.engine.test.ActivitiRule。 通过它，可以通过getter方法获得流程引擎和各种服务。 和 ActivitiTestCase一样（参考上面章节），使用这个Rule 也会启用org.activiti.engine.test.Deployment注解（参考上面章节使用和配置的介绍）， 它会在classpath下查找默认的配置文件。 如果配置文件相同的话，对应的流程引擎会被静态缓存， 就可以用于多个单元测试。</p><p>下面的代码演示了JUnit 4单元测试并使用了ActivitiRule的例子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBusinessProcessTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Rule</span></span><br><span class="line"><span class="keyword">public</span> ActivitiRule activitiRule = <span class="keyword">new</span> ActivitiRule();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Deployment</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ruleUsageExample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">RuntimeService runtimeService = activitiRule.getRuntimeService();</span><br><span class="line">runtimeService.startProcessInstanceByKey(<span class="string">"ruleUsage"</span>);</span><br><span class="line"></span><br><span class="line">TaskService taskService = activitiRule.getTaskService();</span><br><span class="line">Task task = taskService.createTaskQuery().singleResult();</span><br><span class="line">assertEquals(<span class="string">"My Task"</span>, task.getName());</span><br><span class="line"></span><br><span class="line">taskService.complete(task.getId());</span><br><span class="line">assertEquals(<span class="number">0</span>, runtimeService.createProcessInstanceQuery().count());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调试单元测试"><a href="#调试单元测试" class="headerlink" title="调试单元测试"></a>调试单元测试</h3><p>当使用内存数据库H2进行单元测试时，下面的教程会告诉我们 如何在调试环境下更容易的监视Activiti的数据库。 这里的截图都是基于eclipse，这种机制很容易复用到其他IDE下。 </p><p>假设我们已经在单元测试里设置了一个断点。 Ecilpse里，在代码左侧双击：</p><p><img src="https://i.loli.net/2020/04/09/4fWDXNdpjvsQGEw.png" alt="activiti 5.16 Chapter 4 api.test.debug.breakpoint.png"></p><p>现在用调试模式运行单元测试（右击单元测试， 选择“运行为”和“单元测试”），测试会停在我们的断点上， 然后我们就可以监视测试的变量，它们显示在右侧面板里。</p><p><img src="https://i.loli.net/2020/04/09/igW8Q1BfMvp2mc7.png" alt="activiti 5.16 Chapter 4 api.test.debug.view.png"></p><p>要监视Activiti的数据，打开“显示”窗口 （如果找不到，打开“窗口”-&gt;“显示视图”-&gt;“其他”，选择显示。） 并点击（代码已完成）org.h2.tools.Server.createWebServer(“-web”).start()</p><p><img src="https://i.loli.net/2020/04/09/XxfvrlAFSB3RcVd.png" alt="activiti 5.16 Chapter 4 api.test.debug.start.h2.server.png"></p><p>选择你点击的行，右击。然后选择“显示”（或者直接快捷方式就不用右击了）</p><p><img src="https://i.loli.net/2020/04/09/WtzSQ4NTIYkEBpm.png" alt="activiti 5.16 Chapter 4 api.test.debug.start.h2.server.2.png"></p><p>现在打开一个浏览器，打开<a href="http://localhost:8082，" target="_blank" rel="noopener">http://localhost:8082，</a> 输入内存数据库的JDBC URL（默认为jdbc:h2:mem:activiti）， 点击连接按钮。</p><p><img src="https://i.loli.net/2020/04/09/MmClknVo8wp7WRv.png" alt="activiti 5.16 Chapter 4 api.test.debug.h2.login.png"></p><p>你也可以看到Activiti的数据，通过它们可以了解单元测试时如何以及为什么这样运行的。</p><p><img src="https://i.loli.net/2020/04/09/GVuLrCdk1ZwFaQO.png" alt="activiti 5.16 Chapter 4 api.test.debug.h2.tables.png"></p><h3 id="web应用中的流程引擎"><a href="#web应用中的流程引擎" class="headerlink" title="web应用中的流程引擎"></a>web应用中的流程引擎</h3><p>ProcessEngine是线程安全的， 可以在多线程下共享。在web应用中， 意味着可以在容器启动时创建流程引擎， 在容器关闭时关闭流程引擎。</p><p>下面代码演示了如何编写一个ServletContextListener 在普通的Servlet环境下初始化和销毁流程引擎：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProcessEnginesServletContextListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line">ProcessEngines.init();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line">ProcessEngines.destroy();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>contextInitialized方法会执行ProcessEngines.init()。 这会查找classpath下的activiti.cfg.xml文件， 根据配置文件创建一个ProcessEngine（比如，多个jar中都包含配置文件）。 如果classpath中包含多个配置文件，确认它们有不同的名字。 当需要使用流程引擎时，可以通过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ProcessEngines.getDefaultProcessEngine()</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ProcessEngines.getProcessEngine(<span class="string">"myName"</span>);</span><br></pre></td></tr></table></figure><p>当然，也可以使用其他方式创建流程引擎， 可以参考配置章节中的描述。</p><p>ContextListener中的contextDestroyed方法会执行ProcessEngines.destroy(). 这会关闭所有初始化的流程引擎。</p>]]></content>
      
      
      <categories>
          
          <category> Activiti </category>
          
          <category> 工作流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Activiti </tag>
            
            <tag> 工作流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Activiti 5.16 简介 学习 配置</title>
      <link href="/2020/04/09/Activiti-5-16-%E7%AE%80%E4%BB%8B-%E5%AD%A6%E4%B9%A0-%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/04/09/Activiti-5-16-%E7%AE%80%E4%BB%8B-%E5%AD%A6%E4%B9%A0-%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="Activiti-5-16-用户手册"><a href="#Activiti-5-16-用户手册" class="headerlink" title="Activiti 5.16 用户手册"></a>Activiti 5.16 用户手册</h3><h3 id="Chapter-1-2-3-简介-学习-配置"><a href="#Chapter-1-2-3-简介-学习-配置" class="headerlink" title="Chapter 1-2-3 简介 学习 配置"></a>Chapter 1-2-3 简介 学习 配置</h3><p>Table of Contents</p><p>协议<br>下载<br>源码<br>必要的软件<br>JDK 6+<br>Eclipse Indigo 和 Juno<br>报告问题<br>试验性功能<br>内部实现类</p><h4 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h4><p>Activiti是基于Apache V2协议发布的。</p><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p><a href="http://activiti.org/download.html" target="_blank" rel="noopener">http://activiti.org/download.html</a></p><h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><p>发布包里包含大部分的已经打好jar包的源码。 如果想找到并构建完整的源码库，请参考 wiki “构建发布包”。</p><h4 id="必要的软件"><a href="#必要的软件" class="headerlink" title="必要的软件"></a>必要的软件</h4><h5 id="JDK-6"><a href="#JDK-6" class="headerlink" title="JDK 6+"></a>JDK 6+</h5><p>Activiti需要运行在JDK 6或以上版本上。 进入 Oracle Java SE 下载页面 点击 “下载 JDK”按钮。页面上也提供了安装的方法。 为了验证是否安装成功，可以在命令行中执行 java -version。 它将会打印出安装的JDK的版本。</p><h5 id="Eclipse-Indigo-和-Juno"><a href="#Eclipse-Indigo-和-Juno" class="headerlink" title="Eclipse Indigo 和 Juno"></a>Eclipse Indigo 和 Juno</h5><p>（译者注：Eclipse 3.7 版本代号 Indigo 靛青， Eclipse 4.2 版本代号 Juno 朱诺）。 在Eclipse下载页面下载你选择的eclipse发布包。 解压下载文件，你就可以通过eclipse目录下的eclipse文件启动它。 此外，在该用户指南后面，专门有一章介绍安装eclipse设计器插件。</p><h3 id="Chapter-2-开始学习"><a href="#Chapter-2-开始学习" class="headerlink" title="Chapter 2. 开始学习"></a>Chapter 2. 开始学习</h3><h4 id="一分钟入门"><a href="#一分钟入门" class="headerlink" title="一分钟入门"></a>一分钟入门</h4><p>从Activiti网站下载Activiti Explorer的WAR文件后， 可以按照下列步骤以默认配置运行样例。 你需要一个Java 运行环境和 Apache Tomcat （其实，任何提供了servlet功能的web容器都可以正常运行。但是我们主要是使用tomcat进行的测试）。</p><p>把下载的activiti-explorer.war复制到Tomcat的webapps目录下。</p><p>执行Tomcat的bin目录下的startup.bat或startup.sh启动服务器。</p><p>Tomcat启动后，打开浏览器访问<a href="http://localhost:8080/activiti-explorer。" target="_blank" rel="noopener">http://localhost:8080/activiti-explorer。</a> 使用kermit/kermit登录。</p><p>这样就好了！Activiti Explorer默认使用H2内存数据库，如果你想使用其他数据库 请参考这里。</p><h4 id="安装Activiti"><a href="#安装Activiti" class="headerlink" title="安装Activiti"></a>安装Activiti</h4><p>要安装Activiti你需要一个 Java运行环境 和 Apache Tomcat。 还要确认设置好JAVA_HOME系统变量。 不同的操作系统下的设置方法是不同的。</p><p>要运行Activiti Explorer和REST web应用，你要从Activiti的下载页下载WAR文件， 复制到Tomcat安装目录下webapps目录下。 默认Explorer应用使用的内存数据库已经包含了示例流程，用户和群组信息。</p><p>下面是示例中可以使用的用户：</p><p>Table 2.1. 示例用户</p><p>账号    密码    角色<br>kermit  kermit  admin<br>gonzo gonzo manager<br>fozzie  fozzie  user</p><p>现在，你可以访问下列web应用：</p><p>Table 2.2. webapp工具</p><p>Webapp名称      URL                   描述<br>Activiti Explorer <a href="http://localhost:8080/activiti-explorer" target="_blank" rel="noopener">http://localhost:8080/activiti-explorer</a> 流程引擎的用户控制台。使用它来启动新流程，分配任务， 查看并认领任务，等等。这个工具也可以用来管理Activiti引擎。</p><p>注意Activiti Explorer演示实例只是一种简单快速展示Activiti的功能的方式。 但是并不是说只能使用这种方式使用Activiti。 Activiti只是一个jar， 可以内嵌到任何Java环境中：swing或者Tomcat, JBoss, WebSphere等等。 也可以把Activiti作为一个典型的单独运行的BPM服务器运行。 只要java可以做的，Activiti也可以。</p><h4 id="安装Activiti数据库"><a href="#安装Activiti数据库" class="headerlink" title="安装Activiti数据库"></a>安装Activiti数据库</h4><p>就像在一分钟入门里说过的，Activiti Explorer默认使用H2内存数据库。 要让Activiti使用独立运行的H2数据库或者其他数据库， 可以修改Activiti Explorer web应用WEB-INF/classes目录下的db.properties。</p><p>另外，注意Activiti Explorer自动生成了演示用的默认用户和群组，流程定义，数据模型。 要想禁用这个功能，要修改WEB-INF目录下的activiti-standalone-context.xml。 可以使用下面的demoDataGenerator bean定义代码完全禁用安装默认数据。从代码中也可以看出，我们可以单独启用或禁用每一项功能。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"demoDataGenerator"</span> <span class="attr">class</span>=<span class="string">"org.activiti.explorer.demo.DemoDataGenerator"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"processEngine"</span> <span class="attr">ref</span>=<span class="string">"processEngine"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"createDemoUsersAndGroups"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"createDemoProcessDefinitions"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"createDemoModels"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="引入Activiti-jar和依赖"><a href="#引入Activiti-jar和依赖" class="headerlink" title="引入Activiti jar和依赖"></a>引入Activiti jar和依赖</h4><p>为了引用Activiti jar和依赖，我们推荐使用 Maven（或Ivy）， 它简化了我们之间的依赖管理。 参考<a href="http://www.activiti.org/community.html#maven.repository" target="_blank" rel="noopener">http://www.activiti.org/community.html#maven.repository</a> 来为你的项目引入必须的jar包。</p><p>如果不想用Maven，你也可以自己把这些jar引入到你的项目中。 Activiti下载zip包包含了一个libs目录， 包含了所有Activiti的jar包（和源代码jar包）。依赖没有用这种方式发布。 Activiti引擎必须的依赖如下所示（通过mvn dependency:tree生成）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">org.activiti:activiti-engine:jar:5.12.1</span><br><span class="line">+- org.apache.commons:commons-email:jar:1.2:compile</span><br><span class="line">|  +- javax.mail:mail:jar:1.4.1:compile</span><br><span class="line">|  \- javax.activation:activation:jar:1.1:compile</span><br><span class="line">+- org.apache.commons:commons-lang3:jar:3.1:compile</span><br><span class="line">+- org.mybatis:mybatis:jar:3.1.1:compile</span><br><span class="line">+- org.springframework:spring-beans:jar:3.1.2.RELEASE:compile</span><br><span class="line">|  \- org.springframework:spring-core:jar:3.1.2.RELEASE:compile</span><br><span class="line">|     +- org.springframework:spring-asm:jar:3.1.2.RELEASE:compile</span><br><span class="line">|     \- commons-logging:commons-logging:jar:1.1.1:compile</span><br><span class="line">\- joda-time:joda-time:jar:2.1:compile</span><br></pre></td></tr></table></figure><p>注意：只有使用了mail service task才必须引入mail依赖jar。</p><p>所有依赖可以在Activiti 源码的模块中， 通过mvn dependency:copy-dependencies下载。</p><h4 id="下一步"><a href="#下一步" class="headerlink" title="下一步"></a>下一步</h4><p>使用Activiti Explorer web应用 是一个熟悉Activiti概念和功能的好办法。但是， Activiti的主要目标是为你自己的应用添加强大的BPM和工作流功能。 下面的章节会帮助你熟悉 如何在你的环境中使用Activiti进行编程：</p><ul><li><p>配置章节 会教你如何设置Activiti， 如何获得ProcessEngine类的实例， 它是所有Activiti引擎功能的中心入口。</p></li><li><p>API章节会带领你了解建立Activiti API的服务。 这些服务用简便的方法提供了Activiti引擎的强大功能， 它们可以使用在任何Java环境下。</p></li><li><p>对深入了解BPMN 2.0，Activiti引擎中流程的编写结构感兴趣吗？ 请继续浏览BPMN 2.0 章节。</p></li></ul><h3 id="Chapter-3-配置"><a href="#Chapter-3-配置" class="headerlink" title="Chapter 3. 配置"></a>Chapter 3. 配置</h3><h4 id="创建ProcessEngine"><a href="#创建ProcessEngine" class="headerlink" title="创建ProcessEngine"></a>创建ProcessEngine</h4><p>Activiti流程引擎的配置文件是名为activiti.cfg.xml的XML文件。 注意这与使用Spring方式创建流程引擎 是不一样的。</p><p>获得ProcessEngine最简单的办法是 使用org.activiti.engine.ProcessEngines类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine()</span><br></pre></td></tr></table></figure><p>它会在classpath下搜索activiti.cfg.xml， 并基于这个文件中的配置构建引擎。 下面代码展示了实例配置。 后面的章节会给出配置参数的详细介绍。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngineConfiguration"</span> <span class="attr">class</span>=<span class="string">"org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:h2:mem:activiti;DB_CLOSE_DELAY=1000"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcDriver"</span> <span class="attr">value</span>=<span class="string">"org.h2.Driver"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUsername"</span> <span class="attr">value</span>=<span class="string">"sa"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcPassword"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"databaseSchemaUpdate"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jobExecutorActivate"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mailServerHost"</span> <span class="attr">value</span>=<span class="string">"mail.my-corp.com"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mailServerPort"</span> <span class="attr">value</span>=<span class="string">"5025"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意配置XML文件其实是一个spring的配置文件。 <strong>但不是说Activiti只能用在Spring环境中！</strong> 我们只是利用了Spring的解析和依赖注入功能 来构建引擎。</p><p>配置文件中使用的ProcessEngineConfiguration可以通过编程方式创建。 可以配置不同的bean id（比如，第三行）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ProcessEngineConfiguration.createProcessEngineConfigurationFromResourceDefault();</span><br><span class="line">ProcessEngineConfiguration.createProcessEngineConfigurationFromResource(String resource);</span><br><span class="line">ProcessEngineConfiguration.createProcessEngineConfigurationFromResource(String resource, String beanName);</span><br><span class="line">ProcessEngineConfiguration.createProcessEngineConfigurationFromInputStream(InputStream inputStream);</span><br><span class="line">ProcessEngineConfiguration.createProcessEngineConfigurationFromInputStream(InputStream inputStream, String beanName);</span><br></pre></td></tr></table></figure><p>也可以不使用配置文件，基于默认创建配置 （参考各种支持类）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ProcessEngineConfiguration.createStandaloneProcessEngineConfiguration();</span><br><span class="line">ProcessEngineConfiguration.createStandaloneInMemProcessEngineConfiguration();</span><br></pre></td></tr></table></figure><p>所有这些ProcessEngineConfiguration.createXXX()方法都返回 ProcessEngineConfiguration，后续可以调整成所需的对象。 在调用buildProcessEngine()后， 就会创建一个ProcessEngine：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ProcessEngine processEngine = ProcessEngineConfiguration.createStandaloneInMemProcessEngineConfiguration()</span><br><span class="line">  .setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_FALSE)</span><br><span class="line">  .setJdbcUrl(<span class="string">"jdbc:h2:mem:my-own-db;DB_CLOSE_DELAY=1000"</span>)</span><br><span class="line">  .setJobExecutorActivate(<span class="keyword">true</span>)</span><br><span class="line">  .buildProcessEngine();</span><br></pre></td></tr></table></figure><h4 id="ProcessEngineConfiguration-bean"><a href="#ProcessEngineConfiguration-bean" class="headerlink" title="ProcessEngineConfiguration bean"></a>ProcessEngineConfiguration bean</h4><p>activiti.cfg.xml必须包含一个id为’processEngineConfiguration’的bean。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngineConfiguration"</span> <span class="attr">class</span>=<span class="string">"org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个bean会用来构建ProcessEngine。 有多个类可以用来定义processEngineConfiguration。 这些类对应不同的环境，并设置了对应的默认值。 最好选择（最）适用于你的环境的类， 这样可以少配置几个引擎的参数。 下面是目前可以使用的类（以后会包含更多）：</p><ul><li>org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration: 单独运行的流程引擎。Activiti会自己处理事务。 默认，数据库只在引擎启动时检测 （如果没有Activiti的表或者表结构不正确就会抛出异常）。</li><li>org.activiti.engine.impl.cfg.StandaloneInMemProcessEngineConfiguration: 单元测试时的辅助类。Activiti会自己控制事务。 默认使用H2内存数据库。数据库表会在引擎启动时创建，关闭时删除。 使用它时，不需要其他配置（除非使用job执行器或邮件功能）。</li><li>org.activiti.spring.SpringProcessEngineConfiguration: 在Spring环境下使用流程引擎。 参考Spring集成章节。</li><li>org.activiti.engine.impl.cfg.JtaProcessEngineConfiguration: 单独运行流程引擎，并使用JTA事务。</li></ul><h4 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h4><p>Activiti可能使用两种方式配置数据库。 第一种方式是定义数据库配置参数：</p><ul><li>jdbcUrl: 数据库的JDBC URL。</li><li>jdbcDriver: 对应不同数据库类型的驱动。</li><li>jdbcUsername: 连接数据库的用户名。</li><li>jdbcPassword: 连接数据库的密码。</li></ul><p>基于JDBC参数配置的数据库连接 会使用默认的MyBatis连接池。 下面的参数可以用来配置连接池（来自MyBatis参数）：</p><ul><li>jdbcMaxActiveConnections: 连接池中处于被使用状态的连接的最大值。默认为10。</li><li>jdbcMaxIdleConnections: 连接池中处于空闲状态的连接的最大值。</li><li>jdbcMaxCheckoutTime: 连接被取出使用的最长时间，超过时间会被强制回收。 默认为20000（20秒）。</li><li>jdbcMaxWaitTime: 这是一个底层配置，让连接池可以在长时间无法获得连接时， 打印一条日志，并重新尝试获取一个连接。（避免因为错误配置导致沉默的操作失败）。 默认为20000（20秒）。</li></ul><p>示例数据库配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:h2:mem:activiti;DB_CLOSE_DELAY=1000"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcDriver"</span> <span class="attr">value</span>=<span class="string">"org.h2.Driver"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUsername"</span> <span class="attr">value</span>=<span class="string">"sa"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcPassword"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>也可以使用javax.sql.DataSource。 （比如，Apache Commons的DBCP）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/activiti"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"activiti"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"activiti"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultAutoCommit"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngineConfiguration"</span> <span class="attr">class</span>=<span class="string">"org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>注意，Activiti的发布包中没有这些类。 你要自己把对应的类（比如，从DBCP里）放到你的classpath下。</p><p>无论你使用JDBC还是DataSource的方式，都可以设置下面的配置：</p><ul><li><strong>databaseType</strong>: 一般不用设置，因为可以自动通过数据库连接的元数据获取。 只有自动检测失败时才需要设置。 可能的值有：{h2, mysql, oracle, postgres, mssql, db2}。 <strong>如果没使用默认的H2数据库就必须设置这项</strong>。 这个配置会决定使用哪些创建/删除脚本和查询语句。 参考支持数据库章节 了解支持哪些类型。</li><li><strong>databaseSchemaUpdate</strong>: 设置流程引擎启动和关闭时如何处理数据库表。<ul><li>false（默认）：检查数据库表的版本和依赖库的版本， 如果版本不匹配就抛出异常。</li><li>true: 构建流程引擎时，执行检查，如果需要就执行更新。 如果表不存在，就创建。</li><li>create-drop: 构建流程引擎时创建数据库表， 关闭流程引擎时删除这些表。</li></ul></li></ul><h4 id="JNDI数据库配置"><a href="#JNDI数据库配置" class="headerlink" title="JNDI数据库配置"></a>JNDI数据库配置</h4><p>默认，Activiti的数据库配置会放在web应用的WEB-INF/classes目录下的db.properties文件中。 这样做比较繁琐， 因为要用户在每次发布时，都修改Activiti源码中的db.properties并重新编译war文件， 或者解压缩war文件，修改其中的db.properties。</p><p>使用JNDI（Java命名和目录接口）来获取数据库连接， 连接是由servlet容器管理的，可以在war部署外边管理配置。 与db.properties相比， 它也允许对连接进行更多的配置。</p><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p>要想把Activiti Explorer和Activiti Rest应用从db.properties转换为使用 JNDI数据库配置，需要打开原始的Spring配置文件 （activiti-webapp-explorer2/src/main/webapp/WEB-INF/activiti-standalone-context.xml 和activiti-webapp-rest2/src/main/resources/activiti-context.xml）， 删除”dbProperties”和”dataSource”两个bean，然后添加如下bean：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jndi.JndiObjectFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jndiName"</span> <span class="attr">value</span>=<span class="string">"java:comp/env/jdbc/activitiDB"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来，我们需要添加包含了默认的H2配置的context.xml文件。 如果已经有了JNDI配置，会覆盖这些配置。 对Activiti Explorer来说，对应的配置文件activiti-webapp-explorer2/src/main/webapp/META-INF/context.xml 如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">antiJARLocking</span>=<span class="string">"true"</span> <span class="attr">path</span>=<span class="string">"/activiti-explorer2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Resource</span> <span class="attr">auth</span>=<span class="string">"Container"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">name</span>=<span class="string">"jdbc/activitiDB"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">type</span>=<span class="string">"javax.sql.DataSource"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">scope</span>=<span class="string">"Shareable"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">description</span>=<span class="string">"JDBC DataSource"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">url</span>=<span class="string">"jdbc:h2:mem:activiti;DB_CLOSE_DELAY=1000"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">driverClassName</span>=<span class="string">"org.h2.Driver"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">username</span>=<span class="string">"sa"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">password</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">              <span class="attr">defaultAutoCommit</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">initialSize</span>=<span class="string">"5"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">maxWait</span>=<span class="string">"5000"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">maxActive</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">maxIdle</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对于Activiti REST应用，添加的activiti-webapp-rest2/src/main/webapp/META-INF/context.xml 如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">antiJARLocking</span>=<span class="string">"true"</span> <span class="attr">path</span>=<span class="string">"/activiti-rest2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Resource</span> <span class="attr">auth</span>=<span class="string">"Container"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">name</span>=<span class="string">"jdbc/activitiDB"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">type</span>=<span class="string">"javax.sql.DataSource"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">scope</span>=<span class="string">"Shareable"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">description</span>=<span class="string">"JDBC DataSource"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">url</span>=<span class="string">"jdbc:h2:mem:activiti;DB_CLOSE_DELAY=-1"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">driverClassName</span>=<span class="string">"org.h2.Driver"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">username</span>=<span class="string">"sa"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">password</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">              <span class="attr">defaultAutoCommit</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">initialSize</span>=<span class="string">"5"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">maxWait</span>=<span class="string">"5000"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">maxActive</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">maxIdle</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可选的一步，现在可以删除Activiti Explorer和Activiti Rest两个应用中 不再使用的db.properties文件了。</p><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>JNDI数据库配置会因为你使用的Servlet container不同而不同。 下面的配置可以在tomcat中使用，但是对其他容器， 请引用你使用的容器的文档。</p><p>如果使用tomcat，JNDI资源配置在 $CATALINA_BASE/conf/[enginename]/[hostname]/[warname].xml （对于Activiti Explorer来说，通常是在$CATALINA_BASE/conf/Catalina/localhost/activiti-explorer.war）。 当应用第一次发布时，会把这个文件从war中复制出来。 所以如果这个文件已经存在了，你需要替换它。要想修改JNDI资源让应用连接mysql而不是H2， 可以像下面这样修改：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Context</span> <span class="attr">antiJARLocking</span>=<span class="string">"true"</span> <span class="attr">path</span>=<span class="string">"/activiti-explorer2"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Resource</span> <span class="attr">auth</span>=<span class="string">"Container"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">name</span>=<span class="string">"jdbc/activitiDB"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">type</span>=<span class="string">"javax.sql.DataSource"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">description</span>=<span class="string">"JDBC DataSource"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">url</span>=<span class="string">"jdbc:mysql://localhost:3306/activiti"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">driverClassName</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">username</span>=<span class="string">"sa"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">password</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">          <span class="attr">defaultAutoCommit</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">initialSize</span>=<span class="string">"5"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">maxWait</span>=<span class="string">"5000"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">maxActive</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">maxIdle</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="支持的数据库"><a href="#支持的数据库" class="headerlink" title="支持的数据库"></a>支持的数据库</h4><p>下面列出Activiti使用的数据库类型（大小写敏感）。</p><p>Table 3.1. 支持的数据库</p><p>Activiti数据库类型 JDBC URL实例 备注<br>h2  jdbc:h2:tcp://localhost/activiti 默认配置的数据库<br>mysql jdbc:mysql://localhost:3306/activiti?autoReconnect=true 使用mysql-connector-java驱动测试<br>oracle jdbc:oracle:thin:@localhost:1521:xe<br>postgres jdbc:postgresql://localhost:5432/activiti<br>db2 dbc:db2://localhost:50000/activiti<br>mssql jdbc:sqlserver://localhost:1433/activiti</p><h4 id="创建数据库表"><a href="#创建数据库表" class="headerlink" title="创建数据库表"></a>创建数据库表</h4><p>下面是创建数据库表最简单的办法：</p><ul><li>把activiti-engine的jar放到classpath下</li><li>添加对应的数据库驱动</li><li>把Activiti配置文件 (activiti.cfg.xml) 放到 classpath下， 指向你的数据库（参考数据库配置章节）</li><li>执行 DbSchemaCreate 类的main方法</li></ul><p>不过，一般情况只有数据库管理员才能执行DDL语句。 在生产环境，这也是最明智的选择。 SQL DDL语句可以从Activiti下载页或Activiti发布目录里找到，在database子目录下。 脚本也包含在引擎的jar中(activiti-engine-x.jar)， 在org/activiti/db/create包下（drop目录里是删除语句）。 SQL文件的命名方式如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">activiti.&#123;db&#125;.&#123;create|drop&#125;.&#123;type&#125;.sql</span><br></pre></td></tr></table></figure><p>其中 db 是 支持的数据库， type 是</p><ul><li>engine: 引擎执行的表。必须。</li><li>identity: 包含用户，群组，用户与组之间的关系的表。 这些表是可选的，只有使用引擎自带的默认身份管理时才需要。</li><li>history: 包含历史和审计信息的表。可选的：历史级别设为none时不会使用。 注意这也会引用一些需要把数据保存到历史表中的功能（比如任务的评论）。</li></ul><p><strong>MySQL用户需要注意</strong>： 版本低于5.6.4的MySQL不支持毫秒精度的timstamp或date类型。 更严重的是，有些版本会在尝试创建这样一列时抛出异常，而有些版本则不会。 在执行自动创建/更新时，引擎会在执行过程中修改DDL。 当使用DDL时，可以选择通用版本和名为mysql55的文件。 （它适合所有版本低于5.6.4的情况）。 后一个文件会将列的类型设置为没有毫秒的情况。</p><p>总结一下，对于MySQL版本会执行如下操作</p><ul><li>&lt;5.6: 不支持毫秒精度。可以使用DDL文件（包含mysql55的文件）。可以实现自动创建/更新。</li><li>5.6.0 - 5.6.3: 不支持毫秒精度。无法自动创建/更新。建议更新到新的数据库版本。如果真的需要的话，也可以使用mysql 5.5。</li><li>5.6.4+:支持毫秒精度。可以使用DDL文件（默认包含mysql的文件）。可以实现自动创建、更新。</li></ul><p>注意对于已经更新了MySQL数据库，而且Activiti表已经创建/更新的情况， 必须手工修改列的类型。</p><h4 id="理解数据库表的命名"><a href="#理解数据库表的命名" class="headerlink" title="理解数据库表的命名"></a>理解数据库表的命名</h4><p>Activiti的表都以ACT_开头。 第二部分是表示表的用途的两个字母标识。 用途也和服务的API对应。</p><ul><li>ACT_RE_*: ‘RE’表示repository。 这个前缀的表包含了流程定义和流程静态资源 （图片，规则，等等）。</li><li>ACT_RU_*: ‘RU’表示runtime。 这些运行时的表，包含流程实例，任务，变量，异步任务，等运行中的数据。 Activiti只在流程实例执行过程中保存这些数据， 在流程结束时就会删除这些记录。 这样运行时表可以一直很小速度很快。</li><li>ACT_ID_*: ‘ID’表示identity。 这些表包含身份信息，比如用户，组等等。</li><li>ACT_HI_*: ‘HI’表示history。 这些表包含历史数据，比如历史流程实例， 变量，任务等等。</li><li>ACT_GE_*: 通用数据， 用于不同场景下。</li></ul><h4 id="数据库升级"><a href="#数据库升级" class="headerlink" title="数据库升级"></a>数据库升级</h4><p>在执行更新之前要先备份数据库 （使用数据库的备份功能）</p><p>默认，每次构建流程引擎时都会进行版本检测。 这一切都在应用启动或Activiti webapp启动时发生。 如果Activiti发现数据库表的版本与依赖库的版本不同， 就会抛出异常。</p><p>要升级，你要把下面的配置 放到activiti.cfg.xml配置文件里：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">...</span> &gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngineConfiguration"</span> <span class="attr">class</span>=<span class="string">"org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"databaseSchemaUpdate"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后，把对应的数据库驱动放到classpath里。 升级应用的Activiti依赖。启动一个新版本的Activiti 指向包含旧版本的数据库。将databaseSchemaUpdate设置为true， Activiti会自动将数据库表升级到新版本， 当发现依赖和数据库表版本不通过时。</p><p>也可以执行更新升级DDL语句。 也可以执行数据库脚本，可以在Activiti下载页找到。</p><h4 id="启用Job执行器"><a href="#启用Job执行器" class="headerlink" title="启用Job执行器"></a>启用Job执行器</h4><p>JobExecutor是管理一系列线程的组件，可以触发定时器（也包含后续的异步消息）。 在单元测试场景下，很难使用多线程。因此API允许查询(ManagementService.createJobQuery)和执行job (ManagementService.executeJob)，所以job可以在单元测试中控制。 要避免与job执行器冲突，可以关闭它。</p><p>默认，JobExecutor在流程引擎启动时就会激活。 如果不想在流程引擎启动后自动激活JobExecutor，可以设置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jobExecutorActivate"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置邮件服务器"><a href="#配置邮件服务器" class="headerlink" title="配置邮件服务器"></a>配置邮件服务器</h4><p>可以选择配置邮件服务器。Activiti支持在业务流程中发送邮件。 想真正的发送一个email，必须配置一个真实的SMTP邮件服务器。 参考e-mail任务。</p><h4 id="配置历史"><a href="#配置历史" class="headerlink" title="配置历史"></a>配置历史</h4><p>可以选择定制历史存储的配置。你可以通过配置影响引擎的历史功能。 参考历史配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"history"</span> <span class="attr">value</span>=<span class="string">"audit"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="为表达式和脚本暴露配置"><a href="#为表达式和脚本暴露配置" class="headerlink" title="为表达式和脚本暴露配置"></a>为表达式和脚本暴露配置</h4><p>默认，activiti.cfg.xml和你自己的Spring配置文件中所有bean 都可以在表达式和脚本中使用。 如果你想限制配置文件中的bean的可见性， 可以配置流程引擎配置的beans配置。 ProcessEngineConfiguration的beans是一个map。当你指定了这个参数， 只有包含这个map中的bean可以在表达式和脚本中使用。 通过在map中指定的名称来决定暴露的bean。</p><h4 id="配置部署缓存"><a href="#配置部署缓存" class="headerlink" title="配置部署缓存"></a>配置部署缓存</h4><p>所有流程定义都被缓存了（解析之后）避免每次使用前都要访问数据库， 因为流程定义数据是不会改变的。 默认，不会限制这个缓存。如果想限制流程定义缓存，可以添加如下配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"processDefinitionCacheLimit"</span> <span class="attr">value</span>=<span class="string">"10"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>这个配置会把默认的hashmap缓存替换成LRU缓存，来提供限制。 当然，这个配置的最佳值跟流程定义的总数有关， 实际使用中会具体使用多少流程定义也有关。</p><p>你也可以注入自己的缓存实现。这个bean必须实现 org.activiti.engine.impl.persistence.deploy.DeploymentCache接口：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"processDefinitionCache"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.activiti.MyCache"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有一个类似的配置叫knowledgeBaseCacheLimit和knowledgeBaseCache， 它们是配置规则缓存的。只有流程中使用规则任务时才会用到。</p><h4 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h4><p>从Activiti 5.12开始，SLF4J被用作日志框架，替换了之前使用java.util.logging。 所有日志（activiti, spring, mybatis等等）都转发给SLF4J 允许使用你选择的日志实现。</p><p><strong>默认activiti-engine依赖中没有提供SLF4J绑定的jar， 需要根据你的实际需要使用日志框架。</strong>如果没有添加任何实现jar，SLF4J会使用NOP-logger，不使用任何日志，不会发出警告，而且什么日志都不会记录。 可以通过<a href="http://www.slf4j.org/codes.html#StaticLoggerBinder了解这些实现。" target="_blank" rel="noopener">http://www.slf4j.org/codes.html#StaticLoggerBinder了解这些实现。</a></p><p>使用Maven，比如使用一个依赖（这里使用log4j），注意你还需要添加一个version：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>activiti-explorer和activiti-rest应用都使用了Log4j绑定。执行所有activiti-*模块的单元测试页使用了Log4j。</p><p>特别提醒如果容器classpath中存在commons-logging： 为了把spring日志转发给SLF4J，需要使用桥接（参考<a href="http://www.slf4j.org/legacy.html#jclOverSLF4J）。" target="_blank" rel="noopener">http://www.slf4j.org/legacy.html#jclOverSLF4J）。</a> 如果你的容器提供了commons-logging实现，请参考下面网页：<a href="http://www.slf4j.org/codes.html#release来确保稳定性。" target="_blank" rel="noopener">http://www.slf4j.org/codes.html#release来确保稳定性。</a></p><p>使用Maven的实例（忽略版本）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="映射诊断上下文"><a href="#映射诊断上下文" class="headerlink" title="映射诊断上下文"></a>映射诊断上下文</h4><p>在5.13中，activiti支持slf4j的MDC功能。 如下的基础信息会传递到日志中记录：</p><ul><li>流程定义Id标记为mdcProcessDefinitionID</li><li>流程实例Id标记为mdcProcessInstanceID</li><li>分支Id标记为mdcexecutionId</li></ul><p>默认不会记录这些信息。可以配置日志使用期望的格式来显示它们，扩展通常的日志信息。 比如，下面的log4j配置定义会让日志显示上面提及的信息：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">log4j.appender.consoleAppender.layout.ConversionPattern =ProcessDefinitionId=%X&#123;mdcProcessDefinitionID&#125;</span><br><span class="line">executionId=%X&#123;mdcExecutionId&#125; mdcProcessInstanceID=%X&#123;mdcProcessInstanceID&#125; mdcBusinessKey=%X&#123;mdcBusinessKey&#125; %m%n"</span><br></pre></td></tr></table></figure><p>当系统进行高风险任务，日志必须严格检查时，这个功能就非常有用，比如要使用日志分析的情况。</p><h4 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h4><p>Activiti 5.15中实现了一种事件机制。它允许在引擎触发事件时获得提醒。 参考所有支持的事件类型了解有效的事件。</p><p>可以为对应的事件类型注册监听器，在这个类型的任何时间触发时都会收到提醒。 你可以添加引擎范围的事件监听器通过配置， 添加引擎范围的事件监听器在运行阶段使用API， 或添加event-listener到特定流程定义的BPMN XML中。</p><p>所有分发的事件，都是org.activiti.engine.delegate.event.ActivitiEvent的子类。事件包含（如果有效）type，executionId，processInstanceId和processDefinitionId。 对应的事件会包含事件发生时对应上下文的额外信息， 这些额外的载荷可以在支持的所有事件类型中找到。</p><h5 id="事件监听器实现"><a href="#事件监听器实现" class="headerlink" title="事件监听器实现"></a>事件监听器实现</h5><p>实现事件监听器的唯一要求是实现org.activiti.engine.delegate.event.ActivitiEventListener。下面是一个实现监听器的例子，它会把所有监听到的事件打印到标准输出中，包括job执行的事件异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyEventListener</span> <span class="keyword">implements</span> <span class="title">ActivitiEventListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(ActivitiEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (event.getType()) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> JOB_EXECUTION_SUCCESS:</span><br><span class="line">      System.out.println(<span class="string">"A job well done!"</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> JOB_EXECUTION_FAILURE:</span><br><span class="line">      System.out.println(<span class="string">"A job has failed..."</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">      System.out.println(<span class="string">"Event received: "</span> + event.getType());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFailOnException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// The logic in the onEvent method of this listener is not critical, exceptions</span></span><br><span class="line">    <span class="comment">// can be ignored if logging fails...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>isFailOnException()方法决定了当事件分发时，onEvent(..)方法抛出异常时的行为。 这里返回的是false，会忽略异常。 当返回true时，异常不会忽略，继续向上传播，迅速导致当前命令失败。 当事件是一个API调用的一部分时（或其他事务性操作，比如job执行）， 事务就会回滚。当事件监听器中的行为不是业务性时，建议返回false。</p><p>activiti提供了一些基础的实现，实现了事件监听器的常用场景。可以用来作为基类或监听器实现的样例：</p><ul><li>org.activiti.engine.delegate.event.BaseEntityEventListener： 这个事件监听器的基类可以用来监听实体相关的事件，可以针对某一类型实体，也可以是全部实体。 它隐藏了类型检测，并提供了三个需要重写的方法：onCreate(..), onUpdate(..) 和 onDelete(..)，当实体创建，更新，或删除时调用。对于其他实体相关的事件，会调用 onEntityEvent(..)。</li></ul><h5 id="配置与安装"><a href="#配置与安装" class="headerlink" title="配置与安装"></a>配置与安装</h5><p>把事件监听器配置到流程引擎配置中时，会在流程引擎启动时激活，并在引擎启动启动中持续工作着。</p><p>eventListeners属性需要org.activiti.engine.delegate.event.ActivitiEventListener的队列。 通常，我们可以声明一个内部的bean定义，或使用ref引用已定义的bean。 下面的代码，向配置添加了一个事件监听器，任何事件触发时都会提醒它，无论事件是什么类型：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngineConfiguration"</span> <span class="attr">class</span>=<span class="string">"org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration"</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"eventListeners"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.activiti.engine.example.MyEventListener"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为了监听特定类型的事件，可以使用typedEventListeners属性，它需要一个map参数。 map的key是逗号分隔的事件名（或单独的事件名）。 map的value是org.activiti.engine.delegate.event.ActivitiEventListener队列。 下面的代码演示了向配置中添加一个事件监听器，可以监听job执行成功或失败：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngineConfiguration"</span> <span class="attr">class</span>=<span class="string">"org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration"</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typedEventListeners"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"JOB_EXECUTION_SUCCESS,JOB_EXECUTION_FAILURE"</span> &gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.activiti.engine.example.MyJobEventListener"</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>分发事件的顺序是由监听器添加时的顺序决定的。首先，会调用所有普通的事件监听器（eventListeners属性），按照它们在list中的次序。然后，会调用所有对应类型的监听器（typedEventListeners属性），如果对应类型的事件被触发了。</p><h5 id="在运行阶段添加监听器"><a href="#在运行阶段添加监听器" class="headerlink" title="在运行阶段添加监听器"></a>在运行阶段添加监听器</h5><p>可以通过API（RuntimeService）在运行阶段添加或删除额外的事件监听器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Adds an event-listener which will be notified of ALL events by the dispatcher.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> listenerToAdd the listener to add</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEventListener</span><span class="params">(ActivitiEventListener listenerToAdd)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Adds an event-listener which will only be notified when an event occurs, which type is in the given types.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> listenerToAdd the listener to add</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> types types of events the listener should be notified for</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEventListener</span><span class="params">(ActivitiEventListener listenerToAdd, ActivitiEventType... types)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Removes the given listener from this dispatcher. The listener will no longer be notified,</span></span><br><span class="line"><span class="comment"> * regardless of the type(s) it was registered for in the first place.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> listenerToRemove listener to remove</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">removeEventListener</span><span class="params">(ActivitiEventListener listenerToRemove)</span></span>;</span><br></pre></td></tr></table></figure><p>注意运行期添加的监听器引擎重启后就消失了。</p><h5 id="为流程定义添加监听器"><a href="#为流程定义添加监听器" class="headerlink" title="为流程定义添加监听器"></a>为流程定义添加监听器</h5><p>可以为特定流程定义添加监听器。监听器只会监听与这个流程定义相关的事件，以及这个流程定义上发起的所有流程实例的事件。 监听器实现可以使用，全类名定义，引用实现了监听器接口的表达式，或配置为抛出一个message/signal/error的BPMN事件。</p><h5 id="让监听器执行用户定义的逻辑"><a href="#让监听器执行用户定义的逻辑" class="headerlink" title="让监听器执行用户定义的逻辑"></a>让监听器执行用户定义的逻辑</h5><p>下面代码为一个流程定义添加了两个监听器。第一个监听器会接收所有类型的事件，它是通过全类名定义的。第二个监听器只接收作业成功或失败的事件，它使用了定义在流程引擎配置中的beans属性中的一个bean。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"testEventListeners"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activiti:eventListener</span> <span class="attr">class</span>=<span class="string">"org.activiti.engine.test.MyEventListener"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activiti:eventListener</span> <span class="attr">delegateExpression</span>=<span class="string">"$&#123;testEventListener&#125;"</span> <span class="attr">events</span>=<span class="string">"JOB_EXECUTION_SUCCESS,JOB_EXECUTION_FAILURE"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对于实体相关的事件，也可以设置为针对某个流程定义的监听器，实现只监听发生在某个流程定义上的某个类型实体事件。下面的代码演示了如何实现这种功能。可以用于所有实体事件（第一个例子），也可以只监听特定类型的事件（第二个例子）。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"testEventListeners"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activiti:eventListener</span> <span class="attr">class</span>=<span class="string">"org.activiti.engine.test.MyEventListener"</span> <span class="attr">entityType</span>=<span class="string">"task"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activiti:eventListener</span> <span class="attr">delegateExpression</span>=<span class="string">"$&#123;testEventListener&#125;"</span> <span class="attr">events</span>=<span class="string">"ENTITY_CREATED"</span> <span class="attr">entityType</span>=<span class="string">"task"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br></pre></td></tr></table></figure><p>entityType支持的值有：attachment, comment, execution,identity-link, job, process-instance, process-definition, task。</p><h5 id="监听抛出BPMN事件"><a href="#监听抛出BPMN事件" class="headerlink" title="监听抛出BPMN事件"></a>监听抛出BPMN事件</h5><p>另一种处理事件的方法是抛出一个BPMN事件。请注意它只针对与抛出一个activiti事件类型的BPMN事件。 比如，抛出一个BPMN事件，在流程实例删除时，会导致一个错误。 下面的代码演示了如何在流程实例中抛出一个signal，把signal抛出到外部流程（全局），在流程实例中抛出一个消息事件， 在流程实例中抛出一个错误事件。除了使用class或delegateExpression， 还使用了throwEvent属性，通过额外属性，指定了抛出事件的类型。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"testEventListeners"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activiti:eventListener</span> <span class="attr">throwEvent</span>=<span class="string">"signal"</span> <span class="attr">signalName</span>=<span class="string">"My signal"</span> <span class="attr">events</span>=<span class="string">"TASK_ASSIGNED"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"testEventListeners"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activiti:eventListener</span> <span class="attr">throwEvent</span>=<span class="string">"globalSignal"</span> <span class="attr">signalName</span>=<span class="string">"My signal"</span> <span class="attr">events</span>=<span class="string">"TASK_ASSIGNED"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"testEventListeners"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activiti:eventListener</span> <span class="attr">throwEvent</span>=<span class="string">"message"</span> <span class="attr">messageName</span>=<span class="string">"My message"</span> <span class="attr">events</span>=<span class="string">"TASK_ASSIGNED"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"testEventListeners"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activiti:eventListener</span> <span class="attr">throwEvent</span>=<span class="string">"error"</span> <span class="attr">errorCode</span>=<span class="string">"123"</span> <span class="attr">events</span>=<span class="string">"TASK_ASSIGNED"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">process</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果需要声明额外的逻辑，是否抛出BPMN事件，可以扩展activiti提供的监听器类。在子类中重写isValidEvent(ActivitiEvent event)， 可以防止抛出BPMN事件。对应的类是org.activiti.engine.test.api.event.SignalThrowingEventListenerTest, org.activiti.engine.impl.bpmn.helper.MessageThrowingEventListener 和 org.activiti.engine.impl.bpmn.helper.ErrorThrowingEventListener.</p><h5 id="流程定义中监听器的注意事项"><a href="#流程定义中监听器的注意事项" class="headerlink" title="流程定义中监听器的注意事项"></a>流程定义中监听器的注意事项</h5><ul><li>事件监听器只能声明在process元素中，作为extensionElements的子元素。 监听器不能定义在流程的单个activity下。</li><li>delegateExpression中的表达式无法访问execution上下文，这与其他表达式不同（比如gateway）。 它只能引用定义在流程引擎配置的beans属性中声明的bean，或者使用spring（未使用beans属性）中所有实现了监听器接口的spring-bean。</li><li>在使用监听器的 class 属性时，只会创建一个实例。记住监听器实现不会依赖成员变量， 确认是多线程安全的。</li><li>当一个非法的事件类型用在events属性或throwEvent中时，流程定义发布时就会抛出异常。（会导致部署失败）。如果class或delegateExecution由问题（类不存在，不存在的bean引用，或代理类没有实现监听器接口），会在流程启动时抛出异常（或在第一个有效的流程定义事件被监听器接收时）。所以要保证引用的类正确的放在classpath下，表达式也要引用一个有效的实例。</li></ul><h5 id="通过API分发事件"><a href="#通过API分发事件" class="headerlink" title="通过API分发事件"></a>通过API分发事件</h5><p>我们提供了通过API使用事件机制的方法，允许大家触发定义在引擎中的任何自定义事件。 建议（不强制）只触发类型为CUSTOM的ActivitiEvents。可以通过RuntimeService触发事件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Dispatches the given event to any listeners that are registered.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> event event to dispatch.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ActivitiException if an exception occurs when dispatching the event or when the &#123;<span class="doctag">@link</span> ActivitiEventDispatcher&#125;</span></span><br><span class="line"><span class="comment"> * is disabled.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ActivitiIllegalArgumentException when the given event is not suitable for dispatching.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">dispatchEvent</span><span class="params">(ActivitiEvent event)</span></span>;</span><br></pre></td></tr></table></figure><h5 id="支持的事件类型"><a href="#支持的事件类型" class="headerlink" title="支持的事件类型"></a>支持的事件类型</h5><p>下面是引擎中可能出现的所有事件类型。每个类型都对应org.activiti.engine.delegate.event.ActivitiEventType中的一个枚举值。</p><p>Table 3.2. 支持的事件</p><p>事件名称    描述    事件类型<br>ENGINE_CREATED  监听器监听的流程引擎已经创建完毕，并准备好接受API调用。 org.activiti…ActivitiEvent<br>ENGINE_CLOSED 监听器监听的流程引擎已经关闭，不再接受API调用。 org.activiti…ActivitiEvent<br>ENTITY_CREATED  创建了一个新实体。实体包含在事件中。  org.activiti…ActivitiEntityEvent<br>ENTITY_INITIALIZED  创建了一个新实体，初始化也完成了。如果这个实体的创建会包含子实体的创建，这个事件会在子实体都创建/初始化完成后被触发，这是与ENTITY_CREATED的区别。  org.activiti…ActivitiEntityEvent<br>ENTITY_UPDATED  更新了已存在的实体。实体包含在事件中。 org.activiti…ActivitiEntityEvent<br>ENTITY_DELETED  删除了已存在的实体。实体包含在事件中。 org.activiti…ActivitiEntityEvent<br>ENTITY_SUSPENDED  暂停了已存在的实体。实体包含在事件中。会被ProcessDefinitions, ProcessInstances 和 Tasks抛出。  org.activiti…ActivitiEntityEvent<br>ENTITY_ACTIVATED  激活了已存在的实体，实体包含在事件中。会被ProcessDefinitions, ProcessInstances 和 Tasks抛出。  org.activiti…ActivitiEntityEvent<br>JOB_EXECUTION_SUCCESS 作业执行成功。job包含在事件中。 org.activiti…ActivitiEntityEvent<br>JOB_EXECUTION_FAILURE 作业执行失败。作业和异常信息包含在事件中。 org.activiti…ActivitiEntityEvent and org.activiti…ActivitiExceptionEvent<br>JOB_RETRIES_DECREMENTED 因为作业执行失败，导致重试次数减少。作业包含在事件中。 org.activiti…ActivitiEntityEvent<br>TIMER_FIRED 触发了定时器。job包含在事件中。 org.activiti…ActivitiEntityEvent<br>JOB_CANCELED  取消了一个作业。事件包含取消的作业。作业可以通过API调用取消， 任务完成后对应的边界定时器也会取消，在新流程定义发布时也会取消。 org.activiti…ActivitiEntityEvent<br>ACTIVITY_STARTED  一个节点开始执行  org.activiti…ActivitiActivityEvent<br>ACTIVITY_COMPLETED  一个节点成功结束  org.activiti…ActivitiActivityEvent<br>ACTIVITY_SIGNALED 一个节点收到了一个信号 org.activiti…ActivitiSignalEvent<br>ACTIVITY_MESSAGE_RECEIVED 一个节点收到了一个消息。在节点收到消息之前触发。收到后，会触发ACTIVITY_SIGNAL或ACTIVITY_STARTED，这会根据节点的类型（边界事件，事件子流程开始事件） org.activiti…ActivitiMessageEvent<br>ACTIVITY_ERROR_RECEIVED 一个节点收到了一个错误事件。在节点实际处理错误之前触发。 事件的activityId对应着处理错误的节点。 这个事件后续会是ACTIVITY_SIGNALLED或ACTIVITY_COMPLETE， 如果错误发送成功的话。 org.activiti…ActivitiErrorEvent<br>UNCAUGHT_BPMN_ERROR 抛出了未捕获的BPMN错误。流程没有提供针对这个错误的处理器。 事件的activityId为空。  org.activiti…ActivitiErrorEvent<br>ACTIVITY_COMPENSATE 一个节点将要被补偿。事件包含了将要执行补偿的节点id。 org.activiti…ActivitiActivityEvent<br>VARIABLE_CREATED  创建了一个变量。事件包含变量名，变量值和对应的分支或任务（如果存在）。 org.activiti…ActivitiVariableEvent<br>VARIABLE_UPDATED  更新了一个变量。事件包含变量名，变量值和对应的分支或任务（如果存在）。 org.activiti…ActivitiVariableEvent<br>VARIABLE_DELETED  删除了一个变量。事件包含变量名，变量值和对应的分支或任务（如果存在）。 org.activiti…ActivitiVariableEvent<br>TASK_ASSIGNED 任务被分配给了一个人员。事件包含任务。 org.activiti…ActivitiEntityEvent<br>TASK_CREATED  创建了新任务。它位于ENTITY_CREATE事件之后。当任务是由流程创建时， 这个事件会在TaskListener执行之前被执行。  org.activiti…ActivitiEntityEvent<br>TASK_COMPLETED  任务被完成了。它会在ENTITY_DELETE事件之前触发。当任务是流程一部分时，事件会在流程继续运行之前， 后续事件将是ACTIVITY_COMPLETE，对应着完成任务的节点。  org.activiti…ActivitiEntityEvent<br>TASK_TIMEOUT  任务已超时，在TIMER_FIRED事件之后，会触发用户任务的超时事件， 当这个任务分配了一个定时器的时候。  org.activiti…ActivitiEntityEvent<br>PROCESS_COMPLETED 流程已结束。在最后一个节点的ACTIVITY_COMPLETED事件之后触发。 当流程到达的状态，没有任何后续连线时， 流程就会结束。 org.activiti…ActivitiEntityEvent<br>MEMBERSHIP_CREATED  用户被添加到一个组里。事件包含了用户和组的id。  org.activiti…ActivitiMembershipEvent<br>MEMBERSHIP_DELETED  用户被从一个组中删除。事件包含了用户和组的id。  org.activiti…ActivitiMembershipEvent<br>MEMBERSHIPS_DELETED 所有成员被从一个组中删除。在成员删除之前触发这个事件，所以他们都是可以访问的。 因为性能方面的考虑，不会为每个成员触发单独的MEMBERSHIP_DELETED事件。 org.activiti…ActivitiMembershipEvent</p><p>引擎内部所有ENTITY_*事件都是与实体相关的。下面的列表展示了实体事件与实体的对应关系：</p><ul><li>ENTITY_CREATED, ENTITY_INITIALIZED, ENTITY_DELETED: Attachment, Comment, Deployment, Execution, Group, IdentityLink, Job, Model, ProcessDefinition, ProcessInstance, Task, User.</li><li>ENTITY_UPDATED: Attachment, Deployment, Execution, Group, IdentityLink, Job, Model, ProcessDefinition, ProcessInstance, Task, User.</li><li>ENTITY_SUSPENDED, ENTITY_ACTIVATED: ProcessDefinition, ProcessInstance/Execution, Task.</li></ul><h5 id="附加信息"><a href="#附加信息" class="headerlink" title="附加信息"></a>附加信息</h5><p>只有同一个流程引擎中的事件会发送给对应的监听器。。的那个你有很多引擎 - 在同一个数据库运行 - 事件只会发送给注册到对应引擎的监听器。其他引擎发生的事件不会发送给这个监听器，无论实际上它们运行在同一个或不同的JVM中。</p><p>对应的事件类型（对应实体）都包含对应的实体。根据类型或事件，这些实体不能再进行更新（比如，当实例以被删除）。可能的话，使用事件提供的EngineServices来以安全的方式来操作引擎。即使如此，你需要小心的对事件对应的实体进行更新/操作。</p><p>没有对应历史的实体事件，因为它们都有运行阶段的对应实体。</p>]]></content>
      
      
      <categories>
          
          <category> Activiti </category>
          
          <category> 工作流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Activiti </tag>
            
            <tag> 工作流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中10个常用的排序算法</title>
      <link href="/2020/03/30/Java%E4%B8%AD10%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95-1/"/>
      <url>/2020/03/30/Java%E4%B8%AD10%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95-1/</url>
      
        <content type="html"><![CDATA[<h3 id="Java中10个常用的排序算法"><a href="#Java中10个常用的排序算法" class="headerlink" title="Java中10个常用的排序算法"></a>Java中10个常用的排序算法</h3><h4 id="摘要：算法在日常的编程中是非常重要的一个知识点，今天让我们一起重温排序，下面是用java实现的常用的十个算法案例："><a href="#摘要：算法在日常的编程中是非常重要的一个知识点，今天让我们一起重温排序，下面是用java实现的常用的十个算法案例：" class="headerlink" title="摘要：算法在日常的编程中是非常重要的一个知识点，今天让我们一起重温排序，下面是用java实现的常用的十个算法案例："></a>摘要：算法在日常的编程中是非常重要的一个知识点，今天让我们一起重温排序，下面是用java实现的常用的十个算法案例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">20</span>;i &gt; <span class="number">0</span>;i--)</span><br><span class="line">            arr[index++] = i;</span><br><span class="line">        System.out.println(<span class="string">"原数组："</span>);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">        System.out.println(<span class="string">"开始排序"</span>);</span><br><span class="line">        arr = InsertionSort(arr);</span><br><span class="line">        System.out.println(<span class="string">"排序后为："</span>);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 工具：交换数组中元素的位置</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] swap(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ****** 1.直接插入排序 ******</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] InsertionSort(<span class="keyword">int</span>[] arr)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr.length == <span class="number">0</span> || arr.length == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length - <span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="comment">// 将 i+1 位置的数插入 0 到 i 之间的数组，从后往前遍历</span></span><br><span class="line">            <span class="comment">// current 指 i+1 的位置元素，pre 指 0 到 i 中依次向前遍历的指针</span></span><br><span class="line">            <span class="keyword">int</span> current = arr[i+<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> pre = i;</span><br><span class="line">            <span class="keyword">while</span>(pre &gt;= <span class="number">0</span> &amp;&amp; current &lt; arr[pre])&#123;</span><br><span class="line">                arr[pre+<span class="number">1</span>] = arr[pre];</span><br><span class="line">                pre--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 最后将原来 i+1 位置的元素放入现在 0 到 i+1 之间数组中正确的位置上</span></span><br><span class="line">            <span class="comment">// pre+1 是因为刚才循环结束时又自减了一次</span></span><br><span class="line">            arr[pre+<span class="number">1</span>] = current;</span><br><span class="line">            <span class="comment">// 打印这一轮的排序结果</span></span><br><span class="line">            System.out.println(Arrays.toString(arr));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ****** 2.希尔排序 ******</span></span><br><span class="line">    <span class="comment">// 希尔排序最重要的变量就是 gap，所有需要+1或者自加1的地方都要注意</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] ShellSort(<span class="keyword">int</span>[] arr)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr.length == <span class="number">0</span> || arr.length == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">        <span class="keyword">int</span> current, gap = arr.length / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(gap &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span>  i = gap;i &lt; arr.length;i++)&#123;</span><br><span class="line">                <span class="comment">// 将 pre+gap 位置的数插入 0 到 pre 之间“同组”的数组，从后往前遍历</span></span><br><span class="line">                <span class="comment">// current 指 pre+gap 的位置元素</span></span><br><span class="line">                current = arr[i];</span><br><span class="line">                <span class="keyword">int</span> pre = i - gap;</span><br><span class="line">                <span class="keyword">while</span>(pre &gt;= <span class="number">0</span> &amp;&amp; arr[pre] &gt; current)&#123;</span><br><span class="line">                    arr[pre+gap] = arr[pre];</span><br><span class="line">                    pre -= gap;</span><br><span class="line">                &#125;</span><br><span class="line">                arr[pre+gap] = current;</span><br><span class="line">                <span class="comment">// 打印这一轮的排序结果</span></span><br><span class="line">                System.out.println(Arrays.toString(arr));</span><br><span class="line">            &#125;</span><br><span class="line">            gap /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ****** 3.简单选择排序 ******</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] SelectionSort(<span class="keyword">int</span>[] arr)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr.length == <span class="number">0</span> || arr.length == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length - <span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="comment">// 每一轮挑出一个最小的元素，依次与不断增长的 i 位置的元素交换</span></span><br><span class="line">            <span class="keyword">int</span> MinIndex = i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i;j &lt; arr.length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[j] &lt; arr[MinIndex])</span><br><span class="line">                    MinIndex = j;</span><br><span class="line">            &#125;</span><br><span class="line">            arr = swap(arr,MinIndex,i);</span><br><span class="line">            <span class="comment">// 打印这一轮的排序结果</span></span><br><span class="line">            System.out.println(Arrays.toString(arr));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ****** 4.堆排序 ******</span></span><br><span class="line">    <span class="comment">// 主函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] HeapSort(<span class="keyword">int</span>[] arr)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr.length == <span class="number">0</span> || arr.length == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">        <span class="keyword">int</span> len = arr.length;</span><br><span class="line">        <span class="comment">// 堆排序第一步是先把当前数组变成一个最大堆</span></span><br><span class="line">        arr = AdjustMaxHeap(arr, len-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span>(len &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">// 取出堆顶的元素（最大元素）与末尾还没有确定位置的元素交换</span></span><br><span class="line">            arr = swap(arr,<span class="number">0</span>,len - <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 打印这一轮的排序结果</span></span><br><span class="line">            System.out.println(Arrays.toString(arr));</span><br><span class="line">            len--;</span><br><span class="line">            arr = AdjustMaxHeap(arr,len - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调整为最大堆</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] AdjustMaxHeap(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> lastIndex)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = (lastIndex - <span class="number">1</span>) / <span class="number">2</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            arr = AdjustLocalHeap(arr,lastIndex,i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调整局部堆使其成为局部最大堆</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     注意事项：堆中结点是从 1 开始的，但把数组看作堆的话，数组的下标是从 0 开始的</span></span><br><span class="line"><span class="comment">     那么父结点与子结点的关系就会发生变化：</span></span><br><span class="line"><span class="comment">        父结点 = （子结点-1）/2</span></span><br><span class="line"><span class="comment">        左子结点 = 父结点*2+1</span></span><br><span class="line"><span class="comment">        右子结点 = 父结点*2+2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] AdjustLocalHeap(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> lastIndex,<span class="keyword">int</span> i)&#123;</span><br><span class="line">        <span class="comment">// 找出当前结点和左右子结点（如果有左右子结点的话）中最大的元素，让这个最大的元素成为父结点</span></span><br><span class="line">        <span class="keyword">int</span> maxIndex = i;</span><br><span class="line">        <span class="keyword">if</span>(i*<span class="number">2</span>+<span class="number">1</span> &lt;= lastIndex &amp;&amp; arr[i] &lt; arr[i*<span class="number">2</span>+<span class="number">1</span>])</span><br><span class="line">            maxIndex = i*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 这里要多一个右子结点是否大于左子结点的判定</span></span><br><span class="line">        <span class="keyword">if</span>(i*<span class="number">2</span>+<span class="number">2</span> &lt;= lastIndex &amp;&amp; arr[i] &lt; arr[i*<span class="number">2</span>+<span class="number">2</span>] &amp;&amp; arr[i*<span class="number">2</span>+<span class="number">1</span>] &lt; arr[i*<span class="number">2</span>+<span class="number">2</span>])</span><br><span class="line">            maxIndex = i*<span class="number">2</span>+<span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 如果父结点不是三个结点中的最大结点，那么将最大结点变成父结点</span></span><br><span class="line">        <span class="comment">// 再通过递归看看这个比较小的父结点能不能再“往下沉”</span></span><br><span class="line">        <span class="keyword">if</span>(maxIndex != i)&#123;</span><br><span class="line">            arr = swap(arr,maxIndex,i);</span><br><span class="line">            arr = AdjustLocalHeap(arr,lastIndex,maxIndex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ****** 5.冒泡排序 ******</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] BubbleSort(<span class="keyword">int</span>[] arr)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr.length == <span class="number">0</span> || arr.length ==<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = arr.length-<span class="number">1</span>;i &gt; <span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= i;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[j] &lt; arr[j-<span class="number">1</span>])</span><br><span class="line">                    arr = swap(arr,j,j-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 打印这一轮的排序结果</span></span><br><span class="line">            System.out.println(Arrays.toString(arr));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ****** 6.快速排序 ******</span></span><br><span class="line">    <span class="comment">//主函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] QuickSort(<span class="keyword">int</span>[] arr)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr.length == <span class="number">0</span> || arr.length ==<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">        arr = LocalQuickSort(arr,<span class="number">0</span>,arr.length -<span class="number">1</span> );</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 快速排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] LocalQuickSort(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> last)&#123;</span><br><span class="line">        <span class="keyword">if</span>(start &gt;= last)</span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">        <span class="comment">// benchmark 指基准数，也就是这一轮将要确定位置的数</span></span><br><span class="line">        <span class="keyword">int</span> benchmark = start;</span><br><span class="line">        <span class="keyword">int</span> left = start;</span><br><span class="line">        <span class="keyword">int</span> right = last;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="comment">// 必须右指针先走</span></span><br><span class="line">            <span class="keyword">while</span>(arr[right] &gt; arr[benchmark] &amp;&amp; left &lt; right) right--;</span><br><span class="line">            <span class="keyword">if</span>(arr[right] &lt;= arr[benchmark] &amp;&amp; left &lt; right) arr[left++] = arr[right];</span><br><span class="line">            <span class="keyword">while</span>(arr[left] &lt; arr[benchmark] &amp;&amp; left &lt; right) left++;</span><br><span class="line">            <span class="keyword">if</span>(arr[right] &gt;= arr[benchmark] &amp;&amp; left &lt; right) arr[right--] = arr[left];</span><br><span class="line">        &#125;</span><br><span class="line">        arr[left] = arr[benchmark];</span><br><span class="line">        <span class="comment">// 打印这一轮的排序结果</span></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">        <span class="comment">// 通过递归，分别对已确定位置的数的两边区域进行快速排序</span></span><br><span class="line">        arr = LocalQuickSort(arr,start,left-<span class="number">1</span>);</span><br><span class="line">        arr = LocalQuickSort(arr,left+<span class="number">1</span>,last);</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ****** 7.归并排序 ******</span></span><br><span class="line">    <span class="comment">// 主函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] MergeSort(<span class="keyword">int</span>[] arr)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr.length == <span class="number">0</span> || arr.length ==<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">        arr = Merge(arr,<span class="number">0</span>,arr.length-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 归并排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] Merge(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> start,<span class="keyword">int</span> last)&#123;</span><br><span class="line">        <span class="comment">// start &lt; last 的判断意味着 arr 指定的范围内必须至少有两个元素</span></span><br><span class="line">        <span class="keyword">if</span>(start &lt; last)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (start + last) / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">// 左右部分分别递归</span></span><br><span class="line">            arr = Merge(arr,start,mid);</span><br><span class="line">            arr = Merge(arr,mid+<span class="number">1</span>,last);</span><br><span class="line">            <span class="comment">// 递归层面：从里往外依次将左半部分和右半部分整合成一个部分</span></span><br><span class="line">            arr = merge(arr,start,mid,last);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] merge(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> start,<span class="keyword">int</span> mid,<span class="keyword">int</span> last)&#123;</span><br><span class="line">        <span class="comment">// tempArr 指一个额外数组，用来临时给 arr 中同一区域的元素排序</span></span><br><span class="line">        <span class="keyword">int</span>[] tempArr = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length];</span><br><span class="line">        <span class="comment">// p1 指 arr 指定区域的左半部分的指针，p2 指 arr 指定区域的右半部分的指针，p 指额外数组 tempArr 的指针</span></span><br><span class="line">        <span class="keyword">int</span> p1 = start, p2 = mid+<span class="number">1</span>, p = start;</span><br><span class="line">        <span class="comment">// 从指定区域的左右半部分中取出最小元素放入额外数组，完成指定区域内的排序</span></span><br><span class="line">        <span class="keyword">while</span>(p1 &lt;= mid &amp;&amp; p2 &lt;= last)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[p1] &lt;= arr[p2])</span><br><span class="line">                tempArr[p++] = arr[p1++];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                tempArr[p++] = arr[p2++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(p1 &lt;= mid) tempArr[p++] = arr[p1++];</span><br><span class="line">        <span class="keyword">while</span>(p2 &lt;= last) tempArr[p++] = arr[p2++];</span><br><span class="line">        <span class="comment">// 将额外数组中的数据覆盖到原 arr 数组中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = start;i &lt;= last;i++)</span><br><span class="line">            arr[i] = tempArr[i];</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ****** 8.基数排序 ******</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] RadixSort(<span class="keyword">int</span>[] arr)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr.length == <span class="number">0</span> || arr.length ==<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">        <span class="comment">// max 指数组中最大的数，maxDigit 指这个最大的数是几位数</span></span><br><span class="line">        <span class="keyword">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x:arr)</span><br><span class="line">            max = Math.max(x,max);</span><br><span class="line">        <span class="keyword">int</span> maxDigit = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(max != <span class="number">0</span>)&#123;</span><br><span class="line">            max /= <span class="number">10</span>;</span><br><span class="line">            maxDigit++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// mod 用于为数组中的数取余数，div 用于把通过 mod 取的余数变成个位数</span></span><br><span class="line">        <span class="keyword">int</span> mod = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> div = <span class="number">1</span>;</span><br><span class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; bucket = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; <span class="number">10</span>;j++)&#123;</span><br><span class="line">            bucket.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;maxDigit;i++,mod *= <span class="number">10</span>,div *= <span class="number">10</span>)&#123;</span><br><span class="line">            <span class="comment">// 打印这一轮的排序结果</span></span><br><span class="line">            System.out.println(Arrays.toString(arr));</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; arr.length;j++)&#123;</span><br><span class="line">                <span class="comment">// num 指当前元素 arr[j] 的个/十/百/千位是几</span></span><br><span class="line">                <span class="keyword">int</span> num = (arr[j] % mod) / div;</span><br><span class="line">                bucket.get(num).add(arr[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; <span class="number">10</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(bucket.get(j).size() != <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> x:bucket.get(j))</span><br><span class="line">                        arr[index++] = x;</span><br><span class="line">                    <span class="comment">// 将桶中所有的动态数组清空，否则第二次循环开始再用到这些动态数组时里面还会有数据</span></span><br><span class="line">                    bucket.get(j).clear();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ****** 9.计数排序 ******</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] CountingSort(<span class="keyword">int</span>[] arr)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr.length ==<span class="number">0</span> || arr.length == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">        <span class="keyword">int</span> min, max;</span><br><span class="line">        min = max = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x: arr)&#123;</span><br><span class="line">            <span class="keyword">if</span>(x &gt; max)</span><br><span class="line">                max = x;</span><br><span class="line">            <span class="keyword">if</span>(x &lt; min)</span><br><span class="line">                min = x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// bucket 指用来存储每个元素出现次数的桶，长度为元素的范围</span></span><br><span class="line">        <span class="keyword">int</span>[] bucket = <span class="keyword">new</span> <span class="keyword">int</span>[max - min +<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 把 bucket 用 0 填满，因为之后要累加</span></span><br><span class="line">        Arrays.fill(bucket,<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 在 bucket 中相应的位置记录每个元素出现的次数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x:arr)&#123;</span><br><span class="line">            bucket[x - min]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 依次从 bucket 中提取元素覆盖到原来的 arr 上</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;bucket.length;i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(bucket[i] != <span class="number">0</span>)&#123;</span><br><span class="line">                arr[index++] = i + min;</span><br><span class="line">                bucket[i]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ****** 10.桶排序 ******</span></span><br><span class="line">    <span class="comment">// 主函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] BucketSort(<span class="keyword">int</span>[] arr)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr.length == <span class="number">0</span> || arr.length == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">        arr = Bucket(arr,<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">return</span>  arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 桶排序</span></span><br><span class="line">    <span class="comment">// bucketSize 指每个桶的容量，bucketCount 指桶的个数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] Bucket(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> bucketSize)&#123;</span><br><span class="line">        <span class="keyword">int</span> min,max;</span><br><span class="line">        min = max = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x:arr)&#123;</span><br><span class="line">            <span class="keyword">if</span>(x &gt; max)</span><br><span class="line">                max = x;</span><br><span class="line">            <span class="keyword">if</span>(x &gt; min)</span><br><span class="line">                min = x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> bucketCount = (max - min) / bucketSize +<span class="number">1</span>;</span><br><span class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; bucket = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; bucketCount;i++)</span><br><span class="line">            bucket.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x: arr)&#123;</span><br><span class="line">            <span class="comment">// 遍历每个桶</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> bucketIndex = <span class="number">0</span>;bucketIndex &lt; bucketCount;bucketIndex++)&#123;</span><br><span class="line">                <span class="comment">// 如果 arr 当前元素在该桶的范围内，则将该元素放入该桶内，并结束遍历每个桶的循环</span></span><br><span class="line">                <span class="keyword">if</span>(x &gt;= min + bucketIndex*bucketSize &amp;&amp; x &lt; min + (bucketIndex+<span class="number">1</span>)*bucketSize)&#123;</span><br><span class="line">                    bucket.get(bucketIndex).add(x);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; bucketCount;i++)&#123;</span><br><span class="line">            <span class="comment">// 对每个桶使用直接插入排序，调整桶内元素的顺序</span></span><br><span class="line">            bucket.set(i,InsertionSortOfArrayList(bucket.get(i)));</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> x:bucket.get(i))</span><br><span class="line">                arr[index++] = x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 针对动态数组的直接插入排序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Integer&gt; <span class="title">InsertionSortOfArrayList</span><span class="params">(ArrayList&lt;Integer&gt; arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr.size() == <span class="number">0</span> || arr.size() ==<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">        <span class="keyword">int</span> current;</span><br><span class="line">        <span class="keyword">int</span> pre;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.size() - <span class="number">1</span>;i++)&#123;</span><br><span class="line">            pre = i;</span><br><span class="line">            current = arr.get(i+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span>(arr.get(pre) &gt; current &amp;&amp; pre &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">                arr.set(pre+<span class="number">1</span>,arr.get(pre));</span><br><span class="line">                pre--;</span><br><span class="line">            &#125;</span><br><span class="line">            arr.set(pre+<span class="number">1</span>,current);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 排序算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>显式使用线程实现异步编程</title>
      <link href="/2020/03/28/%E6%98%BE%E5%BC%8F%E4%BD%BF%E7%94%A8%E7%BA%BF%E7%A8%8B%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
      <url>/2020/03/28/%E6%98%BE%E5%BC%8F%E4%BD%BF%E7%94%A8%E7%BA%BF%E7%A8%8B%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="显式使用线程实现异步编程"><a href="#显式使用线程实现异步编程" class="headerlink" title="显式使用线程实现异步编程"></a>显式使用线程实现异步编程</h3><h4 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h4><p>本章主要讨论如何显式的使用线程实现异步编程，这其中包含如何显式使用线程实现异步编程的缺点，如何显式实现异步编程的原理。</p><p>在Java中实现异步编程最简单的方式是：每当有异步任务要执行时，使用Thread来创建一个线程来进行异步执行。在讲解如何显式使用Thread实现异步编程前，我们先来看下在同步编程模型下，在一个线程中要做两件事情的代码是怎样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Copyright 2020. javaymw.com Studio All Right Reserved</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Create on 03-28 19:15</span></span><br><span class="line"><span class="comment"> * Created by zhaoxinguo</span></span><br><span class="line"><span class="comment"> * Version 2.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.mtons.mblog.javaymw;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaoxinguo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/3/28 19:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doSomethingA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"---doSomethingA---"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doSomethingB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"---doSomethingB---"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 1.执行任务A</span></span><br><span class="line">        doSomethingA();</span><br><span class="line">        <span class="comment">// 2.执行任务B</span></span><br><span class="line">        doSomethingB();</span><br><span class="line">        System.out.println(System.currentTimeMillis() - start);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上面的代码会启动一个Java虚拟机进程，进程内会创建一个用户线程来执行main函数(main线程)，main线程内首先执行doSometingA方法，然后执行了doSometingB方法，那么整个过程耗时4s左右，这是因为两个方法是顺序执行的。</p><p>在Java中，Java虚拟机允许应用程序同时运行多个执行线程，所以我们可在main函数内开启一个线程来异步执行任务doSometingA，而main函数所在线程执行doSometingB，即可大大缩短整个任务处理耗时。</p><p>Java中有两种方式来显式开启一个线程进行异步处理。第一种方式是实现java.lang.Runnable接口的run方法，然后传递Runnable接口的实现类作为创建Thread时<br>的参数，启动线程，对应这种方式的main函数代码可以修改为如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Copyright 2020. javaymw.com Studio All Right Reserved</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Create on 03-28 19:15</span></span><br><span class="line"><span class="comment"> * Created by zhaoxinguo</span></span><br><span class="line"><span class="comment"> * Version 2.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.mtons.mblog.javaymw;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaoxinguo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/3/28 19:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doSomethingA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"---doSomethingA---"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doSomethingB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"---doSomethingB---"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 1.开启异步单元执行任务A</span></span><br><span class="line">        Thread threadA = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            doSomethingA();</span><br><span class="line">        &#125;, <span class="string">"threadA"</span>);</span><br><span class="line">        threadA.start();</span><br><span class="line">        <span class="comment">// 2.执行任务B</span></span><br><span class="line">        doSomethingB();</span><br><span class="line">        <span class="comment">// 3.同步等待线程A运行结束</span></span><br><span class="line">        threadA.join();</span><br><span class="line">        System.out.println(System.currentTimeMillis() - start);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上面代码1，我们在main函数所在线程内首先使用lambda表达式创建了一个java.lang.Runnable接口的匿名实现类，用来异步执行doSometingA任务，然后将<br>其作为Thread的参数并启动。这时候线程A与main线程并发运行，也就是任务doSometingA与任务doSometingB并发运行，代码3则等main线程运行完doSometingB任务后同步等待线程A运行完毕。运行上面代码，这时整个过程耗时大概2s，可知使用异步编程可以大大缩短任务运行时间。</p><p>Java中第二种开启线程进行异步执行的方式是实现Thread类，并重写run方法，这种方式的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Copyright 2020. javaymw.com Studio All Right Reserved</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Create on 03-28 19:15</span></span><br><span class="line"><span class="comment"> * Created by zhaoxinguo</span></span><br><span class="line"><span class="comment"> * Version 2.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.mtons.mblog.javaymw;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaoxinguo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/3/28 19:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doSomethingA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"---doSomethingA---"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doSomethingB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"---doSomethingB---"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 1.开启异步单元执行任务A</span></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="string">"threadA"</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    doSomethingA();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="comment">// 2.执行任务B</span></span><br><span class="line">        doSomethingB();</span><br><span class="line">        <span class="comment">// 3.同步等待线程A运行结束</span></span><br><span class="line">        thread.join();</span><br><span class="line">        System.out.println(System.currentTimeMillis() - start);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码1创建了Thread的匿名类的实现，并重写了run方法，然后启动了线程执行。</p><p>这里有必要提一下Java中线程是有Deamon与非Deamon之分的，默认情况下我们创建的都是非Deamon线程，线程属于什么类型的与JVM退出条件有一定的关系。在<br>Java中，当JVM进程内不存在非Deamon的线程时JVM就退出了。那么如何创建一个Deamon线程呢？其实将调用线程的setDaemon(boolean on)方法设置为true就<br>可以了，更多详细内可以参考《Java并发编程之美》这本书。</p><p><strong>上面我们介绍了显式使用Thread创建异步任务的两种方式，但是上述实现方式存在几个问题：</strong></p><ol><li>每当执行异步任务时，会直接创建一个Thread来执行异步任务，这在生产实践中是不建议使用的，因为线程创建于销毁是有开销的，并且没有限制线程的个数<br>，如果使用不当可能会把系统线程用尽，从而造成错误。在生产环境中一般创建一个线程池，然后使用线程池中的线程来执行异步任务，线程池中的线程是可以被<br>复用的，这可以大大减少线程创建与销毁开销；另外线程池可以有效限制创建的线程个数。</li><li>上面使用Thread执行的异步任务并没有返回值，如果我们想异步执行一个任务，并且需要在任务执行完毕后获取任务执行结果，则上面这个方式是满足不了的<br>，这时候就需要用到JDK中的Future了。</li><li>另外，每当需要异步执行时，我们需要显式地创建线程并启动，这是典型的命令式编程方式，增加了编程者的心智负担。我们需要的是声明式的异步编程方式，<br>即告诉程序我们要异步执行，但是具体怎么实现异步应该对我们透明。</li></ol><p>针对第1个问题我们可以使用线程池来解决；针对第2个问题我们可以使用Future来解决；针对第3个问题，Java中提供了很多封装良好的类库来解决，在下面章节我们会一一详细介绍。</p>]]></content>
      
      
      <categories>
          
          <category> 异步编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异步编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>认识异步编程</title>
      <link href="/2020/03/28/%E8%AE%A4%E8%AF%86%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
      <url>/2020/03/28/%E8%AE%A4%E8%AF%86%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="认识异步编程"><a href="#认识异步编程" class="headerlink" title="认识异步编程"></a>认识异步编程</h2><p>本章主要介绍异步编程的概念和作用，Java中异步编程的场景以及不同异步编程场景应使用什么技术实现。</p><h3 id="1-1-异步编程概念与作用"><a href="#1-1-异步编程概念与作用" class="headerlink" title="1.1 异步编程概念与作用"></a>1.1 异步编程概念与作用</h3><p>通常Java开发人员喜欢使用同步代码编写程序，因为这种请求(request)/响应<br>(response)的方式比较简单，并且比较符合编程人员的的思维习惯；这种做法很好，直到<br>系统出现性能瓶颈。在使用同步编程方式时，由于每个线程同时只能发起一个请求并同步等<br>待返回，所以为了提高系统性能，此时我们就需要引入更多的线程来实现并行化处理。但是<br>多线程下对共享资源进行访问时，不可避免会引入资源争用和并发问题；另外，操作系统层<br>面对线程的个数是有限制的，不可能通过无限制的增加线程来提供系统性能；而且，使用同<br>步阻塞的编程方式还会浪费资源，比如发起网络IO请求时，调用线程就会处于同步阻塞等待<br>响应结果的状态，而这时候调用线程明明可以去做其他事情，等网络IO响应结构返回后再对<br>结构进行处理。</p><p>可见通过增加单机系统线程个数的并行编程方式并不是“灵丹妙药”。通过编写异步、非<br>阻塞的代码，则可以使用相同的底层资源将执行切换到另一个活动任务，然后在异步处理完<br>成后再返回到当前线程继续处理，从而提高系统性能。</p><p>异步编程是可以让程序并行运行的一种手段，其可以让程序中的一个工作单元与主应用<br>程序线程分开独立运行，并且在工作单元运行结束后，会通知主应用程序线程它的运行结果<br>或者失败原因。使用异步编程可以提高应用程序的性能和响应能力等。</p><p>比如当调用线程使用异步方式发起网络IO请求后，调用线程就不会同步阻塞等待响应结<br>果，而是在内存保存请求上下文后，马上返回去做其他事情，等网络IO响应结果返回后再使用<br>IO线程通知业务线程响应结果已经返回，由业务线程对结果进行处理。可见，异步调用方式提高<br>了线程的利用率，让系统有更多的线程资源来处理更多的请求。</p><p>比如在移动应用程序中，在用户操作移动设备屏幕发起请求后，如果是同步等待后台服务器<br>返回结果，则当后台服务操作非常耗时时，就会造成用户看到移动设备屏幕冻结(一直处于请求处<br>理中)，在结果返回前，用户不能操作移动设备的其他功能，这对用户体验非常不好。而使用异步<br>编程时，当发起请求后，调用线程会发生返回，具体返回结果会通过UI线程异步进行渲染，且在这<br>期间用户可以使用移动设备的其他功能。</p><h3 id="1-2-异步编程场景"><a href="#1-2-异步编程场景" class="headerlink" title="1.2 异步编程场景"></a>1.2 异步编程场景</h3><p>在日常开发中我们经常会遇到这样的情况，即需要异步处理一些事情，而不需要<br>知道异步任务的结果。比如在调用线程里面异步打日志，为了不让日志打印阻塞调用线程<br>，会把日志设置为异步方式。如图1-1所示的日志异步化打印，使用一个内存队列把日志<br>打印异步化，然后使用单一消费线程异步处理内存队列中的日志事件，执行具体的日志<br>落盘操作(本质是一个多生产单消费模型)，在这种情况下，调用线程把日志任务放入队<br>列后会继续执行其他操作，而不再关心日志任务具体是什么时候入盘的。</p><p><img src="//javaymw.oss-cn-beijing.aliyuncs.com/static/images/2b4c55d6d380c91ba188277ee3788837.png" alt="图 1-1 日志异步打印.png"><br>图 1-1 日志异步打印</p><p>在Java中，每当我们需要执行异步任务时，可以直接开启一个线程来实现，也可以<br>把异步任务封装为任务对象投递到线程池中来执行。在Spring框架中提供了@Async注解<br>把一个任务异步化来进行处理，具体会在后面的章节详细讲解。</p><p>有时候我们还需要在主线程等待异步任务的执行结果，这时候Future就派上用场了。<br>比如调用线程要等任务A执行完毕后再顺序执行任务B，并且把两者的任务结果拼接起来供<br>前端展示使用，如果调用线程是同步调用两次任务(如图 1-2所示)，则整个过程耗时为执<br>行任务A的耗时加上执行任务B的耗时。</p><p><img src="//javaymw.oss-cn-beijing.aliyuncs.com/static/images/f1d64668710b7cb52acee62697eb9c52.png" alt="图 1-2 同步调用.png"><br>图 1-2 同步调用</p><p>如果使用异步编程(如图 1-3所示)，则可以在调用线程内开启一个异步运行单元来执<br>行任务A，开启异步运行单元后调用线程会马上返回一个Future对象(futureB)，然后调用<br>线程本身来执行任务B，等任务B执行完毕后，调用线程可以调用futureB的get()方法获取<br>任务A的执行结果，最好再拼接两者的结果。这时由于任务A和任务B是并行运行的，所以整个<br>过程耗时为max(调用线程执行任务B的耗时，异步运行单元执行任务A的耗时)。</p><p><img src="//javaymw.oss-cn-beijing.aliyuncs.com/static/images/41bc61d2207d8db61cce7e2b888cd6fa.png" alt="图 1-3 异步调用.png"><br>图 1-3 异步调用</p><p>可见整个过程耗时显著缩短，对于用户来说，页面响应时间缩短，用户体验会更好，其<br>中异步单元的执行一般是由线程池中的线程执行。</p><p>使用Future确实可以获取异步任务的执行结果，但是获取其结果还是会阻塞调用线程的，<br>并没有实现完全的异步化处理，所以在JDK8中提供了CompletableFuture来弥补其缺点。CompletableFuture<br>类允许非阻塞方式和基于通知的方式处理结果，其通过设置回调函数方式，让主线程彻底解放出来，实现了实际意义上的异步处理。</p><p>如图 1-4 所示，使用CompletableFuture时，当异步单元返回futureB后，调用线程可以在其上调用whenComplete方法设置一个回调函数action，<br>然后调用线程就会马上返回，等异步任务执行完毕后会使用异步线程来执行回调函数action，而无须调用线程干预。如果你对CompletableFuture不了解<br>，没关系，后面章节我们会详细讲解，这里你只需要知道其解决了传统Future的缺陷就可以了。</p><p><img src="//javaymw.oss-cn-beijing.aliyuncs.com/static/images/99d755876975c77a409dbd30720d8dea.png" alt="图 1-4 CompletableFuture异步执行.png"><br>图 1-4 CompletableFuture异步执行</p><p>JDK8还引入了Stream，旨在有效地处理数据流(包括原始类型)，其使用声明式编程让我们可以写出可读性、可维护性很强的代码，并且结合CompletableFuture<br>完美地实现异步编程。但是它产生的流只能使用一次，并且缺少与实际相关的操作(例如RxJava中基于时间窗口的缓存元素)，虽然可以执行并行计算，但无法指定要<br>使用的线程池。同时，它也没有设计用于处理延迟的操作(例如RxJava中的defer操作)，所以Reactor、RxJava等Reactive API就是为了解决这些问题而生的。</p><p>Reactor、RxJava等反应式API也提供Java 8 Stream 的运算符，但它们更适用于流序列(不仅仅是集合)，并且允许定义一个转换操作的管道，该管道将应用于通过它的数据(这要归功于方便的流畅API和Lambda表达式的使用)。Reactive旨在处理同步或异步操作，<br>并允许你对元素进行缓存(buffer)、合并(merge)、连接(join)等各种转换。</p><p>上面我们讲解了但JVM内的异步编程，那么对于跨网络的交互是否也存在异步编程范畴呢？对于网络请求来说，同步调用是比较直截了当的。比如我们在一个线程A<br>中通过RPC请求获取服务B和服务C的数据，然后基于两者的结果做一些事情。在同步调用情况下，线程A需要调用服务B，然后同步等待服务B结果返回后，才可以对<br>服务C发起调用，等服务C结果返回后才可以结合服务B和C的结果执行其他操作。</p><p>如图 1-5所示，线程A同步获取服务B的结果后，再同步调用服务C获取结果，可见在同步调用情况下业务执行语义比较清晰，线程A顺序地对多个服务请求进行调用；但是同步调用意味着当前发起请求的调用线程在远端机器返回结果前必须阻塞等待，这明细很浪费资源。好的做法应该是在发起请求的调用线程发起请求后，注册一个回调函数，然后马上返回去执行其他操作，当远端把结果返回后再使用IO线程或者框架线程池中的线程执行回调函数。</p><p><img src="//javaymw.oss-cn-beijing.aliyuncs.com/static/images/b73a72541d65013a8b19f3bef688ca09.png" alt="图 1-5 同步RPC调用.png"><br>图 1-5 同步RPC调用</p><p>那么如何实现异步调用？在Java中NIO的出现让实现上面的功能变得简单，而高性能异步、基于事件驱动的网络编程框架Netty的出现让我们从编写繁杂的Java NIO<br>程序中解放出来，现在的RPC框架，比如Dubbo底层网络通信，就是基于Netty实现的。Netty框架将网络编程逻辑与业务逻辑处理分离开来，在内部帮我们自动处理<br>好网络与异步处理逻辑，让我们专心写自己的业务处理逻辑，而Netty的异步非阻塞能力与CompletableFuture结合则可以轻松地实现网络请求的异步调用。</p><p>在执行RPC(远程过程调用)调用时，使用异步编程可以提高系统的性能。如图 1-6所示，在异步调用情况下，当线程A调用服务B后，会马上返回一个异步的futureB<br>对象，然后线程A可以在futureB上设置一个回调函数；接着线程A可以继续访问服务C，也会马上返回一个futureC对象，然后线程A可以在futureC上设置一个回调函数。</p><p><img src="//javaymw.oss-cn-beijing.aliyuncs.com/static/images/51336aab44b5cf56209227e545566ac7.png" alt="图 1-6 RPC异步调用.png"><br>图 1-6 RPC异步调用</p><p>如图 1-6 可知，在异步调用情况下，线程A可以并发地调用服务B和服务C，而不再是顺序的。由于服务B和服务C是并发运行，所以相比同步调用，线程A获取到<br>服务B和服务C结果的时间会缩短很多(同步调用情况下的耗时为服务B和服务C返回结果耗时的，异步调用情况下函数为max(服务B耗时，服务C耗时))。另外，<br>这里可以借助CompletableFuture的能力等两次RPC调用都异步返回结果后再执行其他操作，这时候调用流程如图 1-7所示。</p><p><img src="//javaymw.oss-cn-beijing.aliyuncs.com/static/images/508a04433edd8e644dd95e9233664f53.png" alt="图 1-7 合并RPC调用结果.png"><br>图 1-7 合并RPC调用结果</p><p>如图 1-7 所示，调用线程A首先发起服务B的远程调用，会马上返回一个futureB对象，然后发起服务C的远程调用，也会马上返回一个futureC对象，最好调用<br>线程A使用代码futureB.thenCombine(futureC,action)等futureB和futureC结果可用时执行回调函数action。这里我们只是简单概述下基于Netty的异步<br>非阻塞能力以及CompletableFuture的可编排能力，基于这些能力，我们可以实现功能很强大的异步编程能力。在后面章节，我们会以Dubbo框架为例讲解其<br>借助Netty的非阻塞异步API实现服务消费端的异步调用。</p><p>其实，有了CompletableFuture实现异步编程，我们可以很自然地使用适配器来实现Reactive风格的编程。当我们使用RxJava API时，只需要使用Flowable的<br>一些函数转转CompletableFuture为Flowable对象即可，这个我们在后面章节也会讲述。</p><p>上节讲解了网络请求中RPC框架的异步请求，其实还有一类，也就是Web请求，在Web应用中Servlet占有一席之地。在Servlet3.0规范前，Servlet容器对Servlet<br>的处理都是每个请求对应一个线程这种1:1的模式进行处理的(如果 1-8 所示)，每当收到一个请求，都会开启一个Servlet容器内的线程来进行处理，如果<br>Servlet内处理比较耗时，则会把Servlet容器内线程使用耗尽，然后容器就不能再处理新的请求了。</p><p><img src="//javaymw.oss-cn-beijing.aliyuncs.com/static/images/4fde013f07814fe49930f18e38d60554.png" alt="图 1-8 Servlet的阻塞处理模型.png"><br>图 1-8 Servlet的阻塞处理模型</p><p>Servlet 3.0 规范中则提供了异步处理的能力，让Servlet容器中的线程可以及时释放，具体Servlet业务处理逻辑是在业务自己的线程池内来处理；虽然<br>Servlet 3.0 规范让Servlet的执行变为异步，但是其IO还是阻塞式的。IO阻塞是说在Servlet处理请求时，从ServletInputStream中读取请求体时是阻塞的，<br>而我们想要的是当书记就绪时直接通知我们去读取就可以了，因为这可以避免占用我们自己的线程来进行阻塞读取，好在Servlet 3.1 规范提供了非阻塞IO来解决<br>这个问题。</p><p>虽然Servlet技术栈的不断发展实现了异步处理与非阻塞IO，但是其异步是不彻底的，因为受制于Servlet规范本身，比如其规范是同步的(Filter，Servlet)或<br>阻塞的(getParameter，getPart)。所以新的使用少量线程和较少的硬件资源来处理并发的非阻塞Web技术栈应运而生-WebFlux，其是与Servlet技术栈并行存在<br>的一种新技术，基于JDK8函数式编程与Netty实现天然的异步、非阻塞处理，这些我们在后面的章节会具体介绍。</p><p>为了更好的实现异步编程，降低异步编程的成本，一些框架也应运而生，比如高性能线程间消息传递库Disruptor，其通过为事件(event)预先分配内存、无锁CAS<br>算法、缓存行填充、两阶段协议提交来实现多线程并发地处理不同的元素，从而实现高性能的异步处理。比如Akka基于Actor模式实现了天然支持分布式的使用消息进行异步处理的服务；比如高性能分布式消息中间件Apache RocketMetaQ实现了应用间的异步解耦、流量肖锋。</p><p>一些新兴的语言对异步处理的支持能力让我们忍不住称赞，Go语言就是其中之一，其通过语言层面内置的goroutine与channel可以轻松实现复杂的异步处理能力。</p><p>以上就是本书要讨论的内容。</p><h3 id="1-3-总结"><a href="#1-3-总结" class="headerlink" title="1.3 总结"></a>1.3 总结</h3><p>本章我们首先概要介绍了异步编程的概念与作用，让大家对异步编程有一个大致的了解；然后讲解了Java中异步编程的场景，让大家通过实际场景案例进一步了解<br>异步编程是什么，以及不同异步编程场景应使用什么技术来实现。</p>]]></content>
      
      
      <categories>
          
          <category> 异步编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异步编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02 日志系统：一条SQL更新语句是如何执行的？</title>
      <link href="/2020/03/27/02-%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%EF%BC%9A%E4%B8%80%E6%9D%A1SQL%E6%9B%B4%E6%96%B0%E8%AF%AD%E5%8F%A5%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84%EF%BC%9F/"/>
      <url>/2020/03/27/02-%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%EF%BC%9A%E4%B8%80%E6%9D%A1SQL%E6%9B%B4%E6%96%B0%E8%AF%AD%E5%8F%A5%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="02-日志系统：一条SQL更新语句是如何执行的？"><a href="#02-日志系统：一条SQL更新语句是如何执行的？" class="headerlink" title="02  日志系统：一条SQL更新语句是如何执行的？"></a>02  日志系统：一条SQL更新语句是如何执行的？</h3><p><img src="https://static001.geekbang.org/resource/image/f6/f5/f613f6d2d8a72032c16b211f933c1cf5.jpg" alt="https://static001.geekbang.org/resource/image/f6/f5/f613f6d2d8a72032c16b211f933c1cf5.jpg"></p><p>前面我们系统了解了一个查询语句的执行流程，并介绍了执行过程中涉及的处理模块。相信你还记得，一条查询语句的执行过程一般是经过连接器、分析器、优化器、执行器等功能模块，最后到达存储引擎。</p><p>那么，一条更新语句的执行流程又是怎样的呢？</p><p>之前你可能经常听 DBA 同事说，MySQL 可以恢复到半个月内任意一秒的状态，惊叹的同时，你是不是心中也会不免会好奇，这是怎样做到的呢？</p><p>我们还是从一个表的一条更新语句说起，下面是这个表的创建语句，这个表有一个主键 ID 和一个整型字段 c：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table T(ID int primary key, c int);</span><br></pre></td></tr></table></figure><p>如果要将 ID=2 这一行的值加 1，SQL 语句就会这么写：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; update T set c=c+1 where ID=2;</span><br></pre></td></tr></table></figure><p>前面我有跟你介绍过 SQL 语句基本的执行链路，这里我再把那张图拿过来，你也可以先简单看看这个图回顾下。首先，可以确定的说，查询语句的那一套流程，更新语句也是同样会走一遍。</p><p><img src="//javaymw.oss-cn-beijing.aliyuncs.com/static/images/e40c2ce1dea81a8b143e99d9d192c78f.png" alt="MySQL 的逻辑架构图.png"></p><p>你执行语句前要先连接数据库，这是连接器的工作。</p><p>前面我们说过，在一个表上有更新的时候，跟这个表有关的查询缓存会失效，所以这条语句就会把表 T 上所有缓存结果都清空。这也就是我们一般不建议使用查询缓存的原因。</p><p>接下来，分析器会通过词法和语法解析知道这是一条更新语句。优化器决定要使用 ID 这个索引。然后，执行器负责具体执行，找到这一行，然后更新。</p><p>与查询流程不一样的是，更新流程还涉及两个重要的日志模块，它们正是我们今天要讨论的主角：redo log（重做日志）和 binlog（归档日志）。如果接触 MySQL，那这两个词肯定是绕不过的，我后面的内容里也会不断地和你强调。不过话说回来，redo log 和 binlog 在设计上有很多有意思的地方，这些设计思路也可以用到你自己的程序里。</p><h3 id="重要的日志模块：redo-log"><a href="#重要的日志模块：redo-log" class="headerlink" title="重要的日志模块：redo log"></a>重要的日志模块：redo log</h3><p>不知道你还记不记得《孔乙己》这篇文章，酒店掌柜有一个粉板，专门用来记录客人的赊账记录。如果赊账的人不多，那么他可以把顾客名和账目写在板上。但如果赊账的人多了，粉板总会有记不下的时候，这个时候掌柜一定还有一个专门记录赊账的账本。</p><p>如果有人要赊账或者还账的话，掌柜一般有两种做法：</p><ol><li>一种做法是直接把账本翻出来，把这次赊的账加上去或者扣除掉；</li><li>另一种做法是先在粉板上记下这次的账，等打烊以后再把账本翻出来核算。</li></ol><p>在生意红火柜台很忙时，掌柜一定会选择后者，因为前者操作实在是太麻烦了。首先，你得找到这个人的赊账总额那条记录。你想想，密密麻麻几十页，掌柜要找到那个名字，可能还得带上老花镜慢慢找，找到之后再拿出算盘计算，最后再将结果写回到账本上。</p><p>这整个过程想想都麻烦。相比之下，还是先在粉板上记一下方便。你想想，如果掌柜没有粉板的帮助，每次记账都得翻账本，效率是不是低得让人难以忍受？</p><p>同样，在 MySQL 里也有这个问题，如果每一次的更新操作都需要写进磁盘，然后磁盘也要找到对应的那条记录，然后再更新，整个过程 IO 成本、查找成本都很高。为了解决这个问题，MySQL 的设计者就用了类似酒店掌柜粉板的思路来提升更新效率。</p><p>而粉板和账本配合的整个过程，其实就是 MySQL 里经常说到的 WAL 技术，WAL 的全称是 Write-Ahead Logging，它的关键点就是先写日志，再写磁盘，也就是先写粉板，等不忙的时候再写账本。</p><p>具体来说，当有一条记录需要更新的时候，InnoDB 引擎就会先把记录写到 redo log（粉板）里面，并更新内存，这个时候更新就算完成了。同时，InnoDB 引擎会在适当的时候，将这个操作记录更新到磁盘里面，而这个更新往往是在系统比较空闲的时候做，这就像打烊以后掌柜做的事。</p><p>如果今天赊账的不多，掌柜可以等打烊后再整理。但如果某天赊账的特别多，粉板写满了，又怎么办呢？这个时候掌柜只好放下手中的活儿，把粉板中的一部分赊账记录更新到账本中，然后把这些记录从粉板上擦掉，为记新账腾出空间。</p><p>与此类似，InnoDB 的 redo log 是固定大小的，比如可以配置为一组 4 个文件，每个文件的大小是 1GB，那么这块“粉板”总共就可以记录 4GB 的操作。从头开始写，写到末尾就又回到开头循环写，如下面这个图所示。</p><p><img src="//javaymw.oss-cn-beijing.aliyuncs.com/static/images/f5d4ff50ca0d405d3dee7564ecfbcfd2.png" alt="redo log.png"></p><p>write pos 是当前记录的位置，一边写一边后移，写到第 3 号文件末尾后就回到 0 号文件开头。checkpoint 是当前要擦除的位置，也是往后推移并且循环的，擦除记录前要把记录更新到数据文件。</p><p>write pos 和 checkpoint 之间的是“粉板”上还空着的部分，可以用来记录新的操作。如果 write pos 追上 checkpoint，表示“粉板”满了，这时候不能再执行新的更新，得停下来先擦掉一些记录，把 checkpoint 推进一下。</p><p>有了 redo log，InnoDB 就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，这个能力称为 crash-safe。</p><p>要理解 crash-safe 这个概念，可以想想我们前面赊账记录的例子。只要赊账记录记在了粉板上或写在了账本上，之后即使掌柜忘记了，比如突然停业几天，恢复生意后依然可以通过账本和粉板上的数据明确赊账账目。</p><h3 id="重要的日志模块：binlog"><a href="#重要的日志模块：binlog" class="headerlink" title="重要的日志模块：binlog"></a>重要的日志模块：binlog</h3><p>前面我们讲过，MySQL 整体来看，其实就有两块：一块是 Server 层，它主要做的是 MySQL 功能层面的事情；还有一块是引擎层，负责存储相关的具体事宜。上面我们聊到的粉板 redo log 是 InnoDB 引擎特有的日志，而 Server 层也有自己的日志，称为 binlog（归档日志）。</p><p>我想你肯定会问，为什么会有两份日志呢？</p><p>因为最开始 MySQL 里并没有 InnoDB 引擎。MySQL 自带的引擎是 MyISAM，但是 MyISAM 没有 crash-safe 的能力，binlog 日志只能用于归档。而 InnoDB 是另一个公司以插件形式引入 MySQL 的，既然只依靠 binlog 是没有 crash-safe 能力的，所以 InnoDB 使用另外一套日志系统——也就是 redo log 来实现 crash-safe 能力。</p><p>这两种日志有以下三点不同。</p><ol><li>redo log 是 InnoDB 引擎特有的；binlog 是 MySQL 的 Server 层实现的，所有引擎都可以使用。</li><li>redo log 是物理日志，记录的是“在某个数据页上做了什么修改”；binlog 是逻辑日志，记录的是这个语句的原始逻辑，比如“给 ID=2 这一行的 c 字段加 1 ”。</li><li>redoredo log 是循环写的，空间固定会用完；binlog 是可以追加写入的。“追加写”是指 binlog 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</li></ol><p>有了对这两个日志的概念性理解，我们再来看执行器和 InnoDB 引擎在执行这个简单的 update 语句时的内部流程。</p><ol><li>执行器先找引擎取 ID=2 这一行。ID 是主键，引擎直接用树搜索找到这一行。如果 ID=2 这一行所在的数据页本来就在内存中，就直接返回给执行器；否则，需要先从磁盘读入内存，然后再返回。 </li><li>执行器拿到引擎给的行数据，把这个值加上 1，比如原来是 N，现在就是 N+1，得到新的一行数据，再调用引擎接口写入这行新数据。</li><li>引擎将这行新数据更新到内存中，同时将这个更新操作记录到 redo log 里面，此时 redo log 处于 prepare 状态。然后告知执行器执行完成了，随时可以提交事务。</li><li>执行器生成这个操作的 binlog，并把 binlog 写入磁盘。</li><li>执行器调用引擎的提交事务接口，引擎把刚刚写入的 redo log 改成提交（commit）状态，更新完成。</li></ol><p>这里我给出这个 update 语句的执行流程图，图中浅色框表示是在 InnoDB 内部执行的，深色框表示是在执行器中执行的。</p><p><img src="//javaymw.oss-cn-beijing.aliyuncs.com/static/images/e23912e106b3c2f15b26e8c9e7e3aba6.png" alt="update 语句的执行流程图.png"></p><p>你可能注意到了，最后三步看上去有点“绕”，将 redo log 的写入拆成了两个步骤：prepare 和 commit，这就是”两阶段提交”。</p><h3 id="两阶段提交"><a href="#两阶段提交" class="headerlink" title="两阶段提交"></a>两阶段提交</h3><p>为什么必须有“两阶段提交”呢？这是为了让两份日志之间的逻辑一致。要说明这个问题，我们得从文章开头的那个问题说起：<strong>怎样让数据库恢复到半个月内任意一秒的状态？</strong></p><p>前面我们说过了，binlog 会记录所有的逻辑操作，并且是采用“追加写”的形式。如果你的 DBA 承诺说半个月内可以恢复，那么备份系统中一定会保存最近半个月的所有 binlog，同时系统会定期做整库备份。这里的“定期”取决于系统的重要性，可以是一天一备，也可以是一周一备。</p><p>当需要恢复到指定的某一秒时，比如某天下午两点发现中午十二点有一次误删表，需要找回数据，那你可以这么做：</p><p>** 首先，找到最近的一次全量备份，如果你运气好，可能就是昨天晚上的一个备份，从这个备份恢复到临时库；<br>** 然后，从备份的时间点开始，将备份的 binlog 依次取出来，重放到中午误删表之前的那个时刻。</p><p>这样你的临时库就跟误删之前的线上库一样了，然后你可以把表数据从临时库取出来，按需要恢复到线上库去。</p><p>好了，说完了数据恢复过程，我们回来说说，为什么日志需要“两阶段提交”。这里不妨用反证法来进行解释。</p><p>由于 redo log 和 binlog 是两个独立的逻辑，如果不用两阶段提交，要么就是先写完 redo log 再写 binlog，或者采用反过来的顺序。我们看看这两种方式会有什么问题。</p><p>仍然用前面的 update 语句来做例子。假设当前 ID=2 的行，字段 c 的值是 0，再假设执行 update 语句过程中在写完第一个日志后，第二个日志还没有写完期间发生了 crash，会出现什么情况呢？</p><ol><li><strong>先写 redo log 后写 binlog。</strong> 假设在 redo log 写完，binlog 还没有写完的时候，MySQL 进程异常重启。由于我们前面说过的，redo log 写完之后，系统即使崩溃，仍然能够把数据恢复回来，所以恢复后这一行 c 的值是 1。但是由于 binlog 没写完就 crash 了，这时候 binlog 里面就没有记录这个语句。因此，之后备份日志的时候，存起来的 binlog 里面就没有这条语句。然后你会发现，如果需要用这个 binlog 来恢复临时库的话，由于这个语句的 binlog 丢失，这个临时库就会少了这一次更新，恢复出来的这一行 c 的值就是 0，与原库的值不同。</li><li><strong>先写 binlog 后写 redo log。</strong> 如果在 binlog 写完之后 crash，由于 redo log 还没写，崩溃恢复以后这个事务无效，所以这一行 c 的值是 0。但是 binlog 里面已经记录了“把 c 从 0 改成 1”这个日志。所以，在之后用 binlog 来恢复的时候就多了一个事务出来，恢复出来的这一行 c 的值就是 1，与原库的值不同。</li></ol><p>可以看到，如果不使用“两阶段提交”，那么数据库的状态就有可能和用它的日志恢复出来的库的状态不一致。</p><p>你可能会说，这个概率是不是很低，平时也没有什么动不动就需要恢复临时库的场景呀？</p><p>其实不是的，不只是误操作后需要用这个过程来恢复数据。当你需要扩容的时候，也就是需要再多搭建一些备库来增加系统的读能力的时候，现在常见的做法也是用全量备份加上应用 binlog 来实现的，这个“不一致”就会导致你的线上出现主从数据库不一致的情况。</p><p>简单说，redo log 和 binlog 都可以用于表示事务的提交状态，而两阶段提交就是让这两个状态保持逻辑上的一致。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>今天，我介绍了 MySQL 里面最重要的两个日志，即物理日志 redo log 和逻辑日志 binlog。</p><p>redo log 用于保证 crash-safe 能力。innodb_flush_log_at_trx_commit 这个参数设置成 1 的时候，表示每次事务的 redo log 都直接持久化到磁盘。这个参数我建议你设置成 1，这样可以保证 MySQL 异常重启之后数据不丢失。</p><p>sync_binlog 这个参数设置成 1 的时候，表示每次事务的 binlog 都持久化到磁盘。这个参数我也建议你设置成 1，这样可以保证 MySQL 异常重启之后 binlog 不丢失。</p><p>我还跟你介绍了与 MySQL 日志系统密切相关的“两阶段提交”。两阶段提交是跨系统维持数据逻辑一致性时常用的一个方案，即使你不做数据库内核开发，日常开发中也有可能会用到。</p><p>文章的最后，我给你留一个思考题吧。前面我说到定期全量备份的周期“取决于系统重要性，有的是一天一备，有的是一周一备”。那么在什么场景下，一天一备会比一周一备更有优势呢？或者说，它影响了这个数据库系统的哪个指标？</p><p>你可以把你的思考和观点写在留言区里，我会在下一篇文章的末尾给出我的答案。</p><p>感谢你的阅读，也欢迎你把这篇文章分享给更多的朋友一起阅读。 </p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01 基础架构：一条SQL查询语句是如何执行的？</title>
      <link href="/2020/03/27/01-%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%EF%BC%9A%E4%B8%80%E6%9D%A1SQL%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84%EF%BC%9F/"/>
      <url>/2020/03/27/01-%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%EF%BC%9A%E4%B8%80%E6%9D%A1SQL%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="01基础架构：一条SQL查询语句是如何执行的？"><a href="#01基础架构：一条SQL查询语句是如何执行的？" class="headerlink" title="01基础架构：一条SQL查询语句是如何执行的？"></a>01基础架构：一条SQL查询语句是如何执行的？</h2><p><img src="https://static001.geekbang.org/resource/image/38/8b/38dd4b12f16d2f9667fb169be0f0698b.jpg" alt="https://static001.geekbang.org/resource/image/38/8b/38dd4b12f16d2f9667fb169be0f0698b.jpg"></p><p>这是专栏的第一篇文章，我想来跟你聊聊 MySQL 的基础架构。我们经常说，看一个事儿千万不要直接陷入细节里，你应该先鸟瞰其全貌，这样能够帮助你从高维度理解问题。同样，对于 MySQL 的学习也是这样。平时我们使用数据库，看到的通常都是一个整体。比如，你有个最简单的表，表里只有一个 ID 字段，在执行下面这个查询语句时：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from T where ID=10；</span><br></pre></td></tr></table></figure><p>我们看到的只是输入一条语句，返回一个结果，却不知道这条语句在 MySQL 内部的执行过程。</p><p>所以今天我想和你一起把 MySQL 拆解一下，看看里面都有哪些“零件”，希望借由这个拆解过程，让你对 MySQL 有更深入的理解。这样当我们碰到 MySQL 的一些异常或者问题时，就能够直戳本质，更为快速地定位并解决问题。</p><p>下面我给出的是 MySQL 的基本架构示意图，从中你可以清楚地看到 SQL 语句在 MySQL 的各个功能模块中的执行过程。<br><img src="//javaymw.oss-cn-beijing.aliyuncs.com/static/images/e40c2ce1dea81a8b143e99d9d192c78f.png" alt="MySQL 的逻辑架构图.png"></p><p>大体来说，MySQL 可以分为 Server 层和存储引擎层两部分。</p><p>Server 层包括连接器、查询缓存、分析器、优化器、执行器等，涵盖 MySQL 的大多数核心服务功能，以及所有的内置函数（如日期、时间、数学和加密函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等。</p><p>而存储引擎层负责数据的存储和提取。其架构模式是插件式的，支持 InnoDB、MyISAM、Memory 等多个存储引擎。现在最常用的存储引擎是 InnoDB，它从 MySQL 5.5.5 版本开始成为了默认存储引擎。</p><p>也就是说，你执行 create table 建表的时候，如果不指定引擎类型，默认使用的就是 InnoDB。不过，你也可以通过指定存储引擎的类型来选择别的引擎，比如在 create table 语句中使用 engine=memory, 来指定使用内存引擎创建表。不同存储引擎的表数据存取方式不同，支持的功能也不同，在后面的文章中，我们会讨论到引擎的选择。</p><p>从图中不难看出，不同的存储引擎共用一个 Server 层，也就是从连接器到执行器的部分。你可以先对每个组件的名字有个印象，接下来我会结合开头提到的那条 SQL 语句，带你走一遍整个执行流程，依次看下每个组件的作用。</p><h3 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h3><p>第一步，你会先连接到这个数据库上，这时候接待你的就是连接器。连接器负责跟客户端建立连接、获取权限、维持和管理连接。连接命令一般是这么写的：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h$ip -P$port -u$user -p</span><br></pre></td></tr></table></figure><p>输完命令之后，你就需要在交互对话里面输入密码。虽然密码也可以直接跟在 -p 后面写在命令行中，但这样可能会导致你的密码泄露。如果你连的是生产服务器，强烈建议你不要这么做。</p><p>连接命令中的 mysql 是客户端工具，用来跟服务端建立连接。在完成经典的 TCP 握手后，连接器就要开始认证你的身份，这个时候用的就是你输入的用户名和密码。</p><ul><li>如果用户名或密码不对，你就会收到一个”Access denied for user”的错误，然后客户端程序结束执行。</li><li>如果用户名或密码不对，你就会收到一个”Access denied for user”的错误，然后客户端程序结束执行。如果用户名密码认证通过，连接器会到权限表里面查出你拥有的权限。之后，这个连接里面的权限判断逻辑，都将依赖于此时读到的权限。</li></ul><p>这就意味着，一个用户成功建立连接后，即使你用管理员账号对这个用户的权限做了修改，也不会影响已经存在连接的权限。修改完成后，只有再新建的连接才会使用新的权限设置。</p><p>连接完成后，如果你没有后续的动作，这个连接就处于空闲状态，你可以在 show processlist 命令中看到它。文本中这个图是 show processlist 的结果，其中的 Command 列显示为“Sleep”的这一行，就表示现在系统里面有一个空闲连接。</p><p><img src="//javaymw.oss-cn-beijing.aliyuncs.com/static/images/ea8f7d0dd3fb6f5683402eec894895b8.png" alt="空闲连接图.png"></p><p>客户端如果太长时间没动静，连接器就会自动将它断开。这个时间是由参数 wait_timeout 控制的，默认值是 8 小时。</p><p>如果在连接被断开之后，客户端再次发送请求的话，就会收到一个错误提醒： Lost connection to MySQL server during query。这时候如果你要继续，就需要重连，然后再执行请求了。</p><p>数据库里面，长连接是指连接成功后，如果客户端持续有请求，则一直使用同一个连接。短连接则是指每次执行完很少的几次查询就断开连接，下次查询再重新建立一个。</p><p>建立连接的过程通常是比较复杂的，所以我建议你在使用中要尽量减少建立连接的动作，也就是尽量使用长连接。</p><p>但是全部使用长连接后，你可能会发现，有些时候 MySQL 占用内存涨得特别快，这是因为 MySQL 在执行过程中临时使用的内存是管理在连接对象里面的。这些资源会在连接断开的时候才释放。所以如果长连接累积下来，可能导致内存占用太大，被系统强行杀掉（OOM），从现象看就是 MySQL 异常重启了。</p><p>怎么解决这个问题呢？你可以考虑以下两种方案。</p><ol><li>定期断开长连接。使用一段时间，或者程序里面判断执行过一个占用内存的大查询后，断开连接，之后要查询再重连。</li><li>如果你用的是 MySQL 5.7 或更新版本，可以在每次执行一个比较大的操作后，通过执行 mysql_reset_connection 来重新初始化连接资源。这个过程不需要重连和重新做权限验证，但是会将连接恢复到刚刚创建完时的状态。</li></ol><h3 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h3><p>连接建立完成后，你就可以执行 select 语句了。执行逻辑就会来到第二步：查询缓存。</p><p>MySQL 拿到一个查询请求后，会先到查询缓存看看，之前是不是执行过这条语句。之前执行过的语句及其结果可能会以 key-value 对的形式，被直接缓存在内存中。key 是查询的语句，value 是查询的结果。如果你的查询能够直接在这个缓存中找到 key，那么这个 value 就会被直接返回给客户端。</p><p>如果语句不在查询缓存中，就会继续后面的执行阶段。执行完成后，执行结果会被存入查询缓存中。你可以看到，如果查询命中缓存，MySQL 不需要执行后面的复杂操作，就可以直接返回结果，这个效率会很高。</p><h3 id="但是大多数情况下我会建议你不要使用查询缓存，为什么呢？因为查询缓存往往弊大于利。"><a href="#但是大多数情况下我会建议你不要使用查询缓存，为什么呢？因为查询缓存往往弊大于利。" class="headerlink" title="但是大多数情况下我会建议你不要使用查询缓存，为什么呢？因为查询缓存往往弊大于利。"></a>但是大多数情况下我会建议你不要使用查询缓存，为什么呢？因为查询缓存往往弊大于利。</h3><p>查询缓存的失效非常频繁，只要有对一个表的更新，这个表上所有的查询缓存都会被清空。因此很可能你费劲地把结果存起来，还没使用呢，就被一个更新全清空了。对于更新压力大的数据库来说，查询缓存的命中率会非常低。除非你的业务就是有一张静态表，很长时间才会更新一次。比如，一个系统配置表，那这张表上的查询才适合使用查询缓存。</p><p>好在 MySQL 也提供了这种“按需使用”的方式。你可以将参数 query_cache_type 设置成 DEMAND，这样对于默认的 SQL 语句都不使用查询缓存。而对于你确定要使用查询缓存的语句，可以用 SQL_CACHE 显式指定，像下面这个语句一样：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select SQL_CACHE * from T where ID=10；</span><br></pre></td></tr></table></figure><p>需要注意的是，MySQL 8.0 版本直接将查询缓存的整块功能删掉了，也就是说 8.0 开始彻底没有这个功能了。</p><h3 id="分析器"><a href="#分析器" class="headerlink" title="分析器"></a>分析器</h3><p>如果没有命中查询缓存，就要开始真正执行语句了。首先，MySQL 需要知道你要做什么，因此需要对 SQL 语句做解析。</p><p>分析器先会做“词法分析”。你输入的是由多个字符串和空格组成的一条 SQL 语句，MySQL 需要识别出里面的字符串分别是什么，代表什么。</p><p>MySQL 从你输入的”select”这个关键字识别出来，这是一个查询语句。它也要把字符串“T”识别成“表名 T”，把字符串“ID”识别成“列 ID”。</p><p>做完了这些识别以后，就要做“语法分析”。根据词法分析的结果，语法分析器会根据语法规则，判断你输入的这个 SQL 语句是否满足 MySQL 语法。</p><p>如果你的语句不对，就会收到“You have an error in your SQL syntax”的错误提醒，比如下面这个语句 select 少打了开头的字母“s”。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; elect * from t where ID=1;</span><br><span class="line"></span><br><span class="line">ERROR 1064 (42000): You have an error in your SQL syntax; <span class="keyword">check</span> the <span class="keyword">manual</span> that corresponds <span class="keyword">to</span> your MySQL <span class="keyword">server</span> <span class="keyword">version</span> <span class="keyword">for</span> the <span class="keyword">right</span> syntax <span class="keyword">to</span> <span class="keyword">use</span> near <span class="string">'elect * from t where ID=1'</span> <span class="keyword">at</span> line <span class="number">1</span></span><br></pre></td></tr></table></figure><p>一般语法错误会提示第一个出现错误的位置，所以你要关注的是紧接“use near”的内容。</p><h3 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h3><p>经过了分析器，MySQL 就知道你要做什么了。在开始执行之前，还要先经过优化器的处理。</p><p>优化器是在表里面有多个索引的时候，决定使用哪个索引；或者在一个语句有多表关联（join）的时候，决定各个表的连接顺序。比如你执行下面这样的语句，这个语句是执行两个表的 join:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from t1 join t2 using(ID) where t1.c=10 and t2.d=20;</span><br></pre></td></tr></table></figure><p>1.既可以先从表 t1 里面取出 c=10 的记录的 ID 值，再根据 ID 值关联到表 t2，再判断 t2 里面 d 的值是否等于 20。<br>2.也可以先从表 t2 里面取出 d=20 的记录的 ID 值，再根据 ID 值关联到 t1，再判断 t1 里面 c 的值是否等于 10。</p><p>这两种执行方法的逻辑结果是一样的，但是执行的效率会有不同，而优化器的作用就是决定选择使用哪一个方案。</p><p>优化器阶段完成后，这个语句的执行方案就确定下来了，然后进入执行器阶段。如果你还有一些疑问，比如优化器是怎么选择索引的，有没有可能选择错等等，没关系，我会在后面的文章中单独展开说明优化器的内容。</p><h3 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h3><p>MySQL 通过分析器知道了你要做什么，通过优化器知道了该怎么做，于是就进入了执行器阶段，开始执行语句。</p><p>开始执行的时候，要先判断一下你对这个表 T 有没有执行查询的权限，如果没有，就会返回没有权限的错误，如下所示 (在工程实现上，如果命中查询缓存，会在查询缓存返回结果的时候，做权限验证。查询也会在优化器之前调用 precheck 验证权限)。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from T where ID=10;</span><br><span class="line"></span><br><span class="line">ERROR 1142 (42000): <span class="keyword">SELECT</span> command denied <span class="keyword">to</span> <span class="keyword">user</span> <span class="string">'b'</span>@<span class="string">'localhost'</span> <span class="keyword">for</span> <span class="keyword">table</span> <span class="string">'T'</span></span><br></pre></td></tr></table></figure><p>如果有权限，就打开表继续执行。打开表的时候，执行器就会根据表的引擎定义，去使用这个引擎提供的接口。</p><p>比如我们这个例子中的表 T 中，ID 字段没有索引，那么执行器的执行流程是这样的：<br>1.调用 InnoDB 引擎接口取这个表的第一行，判断 ID 值是不是 10，如果不是则跳过，如果是则将这行存在结果集中；<br>2.调用引擎接口取“下一行”，重复相同的判断逻辑，直到取到这个表的最后一行。<br>3.执行器将上述遍历过程中所有满足条件的行组成的记录集作为结果集返回给客户端。</p><p>至此，这个语句就执行完成了。</p><p>对于有索引的表，执行的逻辑也差不多。第一次调用的是“取满足条件的第一行”这个接口，之后循环取“满足条件的下一行”这个接口，这些接口都是引擎中已经定义好的。</p><p>你会在数据库的慢查询日志中看到一个 rows_examined 的字段，表示这个语句执行过程中扫描了多少行。这个值就是在执行器每次调用引擎获取数据行的时候累加的。</p><p>在有些场景下，执行器调用一次，在引擎内部则扫描了多行，因此<strong>引擎扫描行数跟 rows_examined 并不是完全相同的。</strong>我们后面会专门有一篇文章来讲存储引擎的内部机制，里面会有详细的说明。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>今天我给你介绍了 MySQL 的逻辑架构，希望你对一个 SQL 语句完整执行流程的各个阶段有了一个初步的印象。由于篇幅的限制，我只是用一个查询的例子将各个环节过了一遍。如果你还对每个环节的展开细节存有疑问，也不用担心，后续在实战章节中我还会再提到它们。</p><p>我给你留一个问题吧，如果表 T 中没有字段 k，而你执行了这个语句 select * from T where k=1, 那肯定是会报“不存在这个列”的错误： “Unknown column ‘k’ in ‘where clause’”。你觉得这个错误是在我们上面提到的哪个阶段报出来的呢？</p><p>感谢你的阅读，欢迎你给我留言，也欢迎分享给更多的朋友一起阅读。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开篇词  这一次，让我们一起来搞懂MySQL</title>
      <link href="/2020/03/27/%E5%BC%80%E7%AF%87%E8%AF%8D-%E8%BF%99%E4%B8%80%E6%AC%A1%EF%BC%8C%E8%AE%A9%E6%88%91%E4%BB%AC%E4%B8%80%E8%B5%B7%E6%9D%A5%E6%90%9E%E6%87%82MySQL/"/>
      <url>/2020/03/27/%E5%BC%80%E7%AF%87%E8%AF%8D-%E8%BF%99%E4%B8%80%E6%AC%A1%EF%BC%8C%E8%AE%A9%E6%88%91%E4%BB%AC%E4%B8%80%E8%B5%B7%E6%9D%A5%E6%90%9E%E6%87%82MySQL/</url>
      
        <content type="html"><![CDATA[<h2 id="开篇词-这一次，让我们一起来搞懂MySQL"><a href="#开篇词-这一次，让我们一起来搞懂MySQL" class="headerlink" title="开篇词 | 这一次，让我们一起来搞懂MySQL"></a>开篇词 | 这一次，让我们一起来搞懂MySQL</h2><p><img src="https://static001.geekbang.org/resource/image/58/de/586df7bffcd89e32f9ec7b144bf0a4de.jpg" alt="https://static001.geekbang.org/resource/image/58/de/586df7bffcd89e32f9ec7b144bf0a4de.jpg"></p><p>你好，我是林先生，欢迎加入我的专栏，和我一起开始 MySQL 学习之旅。我曾先后在百度和阿里任职，从事 MySQL 数据库方面的工作，一步步地从一个数据库小白成为 MySQL 内核开发人员。回想起来，从我第一次带着疑问翻 MySQL 的源码查到答案至今，已经有十个年头了。在这个过程中，走了不少弯路，但同时也收获了很多的知识和思考，希望能在这个专栏里分享给你。</p><p>记得刚开始接触 MySQL，是我在百度贴吧做权限系统的时候。我们遇到了一个奇怪的问题，一个正常 10 毫秒就能完成的 SQL 查询请求偶尔要执行 100 多毫秒才结束。当时主管问我是什么原因，我其实也搞不清楚，就上网查答案，但怎么找都找不到，又脸皮薄不想说自己不知道，只好硬着头皮翻源码。后来遇到了越来越多的问题，也是类似的情景，所以我逐步养成了通过分析源码理解原理的习惯。</p><p>当时，我自己的感觉是，即使我只是一个开发工程师，只是 MySQL 的用户，在了解了一个个系统模块的原理后，再来使用它，感觉是完全不一样的。当在代码里写下一行数据库命令的时候，我就能想到它在数据库端将怎么执行，它的性能是怎么样的，怎样写能让我的应用程序访问数据库的性能最高。进一步，哪些数据处理让数据库系统来做性能会更好，哪些数据处理在缓存里做性能会更好，我心里也会更清楚。在建表和建索引的时候，我也会更有意识地为将来的查询优化做综合考虑，比如确定是否使用递增主键、主键的列怎样选择，等等。</p><p>但随后我又有了一个新的困惑，我觉得自己了解的 MySQL 知识点是零散的，没有形成网络。于是解决完一个问题后，很容易忘记。再碰到类似的问题，我又得再翻一次代码。</p><p>所幸在阿里工作的时候，我参与了阿里云关系型数据库服务内核的开发，并且负责开发开源分支 AliSQL，让我对 MySQL 内核和源码有了更深层次的研究和理解。在服务内部客户和公有云客户的过程中，我有机会面对和解决足够多的问题，再通过手册进行系统的学习，算是比较坎坷地将 MySQL 的知识网络补了起来。</p><p>所以，在回顾这个过程的时候，我的第一个感受是，如果一开始就有一些从理论到实战的系统性指导，那该多好啊，也许我可以学习得更快些。</p><p>在xxxx团队跟我联系策划这个专栏的时候，我还是持怀疑态度的。为什么呢？现在不比当年了，犹记得十余年前，你使用 MySQL 的过程中碰到问题的话，基本上都只能到代码里去找答案，因为那时网上的资料太少了。</p><p>而近十年来，MySQL 在中国广泛普及，技术分享文章可以说是浩如烟海。所以，现在要系统地介绍一遍 MySQL 的话，恐怕里面提及的大多数知识点，都可以在社区文章中找到。那么我们做这个专栏的意义在哪里，而它又凭什么可以收费呢？</p><p>直到收到xxxx团队的答复，我才开始对这个专栏“想做和可以做”的事情感觉清晰起来。数据库是一个综合系统，其背后是发展了几十年的数据库理论。同时，数据库系统也是一个应用系统，可能一个业务开发人员用了两三年 MySQL，还未必清楚那些自己一直在用的“最佳实践”为什么是最佳的。</p><p>于是，我希望这个专栏能够帮助这样的一些开发者：他们正在使用 MySQL，知道如何写出逻辑正确的 SQL 语句来实现业务目标，却不确定这个语句是不是最优的；他们听说了一些使用数据库的最佳实践，但是更想了解为什么这么做；他们使用的数据库偶尔会出问题，亟需了解如何更快速、更准确地定位问题，甚至自己解决问题……</p><p>在过去的七年里，我带过十几个应届毕业生，看着他们成长，要求他们原理先行，再实践验证。几年下来，他们的成长速度都很快，其中好几个毕业没两年就成为团队的骨干力量了。我也在社招的时候面试过很多有着不错的运维实践经验和能力的候选人，但都因为对数据库原理仅有一知半解的了解，而最终遗憾地没有通过面试。</p><p>因此，我希望这个专栏能够激发开发者对数据库原理的探索欲，从而更好地理解工作中遇到的问题，更能知道背后的为什么。所以我会选那些平时使用数据库时高频出现的知识，如事务、索引、锁等内容构成专栏的主线。这些主线上是一个个的知识点。每个点就是一个概念、一个机制或者一个原理说明。在每个说明之后，我会和你讨论一个实践相关的问题。</p><p>希望能以这样的方式，让你对 MySQL 的几条主线有一个整体的认识，并且了解基本概念。在之后的实践篇中，我会引用到这些主线的知识背景，并着力说明它们是怎样指导实践的。这样，你可以从点到线，再到面，形成自己的 MySQL 知识网络。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云服务器、CentOS7开启、关闭防火墙命令</title>
      <link href="/2020/03/23/Untitled%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E3%80%81CentOS7%E5%BC%80%E5%90%AF%E3%80%81%E5%85%B3%E9%97%AD%E9%98%B2%E7%81%AB%E5%A2%99%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/03/23/Untitled%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E3%80%81CentOS7%E5%BC%80%E5%90%AF%E3%80%81%E5%85%B3%E9%97%AD%E9%98%B2%E7%81%AB%E5%A2%99%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="CentOS7使用的是firewall防火墙，不再是原来的iptables"><a href="#CentOS7使用的是firewall防火墙，不再是原来的iptables" class="headerlink" title="CentOS7使用的是firewall防火墙，不再是原来的iptables"></a>CentOS7使用的是firewall防火墙，不再是原来的iptables</h3><p><strong>1：查看firewall防火墙状态</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --state</span><br></pre></td></tr></table></figure><p><strong>或者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure><p><strong>2：打开防火墙</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start firewalld</span><br></pre></td></tr></table></figure><p><strong>3：关闭防火墙</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure><p><strong>4：重启防火墙</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --relaod</span><br></pre></td></tr></table></figure><p><strong>或者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl reload firewalld</span><br></pre></td></tr></table></figure><p><strong>5：开机自启动防火墙</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable firewalld</span><br></pre></td></tr></table></figure><p><strong>6：禁止开机启动防火墙</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure><p><strong>6：查看已打开的端口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --list-ports</span><br></pre></td></tr></table></figure><p><strong>7：打开端口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --zone=<span class="keyword">public</span> --add-port=<span class="number">8080</span>/tcp</span><br></pre></td></tr></table></figure><p>其中permanent表示永久生效，public表示作用域，8080/tcp表示端口和类型</p><p><strong>8：关闭端口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --zone=<span class="keyword">public</span> --remove-port=<span class="number">8080</span>/tcp</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CentOS7防火墙 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阿里云服务器 </tag>
            
            <tag> CentOS8 </tag>
            
            <tag> 防火墙开启关闭 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之把格林威治时间格式转换成北京时间格式</title>
      <link href="/2020/03/23/Java%E4%B9%8B%E6%8A%8A%E6%A0%BC%E6%9E%97%E5%A8%81%E6%B2%BB%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2%E6%88%90%E5%8C%97%E4%BA%AC%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F/"/>
      <url>/2020/03/23/Java%E4%B9%8B%E6%8A%8A%E6%A0%BC%E6%9E%97%E5%A8%81%E6%B2%BB%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2%E6%88%90%E5%8C%97%E4%BA%AC%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="Java之格林威治时间格式转换成北京时间格式"><a href="#Java之格林威治时间格式转换成北京时间格式" class="headerlink" title="Java之格林威治时间格式转换成北京时间格式"></a>Java之格林威治时间格式转换成北京时间格式</h2><p>摘要：日常工作中，我们经常会遇到这样的需要，默认的java获取的时间是格林威治格式的，需要转换成正常格式，那么可以通过下面的方式实现，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Copyright 2020. yaodouwang.com Studio All Right Reserved</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Create on 03-23 12:45</span></span><br><span class="line"><span class="comment"> * Created by zhaoxinguo</span></span><br><span class="line"><span class="comment"> * Version 2.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.mtons.mblog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.TimeZone;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Java之格林威治时间格式转换成北京时间格式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaoxinguo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/3/23 12:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支持jdk1.6的写法&lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * 解析2015-12-27T14:20:34+08:00格式类型的时间&lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * 将2015-12-27T14:20:34+08:00转换成2015-12-27 14:20:34&lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getTimestampTimeV16</span><span class="params">(String str)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd'T'HH:mm:ss"</span>);</span><br><span class="line">        TimeZone tz = TimeZone.getTimeZone(<span class="string">"Asia/Shanghai"</span>);</span><br><span class="line">        sdf.setTimeZone(tz);</span><br><span class="line">        Date date = sdf.parse(str);</span><br><span class="line">        String string = date.toString();</span><br><span class="line">        <span class="keyword">return</span> string;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支持jdk1.7的写法&lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * 解析2015-12-27T14:20:34+08:00格式类型的时间&lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * 将2015-12-27T14:20:34+08:00转换成2015-12-27 14:20:34&lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getTimestampTimeV17</span><span class="params">(String str)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd'T'HH:mm:ssXXX"</span>);</span><br><span class="line">        Date date = sdf.parse(str);</span><br><span class="line">        String string = date.toString();</span><br><span class="line">        <span class="keyword">return</span> string;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将1464166640(当前时间的秒)转换成：yyyy-MM-dd HH:mm:ss格式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getTimeToDay</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date(<span class="number">1464166640L</span>*<span class="number">1000</span>);</span><br><span class="line">        SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</span><br><span class="line">        <span class="keyword">return</span> format.format(date);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 时间转换 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 时间转换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据操作日志记录表设计、可以查询、恢复历史数据记录</title>
      <link href="/2020/03/20/%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%E8%A1%A8%E8%AE%BE%E8%AE%A1%E3%80%81%E5%8F%AF%E4%BB%A5%E6%9F%A5%E8%AF%A2%E3%80%81%E6%81%A2%E5%A4%8D%E5%8E%86%E5%8F%B2%E6%95%B0%E6%8D%AE%E8%AE%B0%E5%BD%95/"/>
      <url>/2020/03/20/%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%E8%A1%A8%E8%AE%BE%E8%AE%A1%E3%80%81%E5%8F%AF%E4%BB%A5%E6%9F%A5%E8%AF%A2%E3%80%81%E6%81%A2%E5%A4%8D%E5%8E%86%E5%8F%B2%E6%95%B0%E6%8D%AE%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h4 id="数据操作日志记录表设计、可以查询、恢复历史数据记录"><a href="#数据操作日志记录表设计、可以查询、恢复历史数据记录" class="headerlink" title="数据操作日志记录表设计、可以查询、恢复历史数据记录"></a>数据操作日志记录表设计、可以查询、恢复历史数据记录</h4><hr><p><strong>摘要</strong>：在日常开发中，我们经常会遇到这样的需求，产品希望用户对业务系统的所有操作都做日志记录，尤其是涉及到修改、删除的时候，更应该，因为用户在操作系统的过程中难免会误操作，这时候，就需要有个可以让用户一键恢复的操作了，有了这个操作，再也不用担心误操作了，下面我们看下具体的业务流程和数据库设计。</p><hr><p><strong>产品</strong>：首先我们看下产品的设计图，如下图：<br><img src="https://img-blog.csdnimg.cn/20191031165823329.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N4ZHR6aGFveGluZ3Vv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这里就可以看到，上面是操作输入框，下面是可以一键恢复的日志记录。</p><hr><p><strong>数据库设计</strong>：上面我们看了产品的设计图，下面我再看下具体的数据库设计结构，见下图：</p><p><img src="https://img-blog.csdnimg.cn/20191031170022816.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N4ZHR6aGFveGluZ3Vv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>看完上面的数据库设计结构图，是不是思路很清晰了呢，以上就是我对数据操作日志记录设计的见解，仅供参考。</p>]]></content>
      
      
      <categories>
          
          <category> 日志记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之线程池</title>
      <link href="/2020/03/20/Java%E4%B9%8B%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
      <url>/2020/03/20/Java%E4%B9%8B%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><p>[TOC]</p><h2 id="线程池概述"><a href="#线程池概述" class="headerlink" title="线程池概述"></a>线程池概述</h2><ul><li><p>什么是线程池</p></li><li><p>为什么使用线程池</p></li><li><p>线程池的优势</p><ul><li><p>第一：降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</p></li><li><p>第二：提高响应速度。当任务到达时，任务可以不需要的等到线程创建就能立即执行。</p></li><li><p>第三：提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。但是要做到合理的利用线程池，必须对其原理了如指掌。</p></li></ul></li></ul><h2 id="创建一个线程池并提交线程任务"><a href="#创建一个线程池并提交线程任务" class="headerlink" title="创建一个线程池并提交线程任务"></a>创建一个线程池并提交线程任务</h2><h2 id="线程池源码解析"><a href="#线程池源码解析" class="headerlink" title="线程池源码解析"></a>线程池源码解析</h2><h3 id="参数认识"><a href="#参数认识" class="headerlink" title="参数认识"></a>参数认识</h3><ol><li><p>corePoolSize : 线程池的基本大小，当提交一个任务到线程池时，线程池会创建一个线程来执行任务，即使其他空闲的基本线程能够执行新任务也会创建线程，等到需要执行的任务数大于线程池基本大小时就不再创建。如果调用了线程池的prestartAllCoreThreads方法，线程池会提前创建并启动所有基本线程。</p></li><li><p>runnableTaskQueue：任务对列，用于保存等待执行的任务的阻塞队列。可以选择以下几个阻塞队列。</p></li></ol><ul><li><p>ArrayBlockingQueue：是一个基于数组结构的有界阻塞队列，此队列按 FIFO（先进先出）原则对元素进行排序。</p></li><li><p>LinkedBlockingQueue：一个基于链表结构的阻塞队列，此队列按FIFO （先进先出） 排序元素，吞吐量通常要高于ArrayBlockingQueue。静态工厂方法Executors.newFixedThreadPool()使用了这个队列。</p></li><li><p>SynchronousQueue：一个不存储元素的阻塞队列。每个插入操作必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态，吞吐量通常要高于LinkedBlockingQueue，静态工厂方法Executors.newCachedThreadPool使用了这个队列。</p></li><li><p>PriorityBlockingQueue：一个具有优先级得无限阻塞队列。</p></li></ul><ol start="3"><li><p>maximumPoolSize：线程池最大大小，线程池允许创建的最大线程数。如果队列满了，并且已创建的线程数小于最大线程数，则线程池会再创建新的线程执行任务。值得注意的是如果使用了无界的任务队列这个参数就没什么效果。</p></li><li><p>ThreadFactory：用于设置创建线程的工厂，可以通过线程工厂给每个创建出来的线程设置更有意义的名字，Debug和定位问题时非常又帮助。</p></li><li><p>RejectedExecutionHandler（饱和策略）：当队列和线程池都满了，说明线程池处于饱和状态，那么必须采取一种策略处理提交的新任务。这个策略默认情况下是AbortPolicy，表示无法处理新任务时抛出异常。</p></li></ol><ul><li><p>CallerRunsPolicy：只用调用者所在线程来运行任务。</p></li><li><p>DiscardOldestPolicy：丢弃队列里最近的一个任务，并执行当前任务。</p></li><li><p>DiscardPolicy：不处理，丢弃掉。</p></li><li><p>当然也可以根据应用场景需要来实现RejectedExecutionHandler接口自定义策略。如记录日志或持久化不能处理的任务。</p></li></ul><ol start="6"><li><p>keepAliveTime ：线程活动保持时间，线程池的工作线程空闲后，保持存活的时间。所以如果任务很多，并且每个任务执行的时间比较短，可以调大这个时间，提高线程的利用率。</p></li><li><p>TimeUnit：线程活动保持时间的单位，可选的单位有天（DAYS），小时（HOURS），分钟（MINUTES），毫秒(MILLISECONDS)，微秒(MICROSECONDS, 千分之一毫秒)和毫微秒(NANOSECONDS, 千分之一微秒)。</p></li><li><p>类中其他属性</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="comment">// 线程池的控制状态:用来表示线程池的运行状态（整型的高3位）和运行的worker数量（低29位）</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger ctl = <span class="keyword">new</span> AtomicInteger(ctlOf(RUNNING, <span class="number">0</span>));</span><br><span class="line"> <span class="comment">// 29位的偏移量</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COUNT_BITS = Integer.SIZE - <span class="number">3</span>;</span><br><span class="line"> <span class="comment">// 最大容量（2^29 - 1）</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CAPACITY   = (<span class="number">1</span> &lt;&lt; COUNT_BITS) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// runState is stored in the high-order bits</span></span><br><span class="line"> <span class="comment">// 线程运行状态，总共有5个状态，需要3位来表示（所以偏移量的29 = 32 - 3）</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RUNNING    :    接受新任务并且处理已经进入阻塞队列的任务</span></span><br><span class="line"><span class="comment"> * SHUTDOWN    ：    不接受新任务，但是处理已经进入阻塞队列的任务</span></span><br><span class="line"><span class="comment"> * STOP        :    不接受新任务，不处理已经进入阻塞队列的任务并且中断正在运行的任务</span></span><br><span class="line"><span class="comment"> * TIDYING    :    所有的任务都已经终止，workerCount为0， 线程转化为TIDYING状态并且调用terminated钩子函数</span></span><br><span class="line"><span class="comment"> * TERMINATED:    terminated钩子函数已经运行完成</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RUNNING    = -<span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SHUTDOWN   =  <span class="number">0</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STOP       =  <span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TIDYING    =  <span class="number">2</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TERMINATED =  <span class="number">3</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"> <span class="comment">// 阻塞队列</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> BlockingQueue&lt;Runnable&gt; workQueue;</span><br><span class="line"> <span class="comment">// 可重入锁</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"> <span class="comment">// 存放工作线程集合</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> HashSet&lt;Worker&gt; workers = <span class="keyword">new</span> HashSet&lt;Worker&gt;();</span><br><span class="line"> <span class="comment">// 终止条件</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> Condition termination = mainLock.newCondition();</span><br><span class="line"> <span class="comment">// 最大线程池容量</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">int</span> largestPoolSize;</span><br><span class="line"> <span class="comment">// 已完成任务数量</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">long</span> completedTaskCount;</span><br><span class="line"> <span class="comment">// 线程工厂</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">volatile</span> ThreadFactory threadFactory;</span><br><span class="line"> <span class="comment">// 拒绝执行处理器</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">volatile</span> RejectedExecutionHandler handler;</span><br><span class="line"> <span class="comment">// 线程等待运行时间</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">long</span> keepAliveTime;</span><br><span class="line"> <span class="comment">// 是否运行核心线程超时</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> allowCoreThreadTimeOut;</span><br><span class="line"> <span class="comment">// 核心池的大小</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> corePoolSize;</span><br><span class="line"> <span class="comment">// 最大线程池大小</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> maximumPoolSize;</span><br><span class="line"> <span class="comment">// 默认拒绝执行处理器</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> RejectedExecutionHandler defaultHandler =</span><br><span class="line">     <span class="keyword">new</span> AbortPolicy();</span><br></pre></td></tr></table></figure><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                          TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                          ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                          RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||                                                <span class="comment">// 核心大小不能小于0</span></span><br><span class="line">        maximumPoolSize &lt;= <span class="number">0</span> ||                                            <span class="comment">// 线程池的初始最大容量不能小于0</span></span><br><span class="line">        maximumPoolSize &lt; corePoolSize ||                                <span class="comment">// 初始最大容量不能小于核心大小</span></span><br><span class="line">        keepAliveTime &lt; <span class="number">0</span>)                                                <span class="comment">// keepAliveTime不能小于0</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();                                </span><br><span class="line">    <span class="keyword">if</span> (workQueue == <span class="keyword">null</span> || threadFactory == <span class="keyword">null</span> || handler == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="comment">// 初始化相应的域</span></span><br><span class="line">    <span class="keyword">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">    <span class="keyword">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">    <span class="keyword">this</span>.workQueue = workQueue;</span><br><span class="line">    <span class="keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">    <span class="keyword">this</span>.threadFactory = threadFactory;</span><br><span class="line">    <span class="keyword">this</span>.handler = handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="提交任务"><a href="#提交任务" class="headerlink" title="提交任务"></a>提交任务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 进行下面三步</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 1. 如果运行的线程小于corePoolSize,则尝试使用用户定义的Runnalbe对象创建一个新的线程</span></span><br><span class="line"><span class="comment">*     调用addWorker函数会原子性的检查runState和workCount，通过返回false来防止在不应</span></span><br><span class="line"><span class="comment">*     该添加线程时添加了线程</span></span><br><span class="line"><span class="comment">* 2. 如果一个任务能够成功入队列，在添加一个线城时仍需要进行双重检查（因为在前一次检查后</span></span><br><span class="line"><span class="comment">*     该线程死亡了），或者当进入到此方法时，线程池已经shutdown了，所以需要再次检查状态，</span></span><br><span class="line"><span class="comment">*    若有必要，当停止时还需要回滚入队列操作，或者当线程池没有线程时需要创建一个新线程</span></span><br><span class="line"><span class="comment">* 3. 如果无法入队列，那么需要增加一个新线程，如果此操作失败，那么就意味着线程池已经shut</span></span><br><span class="line"><span class="comment">*     down或者已经饱和了，所以拒绝任务</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (command == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="comment">// 获取线程池控制状态</span></span><br><span class="line">    <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">    <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123; <span class="comment">// worker数量小于corePoolSize</span></span><br><span class="line">        <span class="keyword">if</span> (addWorker(command, <span class="keyword">true</span>)) <span class="comment">// 添加worker</span></span><br><span class="line">            <span class="comment">// 成功则返回</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// 不成功则再次获取线程池控制状态</span></span><br><span class="line">        c = ctl.get();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 线程池处于RUNNING状态，将用户自定义的Runnable对象添加进workQueue队列</span></span><br><span class="line">    <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123; </span><br><span class="line">        <span class="comment">// 再次检查，获取线程池控制状态</span></span><br><span class="line">        <span class="keyword">int</span> recheck = ctl.get();</span><br><span class="line">        <span class="comment">// 线程池不处于RUNNING状态，将自定义任务从workQueue队列中移除</span></span><br><span class="line">        <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command)) </span><br><span class="line">            <span class="comment">// 拒绝执行命令</span></span><br><span class="line">            reject(command);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>) <span class="comment">// worker数量等于0</span></span><br><span class="line">            <span class="comment">// 添加worker</span></span><br><span class="line">            addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="keyword">false</span>)) <span class="comment">// 添加worker失败</span></span><br><span class="line">        <span class="comment">// 拒绝执行命令</span></span><br><span class="line">        reject(command);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="addWorker"><a href="#addWorker" class="headerlink" title="addWorker"></a>addWorker</h4><ol><li><p>原子性的增加workerCount。</p></li><li><p>将用户给定的任务封装成为一个worker，并将此worker添加进workers集合中。</p></li><li><p>启动worker对应的线程，并启动该线程，运行worker的run方法。</p></li><li><p>回滚worker的创建动作，即将worker从workers集合中删除，并原子性的减少workerCount。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">addWorker</span><span class="params">(Runnable firstTask, <span class="keyword">boolean</span> core)</span> </span>&#123;</span><br><span class="line">    retry:</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123; <span class="comment">// 外层无限循环</span></span><br><span class="line">        <span class="comment">// 获取线程池控制状态</span></span><br><span class="line">        <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">        <span class="comment">// 获取状态</span></span><br><span class="line">        <span class="keyword">int</span> rs = runStateOf(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check if queue empty only if necessary.</span></span><br><span class="line">        <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp;            <span class="comment">// 状态大于等于SHUTDOWN，初始的ctl为RUNNING，小于SHUTDOWN</span></span><br><span class="line">            ! (rs == SHUTDOWN &amp;&amp;        <span class="comment">// 状态为SHUTDOWN</span></span><br><span class="line">               firstTask == <span class="keyword">null</span> &amp;&amp;        <span class="comment">// 第一个任务为null</span></span><br><span class="line">               ! workQueue.isEmpty()))     <span class="comment">// worker队列不为空</span></span><br><span class="line">            <span class="comment">// 返回</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="comment">// worker数量</span></span><br><span class="line">            <span class="keyword">int</span> wc = workerCountOf(c);</span><br><span class="line">            <span class="keyword">if</span> (wc &gt;= CAPACITY ||                                <span class="comment">// worker数量大于等于最大容量</span></span><br><span class="line">                wc &gt;= (core ? corePoolSize : maximumPoolSize))    <span class="comment">// worker数量大于等于核心线程池大小或者最大线程池大小</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (compareAndIncrementWorkerCount(c))                 <span class="comment">// 比较并增加worker的数量</span></span><br><span class="line">                <span class="comment">// 跳出外层循环</span></span><br><span class="line">                <span class="keyword">break</span> retry;</span><br><span class="line">            <span class="comment">// 获取线程池控制状态</span></span><br><span class="line">            c = ctl.get();  <span class="comment">// Re-read ctl</span></span><br><span class="line">            <span class="keyword">if</span> (runStateOf(c) != rs) <span class="comment">// 此次的状态与上次获取的状态不相同</span></span><br><span class="line">                <span class="comment">// 跳过剩余部分，继续循环</span></span><br><span class="line">                <span class="keyword">continue</span> retry;</span><br><span class="line">            <span class="comment">// else CAS failed due to workerCount change; retry inner loop</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// worker开始标识</span></span><br><span class="line">    <span class="keyword">boolean</span> workerStarted = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">// worker被添加标识</span></span><br><span class="line">    <span class="keyword">boolean</span> workerAdded = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    Worker w = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化worker</span></span><br><span class="line">        w = <span class="keyword">new</span> Worker(firstTask);</span><br><span class="line">        <span class="comment">// 获取worker对应的线程</span></span><br><span class="line">        <span class="keyword">final</span> Thread t = w.thread;</span><br><span class="line">        <span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123; <span class="comment">// 线程不为null</span></span><br><span class="line">            <span class="comment">// 线程池锁</span></span><br><span class="line">            <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">            <span class="comment">// 获取锁</span></span><br><span class="line">            mainLock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// Recheck while holding lock.</span></span><br><span class="line">                <span class="comment">// Back out on ThreadFactory failure or if</span></span><br><span class="line">                <span class="comment">// shut down before lock acquired.</span></span><br><span class="line">                <span class="comment">// 线程池的运行状态</span></span><br><span class="line">                <span class="keyword">int</span> rs = runStateOf(ctl.get());</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (rs &lt; SHUTDOWN ||                                    <span class="comment">// 小于SHUTDOWN</span></span><br><span class="line">                    (rs == SHUTDOWN &amp;&amp; firstTask == <span class="keyword">null</span>)) &#123;            <span class="comment">// 等于SHUTDOWN并且firstTask为null</span></span><br><span class="line">                    <span class="keyword">if</span> (t.isAlive()) <span class="comment">// precheck that t is startable    // 线程刚添加进来，还未启动就存活</span></span><br><span class="line">                        <span class="comment">// 抛出线程状态异常</span></span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</span><br><span class="line">                    <span class="comment">// 将worker添加到worker集合</span></span><br><span class="line">                    workers.add(w);</span><br><span class="line">                    <span class="comment">// 获取worker集合的大小</span></span><br><span class="line">                    <span class="keyword">int</span> s = workers.size();</span><br><span class="line">                    <span class="keyword">if</span> (s &gt; largestPoolSize) <span class="comment">// 队列大小大于largestPoolSize</span></span><br><span class="line">                        <span class="comment">// 重新设置largestPoolSize</span></span><br><span class="line">                        largestPoolSize = s;</span><br><span class="line">                    <span class="comment">// 设置worker已被添加标识</span></span><br><span class="line">                    workerAdded = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">// 释放锁</span></span><br><span class="line">                mainLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (workerAdded) &#123; <span class="comment">// worker被添加</span></span><br><span class="line">                <span class="comment">// 开始执行worker的run方法</span></span><br><span class="line">                t.start();</span><br><span class="line">                <span class="comment">// 设置worker已开始标识</span></span><br><span class="line">                workerStarted = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (! workerStarted) <span class="comment">// worker没有开始</span></span><br><span class="line">            <span class="comment">// 添加worker失败</span></span><br><span class="line">            addWorkerFailed(w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> workerStarted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行任务"><a href="#执行任务" class="headerlink" title="执行任务"></a>执行任务</h3><p>runWorker函数中会实际执行给定任务（即调用用户重写的run方法），并且当给定任务完成后，会继续从阻塞队列中取任务，直到阻塞队列为空（即任务全部完成）。在执行给定任务时，会调用钩子函数，利用钩子函数可以完成用户自定义的一些逻辑。在runWorker中会调用到getTask函数和processWorkerExit钩子函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">runWorker</span><span class="params">(Worker w)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取当前线程</span></span><br><span class="line">    Thread wt = Thread.currentThread();</span><br><span class="line">    <span class="comment">// 获取w的firstTask</span></span><br><span class="line">    Runnable task = w.firstTask;</span><br><span class="line">    <span class="comment">// 设置w的firstTask为null</span></span><br><span class="line">    w.firstTask = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 释放锁（设置state为0，允许中断）</span></span><br><span class="line">    w.unlock(); <span class="comment">// allow interrupts</span></span><br><span class="line">    <span class="keyword">boolean</span> completedAbruptly = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (task != <span class="keyword">null</span> || (task = getTask()) != <span class="keyword">null</span>) &#123; <span class="comment">// 任务不为null或者阻塞队列还存在任务</span></span><br><span class="line">            <span class="comment">// 获取锁</span></span><br><span class="line">            w.lock();</span><br><span class="line">            <span class="comment">// If pool is stopping, ensure thread is interrupted;</span></span><br><span class="line">            <span class="comment">// if not, ensure thread is not interrupted.  This</span></span><br><span class="line">            <span class="comment">// requires a recheck in second case to deal with</span></span><br><span class="line">            <span class="comment">// shutdownNow race while clearing interrupt</span></span><br><span class="line">            <span class="keyword">if</span> ((runStateAtLeast(ctl.get(), STOP) ||    <span class="comment">// 线程池的运行状态至少应该高于STOP</span></span><br><span class="line">                 (Thread.interrupted() &amp;&amp;                <span class="comment">// 线程被中断</span></span><br><span class="line">                  runStateAtLeast(ctl.get(), STOP))) &amp;&amp;    <span class="comment">// 再次检查，线程池的运行状态至少应该高于STOP</span></span><br><span class="line">                !wt.isInterrupted())                    <span class="comment">// wt线程（当前线程）没有被中断</span></span><br><span class="line">                wt.interrupt();                            <span class="comment">// 中断wt线程（当前线程）</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 在执行之前调用钩子函数</span></span><br><span class="line">                beforeExecute(wt, task);</span><br><span class="line">                Throwable thrown = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 运行给定的任务</span></span><br><span class="line">                    task.run();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RuntimeException x) &#123;</span><br><span class="line">                    thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Error x) &#123;</span><br><span class="line">                    thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable x) &#123;</span><br><span class="line">                    thrown = x; <span class="keyword">throw</span> <span class="keyword">new</span> Error(x);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">// 执行完后调用钩子函数</span></span><br><span class="line">                    afterExecute(task, thrown);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                task = <span class="keyword">null</span>;</span><br><span class="line">                <span class="comment">// 增加给worker完成的任务数量</span></span><br><span class="line">                w.completedTasks++;</span><br><span class="line">                <span class="comment">// 释放锁</span></span><br><span class="line">                w.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        completedAbruptly = <span class="keyword">false</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 处理完成后，调用钩子函数</span></span><br><span class="line">        processWorkerExit(w, completedAbruptly);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此函数用于从workerQueue阻塞队列中获取Runnable对象，由于是阻塞队列，所以支持有限时间等待（poll）和无限时间等待（take）。在该函数中还会响应shutDown和、shutDownNow函数的操作，若检测到线程池处于SHUTDOWN或STOP状态，则会返回null，而不再返回阻塞队列中的Runnalbe对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Runnable <span class="title">getTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> timedOut = <span class="keyword">false</span>; <span class="comment">// Did the last poll() time out?</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123; <span class="comment">// 无限循环，确保操作成功</span></span><br><span class="line">        <span class="comment">// 获取线程池控制状态</span></span><br><span class="line">        <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">        <span class="comment">// 运行的状态</span></span><br><span class="line">        <span class="keyword">int</span> rs = runStateOf(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check if queue empty only if necessary.</span></span><br><span class="line">        <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp; (rs &gt;= STOP || workQueue.isEmpty())) &#123; <span class="comment">// 大于等于SHUTDOWN（表示调用了shutDown）并且（大于等于STOP（调用了shutDownNow）或者worker阻塞队列为空）</span></span><br><span class="line">            <span class="comment">// 减少worker的数量</span></span><br><span class="line">            decrementWorkerCount();</span><br><span class="line">            <span class="comment">// 返回null，不执行任务</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取worker数量</span></span><br><span class="line">        <span class="keyword">int</span> wc = workerCountOf(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Are workers subject to culling?</span></span><br><span class="line">        <span class="keyword">boolean</span> timed = allowCoreThreadTimeOut || wc &gt; corePoolSize; <span class="comment">// 是否允许coreThread超时或者workerCount大于核心大小</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((wc &gt; maximumPoolSize || (timed &amp;&amp; timedOut))     <span class="comment">// worker数量大于maximumPoolSize</span></span><br><span class="line">            &amp;&amp; (wc &gt; <span class="number">1</span> || workQueue.isEmpty())) &#123;            <span class="comment">// workerCount大于1或者worker阻塞队列为空（在阻塞队列不为空时，需要保证至少有一个wc）</span></span><br><span class="line">            <span class="keyword">if</span> (compareAndDecrementWorkerCount(c))            <span class="comment">// 比较并减少workerCount</span></span><br><span class="line">                <span class="comment">// 返回null，不执行任务，该worker会退出</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// 跳过剩余部分，继续循环</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runnable r = timed ?</span><br><span class="line">                workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :    <span class="comment">// 等待指定时间</span></span><br><span class="line">                workQueue.take();                                        <span class="comment">// 一直等待，直到有元素</span></span><br><span class="line">            <span class="keyword">if</span> (r != <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> r;</span><br><span class="line">            <span class="comment">// 等待指定时间后，没有获取元素，则超时</span></span><br><span class="line">            timedOut = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException retry) &#123;</span><br><span class="line">            <span class="comment">// 抛出了被中断异常，重试，没有超时</span></span><br><span class="line">            timedOut = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>processWorkerExit函数是在worker退出时调用到的钩子函数，而引起worker退出的主要因素如下</p><ol><li><p>阻塞队列已经为空，即没有任务可以运行了。</p></li><li><p>调用了shutDown或shutDownNow函数</p></li></ol><p>此函数会根据是否中断了空闲线程来确定是否减少workerCount的值，并且将worker从workers集合中移除并且会尝试终止线程池。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processWorkerExit</span><span class="params">(Worker w, <span class="keyword">boolean</span> completedAbruptly)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (completedAbruptly) <span class="comment">// 如果被中断，则需要减少workCount    // If abrupt, then workerCount wasn't adjusted</span></span><br><span class="line">        decrementWorkerCount();</span><br><span class="line">    <span class="comment">// 获取可重入锁</span></span><br><span class="line">    <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">    <span class="comment">// 获取锁</span></span><br><span class="line">    mainLock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 将worker完成的任务添加到总的完成任务中</span></span><br><span class="line">        completedTaskCount += w.completedTasks;</span><br><span class="line">        <span class="comment">// 从workers集合中移除该worker</span></span><br><span class="line">        workers.remove(w);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 释放锁</span></span><br><span class="line">        mainLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 尝试终止</span></span><br><span class="line">    tryTerminate();</span><br><span class="line">    <span class="comment">// 获取线程池控制状态</span></span><br><span class="line">    <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">    <span class="keyword">if</span> (runStateLessThan(c, STOP)) &#123; <span class="comment">// 小于STOP的运行状态</span></span><br><span class="line">        <span class="keyword">if</span> (!completedAbruptly) &#123;</span><br><span class="line">            <span class="keyword">int</span> min = allowCoreThreadTimeOut ? <span class="number">0</span> : corePoolSize;</span><br><span class="line">            <span class="keyword">if</span> (min == <span class="number">0</span> &amp;&amp; ! workQueue.isEmpty()) <span class="comment">// 允许核心超时并且workQueue阻塞队列不为空</span></span><br><span class="line">                min = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (workerCountOf(c) &gt;= min) <span class="comment">// workerCount大于等于min</span></span><br><span class="line">                <span class="comment">// 直接返回</span></span><br><span class="line">                <span class="keyword">return</span>; <span class="comment">// replacement not needed</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 添加worker</span></span><br><span class="line">        addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关闭线程池"><a href="#关闭线程池" class="headerlink" title="关闭线程池"></a>关闭线程池</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">    mainLock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 检查shutdown权限</span></span><br><span class="line">        checkShutdownAccess();</span><br><span class="line">        <span class="comment">// 设置线程池控制状态为SHUTDOWN</span></span><br><span class="line">        advanceRunState(SHUTDOWN);</span><br><span class="line">        <span class="comment">// 中断空闲worker</span></span><br><span class="line">        interruptIdleWorkers();</span><br><span class="line">        <span class="comment">// 调用shutdown钩子函数</span></span><br><span class="line">        onShutdown(); <span class="comment">// hook for ScheduledThreadPoolExecutor</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        mainLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 尝试终止</span></span><br><span class="line">    tryTerminate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">tryTerminate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123; <span class="comment">// 无限循环，确保操作成功</span></span><br><span class="line">        <span class="comment">// 获取线程池控制状态</span></span><br><span class="line">        <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">        <span class="keyword">if</span> (isRunning(c) ||                                            <span class="comment">// 线程池的运行状态为RUNNING</span></span><br><span class="line">            runStateAtLeast(c, TIDYING) ||                            <span class="comment">// 线程池的运行状态最小要大于TIDYING</span></span><br><span class="line">            (runStateOf(c) == SHUTDOWN &amp;&amp; ! workQueue.isEmpty()))    <span class="comment">// 线程池的运行状态为SHUTDOWN并且workQueue队列不为null</span></span><br><span class="line">            <span class="comment">// 不能终止，直接返回</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (workerCountOf(c) != <span class="number">0</span>) &#123; <span class="comment">// 线程池正在运行的worker数量不为0    // Eligible to terminate</span></span><br><span class="line">            <span class="comment">// 仅仅中断一个空闲的worker</span></span><br><span class="line">            interruptIdleWorkers(ONLY_ONE);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取线程池的锁</span></span><br><span class="line">        <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">        <span class="comment">// 获取锁</span></span><br><span class="line">        mainLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ctl.compareAndSet(c, ctlOf(TIDYING, <span class="number">0</span>))) &#123; <span class="comment">// 比较并设置线程池控制状态为TIDYING</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 终止，钩子函数</span></span><br><span class="line">                    terminated();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">// 设置线程池控制状态为TERMINATED</span></span><br><span class="line">                    ctl.set(ctlOf(TERMINATED, <span class="number">0</span>));</span><br><span class="line">                    <span class="comment">// 释放在termination条件上等待的所有线程</span></span><br><span class="line">                    termination.signalAll();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 释放锁</span></span><br><span class="line">            mainLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// else retry on failed CAS</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">interruptIdleWorkers</span><span class="params">(<span class="keyword">boolean</span> onlyOne)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 线程池的锁</span></span><br><span class="line">    <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">    <span class="comment">// 获取锁</span></span><br><span class="line">    mainLock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Worker w : workers) &#123; <span class="comment">// 遍历workers队列</span></span><br><span class="line">            <span class="comment">// worker对应的线程</span></span><br><span class="line">            Thread t = w.thread;</span><br><span class="line">            <span class="keyword">if</span> (!t.isInterrupted() &amp;&amp; w.tryLock()) &#123; <span class="comment">// 线程未被中断并且成功获得锁</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 中断线程</span></span><br><span class="line">                    t.interrupt();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SecurityException ignore) &#123;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">// 释放锁</span></span><br><span class="line">                    w.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (onlyOne) <span class="comment">// 若只中断一个，则跳出循环</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 释放锁</span></span><br><span class="line">        mainLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 线程池 </category>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程池 </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之ConcurrentHashMap源码解析</title>
      <link href="/2020/03/20/Java%E4%B9%8BConcurrentHashMap%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
      <url>/2020/03/20/Java%E4%B9%8BConcurrentHashMap%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="ConcurrentHashMap源码解析"><a href="#ConcurrentHashMap源码解析" class="headerlink" title="ConcurrentHashMap源码解析"></a>ConcurrentHashMap源码解析</h1><p>[TOC]</p><h2 id="jdk8之前的实现原理"><a href="#jdk8之前的实现原理" class="headerlink" title="jdk8之前的实现原理"></a>jdk8之前的实现原理</h2><h2 id="jdk8的实现原理"><a href="#jdk8的实现原理" class="headerlink" title="jdk8的实现原理"></a>jdk8的实现原理</h2><p>JDK8的实现已经抛弃了Segment分段锁机制，利用CAS+Synchronized来保证并发更新的安全，底层依然采用数组+链表+红黑树的存储结构。</p><h2 id="变量解释"><a href="#变量解释" class="headerlink" title="变量解释"></a>变量解释</h2><ol><li><p>table：默认为null，初始化发生在第一次插入操作，默认大小为16的数组，用来存储Node节点数据，扩容时大小总是2的幂次方。</p></li><li><p>nextTable：默认为null，扩容时新生成的数组，其大小为原数组的两倍。</p></li><li><p>sizeCtl ：默认为0，用来控制table的初始化和扩容操作，具体应用在后续会体现出来。</p><ul><li>-1 代表table正在初始化</li><li>-N 表示有N-1个线程正在进行扩容操作</li><li>其余情况：<ul><li>1、如果table未初始化，表示table需要初始化的大小。<ul><li>2、如果table初始化完成，表示table的容量，默认是table大小的0.75倍，居然用这个公式算0.75（n - (n &gt;&gt;&gt; 2)）。</li></ul></li></ul></li></ul></li><li><p>Node：保存key，value及key的hash值的数据结构。</p></li><li><p>ForwardingNode：一个特殊的Node节点，hash值为-1，其中存储nextTable的引用。只有table发生扩容的时候，ForwardingNode才会发挥作用，作为一个占位符放在table中表示当前节点为null或则已经被移动。</p></li></ol><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>实例化ConcurrentHashMap时带参数时，会根据参数调整table的大小，假设参数为100，最终会调整成256，确保table的大小总是2的幂次方。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> n = c - <span class="number">1</span>;  </span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">1</span>;  </span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">2</span>;  </span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">4</span>;  </span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">8</span>;  </span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">16</span>;  </span><br><span class="line">    <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="初始化table"><a href="#初始化table" class="headerlink" title="初始化table"></a>初始化table</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Node&lt;K,V&gt;[] initTable() &#123;  </span><br><span class="line">    Node&lt;K,V&gt;[] tab; <span class="keyword">int</span> sc;  </span><br><span class="line">    <span class="keyword">while</span> ((tab = table) == <span class="keyword">null</span> || tab.length == <span class="number">0</span>) &#123;  </span><br><span class="line">    <span class="comment">//如果一个线程发现sizeCtl&lt;0，意味着另外的线程执行CAS操作成功，当前线程只需要让出cpu时间片  </span></span><br><span class="line">        <span class="keyword">if</span> ((sc = sizeCtl) &lt; <span class="number">0</span>)   </span><br><span class="line">            Thread.yield(); <span class="comment">// lost initialization race; just spin  </span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, -<span class="number">1</span>)) &#123;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || tab.length == <span class="number">0</span>) &#123;  </span><br><span class="line">                    <span class="keyword">int</span> n = (sc &gt; <span class="number">0</span>) ? sc : DEFAULT_CAPACITY;  </span><br><span class="line">                    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)  </span><br><span class="line">                    Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node&lt;?,?&gt;[n];  </span><br><span class="line">                    table = tab = nt;  </span><br><span class="line">                    sc = n - (n &gt;&gt;&gt; <span class="number">2</span>);  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;  </span><br><span class="line">                sizeCtl = sc;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> tab;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="put操作"><a href="#put操作" class="headerlink" title="put操作"></a>put操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(K key, V value, <span class="keyword">boolean</span> onlyIfAbsent)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span> || value == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();  </span><br><span class="line">    <span class="keyword">int</span> hash = spread(key.hashCode());  </span><br><span class="line">    <span class="keyword">int</span> binCount = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;  </span><br><span class="line">        Node&lt;K,V&gt; f; <span class="keyword">int</span> n, i, fh;  </span><br><span class="line">        <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)  </span><br><span class="line">            tab = initTable();  </span><br><span class="line">        <span class="comment">// table中定位索引位置，n是table的大小</span></span><br><span class="line">        <span class="comment">// 如果f为null，说明table中这个位置第一次插入元素，利用Unsafe.compareAndSwapObject方法插入Node节点。</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="keyword">null</span>) &#123;  </span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 如果CAS成功，说明Node节点已经插入，随后addCount(1L,binCout)方法会检查当前容量是否需要进行扩容。如果CAS失败，说明有其它线程提前插入了节点，自旋重新尝试在这个位置插入节点。</span></span><br><span class="line">            <span class="keyword">if</span> (casTabAt(tab, i, <span class="keyword">null</span>, <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key, value, <span class="keyword">null</span>)))  </span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// no lock when adding to empty bin  </span></span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">// 如果f的hash值为-1，说明当前f是ForwardingNode节点，意味有其它线程正在扩容，则一起进行扩容操作。</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)  </span><br><span class="line">            tab = helpTransfer(tab, f);  </span><br><span class="line">        <span class="comment">//省略部分代码  </span></span><br><span class="line">    &#125;  </span><br><span class="line">    addCount(<span class="number">1L</span>, binCount);  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="hash算法"><a href="#hash算法" class="headerlink" title="hash算法"></a>hash算法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static final int spread(int h) &#123;return (h ^ (h &gt;&gt;&gt; 16)) &amp; HASH_BITS;&#125;</span><br></pre></td></tr></table></figure><h3 id="获取table中对应的元素f"><a href="#获取table中对应的元素f" class="headerlink" title="获取table中对应的元素f"></a>获取table中对应的元素f</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> &lt;K,V&gt; <span class="function">Node&lt;K,V&gt; <span class="title">tabAt</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (Node&lt;K,V&gt;)U.getObjectVolatile(tab, ((<span class="keyword">long</span>)i &lt;&lt; ASHIFT) + ABASE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Doug Lea采用Unsafe.getObjectVolatile来获取，也许有人质疑，直接table[index]不可以么，为什么要这么复杂？<br>在java内存模型中，我们已经知道每个线程都有一个工作内存，里面存储着table的副本，虽然table是volatile修饰的，但不能保证线程每次都拿到table中的最新元素，Unsafe.getObjectVolatile可以直接获取指定内存的数据，保证了每次拿到数据都是最新的。</p><h3 id="链表或红黑树操作"><a href="#链表或红黑树操作" class="headerlink" title="链表或红黑树操作"></a>链表或红黑树操作</h3><p>其余情况把新的Node节点按链表或红黑树的方式插入到合适的位置，这个过程采用同步内置锁实现并发。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">    <span class="comment">// 在节点f上进行同步，节点插入之前，再次利用tabAt(tab, i) == f判断，防止被其它线程修改。 </span></span><br><span class="line">    <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">        <span class="comment">// 如果f.hash &gt;= 0，说明f是链表结构的头结点，遍历链表，如果找到对应的node节点，则修改value，否则在链表尾部加入节点。</span></span><br><span class="line">        <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            binCount = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class="line">                K ek;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((ek = e.key) == key ||</span><br><span class="line">                     (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class="line">                    oldVal = e.val;</span><br><span class="line">                    <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                        e.val = value;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Node&lt;K,V&gt; pred = e;</span><br><span class="line">                <span class="keyword">if</span> ((e = e.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    pred.next = <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key,</span><br><span class="line">                                              value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果f是TreeBin类型节点，说明f是红黑树根节点，则在树结构上遍历元素，更新或增加节点。</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">            Node&lt;K,V&gt; p;</span><br><span class="line">            binCount = <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</span><br><span class="line">                                           value)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                oldVal = p.val;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                    p.val = value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果链表中节点数binCount &gt;= TREEIFY_THRESHOLD(默认是8)，则把链表转化为红黑树结构。</span></span><br><span class="line"><span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">        treeifyBin(tab, i);</span><br><span class="line">    <span class="keyword">if</span> (oldVal != <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> oldVal;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="table-扩容"><a href="#table-扩容" class="headerlink" title="table 扩容"></a>table 扩容</h2><p>当table容量不足的时候，即table的元素数量达到容量阈值sizeCtl，需要对table进行扩容。</p><p>整个扩容分为两部分：</p><ol><li>构建一个nextTable，大小为table的两倍。</li><li>把table的数据复制到nextTable中。</li></ol><p>这两个过程在单线程下实现很简单，但是ConcurrentHashMap是支持并发插入的，扩容操作自然也会有并发的出现，这种情况下，第二步可以支持节点的并发复制，这样性能自然提升不少，但实现的复杂度也上升了一个台阶。</p><p>先看第一步，构建nextTable，毫无疑问，这个过程只能只有单个线程进行nextTable的初始化，具体实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">addCount</span><span class="params">(<span class="keyword">long</span> x, <span class="keyword">int</span> check)</span> </span>&#123;  </span><br><span class="line">    <span class="comment">// 省略部分代码  </span></span><br><span class="line">    <span class="keyword">if</span> (check &gt;= <span class="number">0</span>) &#123;  </span><br><span class="line">        Node&lt;K,V&gt;[] tab, nt; <span class="keyword">int</span> n, sc;  </span><br><span class="line">        <span class="keyword">while</span> (s &gt;= (<span class="keyword">long</span>)(sc = sizeCtl) &amp;&amp; (tab = table) != <span class="keyword">null</span> &amp;&amp;  </span><br><span class="line">               (n = tab.length) &lt; MAXIMUM_CAPACITY) &#123;  </span><br><span class="line">            <span class="keyword">int</span> rs = resizeStamp(n);  </span><br><span class="line">            <span class="keyword">if</span> (sc &lt; <span class="number">0</span>) &#123;  </span><br><span class="line">                <span class="keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="number">1</span> ||  </span><br><span class="line">                    sc == rs + MAX_RESIZERS || (nt = nextTable) == <span class="keyword">null</span> ||  </span><br><span class="line">                    transferIndex &lt;= <span class="number">0</span>)  </span><br><span class="line">                    <span class="keyword">break</span>;  </span><br><span class="line">                <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, sc + <span class="number">1</span>))  </span><br><span class="line">                    transfer(tab, nt);  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc,  </span><br><span class="line">                                         (rs &lt;&lt; RESIZE_STAMP_SHIFT) + <span class="number">2</span>))  </span><br><span class="line">                transfer(tab, <span class="keyword">null</span>);  </span><br><span class="line">            s = sumCount();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="get操作"><a href="#get操作" class="headerlink" title="get操作"></a>get操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; e, p; <span class="keyword">int</span> n, eh; K ek;</span><br><span class="line">    <span class="keyword">int</span> h = spread(key.hashCode());</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (e = tabAt(tab, (n - <span class="number">1</span>) &amp; h)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((eh = e.hash) == h) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((ek = e.key) == key || (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))</span><br><span class="line">                <span class="keyword">return</span> e.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (eh &lt; <span class="number">0</span>) <span class="comment">// 树</span></span><br><span class="line">            <span class="keyword">return</span> (p = e.find(h, key)) != <span class="keyword">null</span> ? p.val : <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>) &#123; <span class="comment">// 链表</span></span><br><span class="line">            <span class="keyword">if</span> (e.hash == h &amp;&amp;</span><br><span class="line">                ((ek = e.key) == key || (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek))))</span><br><span class="line">                <span class="keyword">return</span> e.val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ConcurrentHashMap </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ConcurrentHashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java计算账户余额核心类</title>
      <link href="/2020/03/03/Java%E8%AE%A1%E7%AE%97%E8%B4%A6%E6%88%B7%E4%BD%99%E9%A2%9D%E6%A0%B8%E5%BF%83%E7%B1%BB/"/>
      <url>/2020/03/03/Java%E8%AE%A1%E7%AE%97%E8%B4%A6%E6%88%B7%E4%BD%99%E9%A2%9D%E6%A0%B8%E5%BF%83%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p><strong>摘要</strong>：在项目开发中，有这样一个业务场景，就是我们有个虚拟服务，服务是按一定的YD(这里的YD相当于一般的积分即可)去抵扣的，同时YD又是通过用户下单购买产生的，规则如下图：<br><img src="https://img-blog.csdnimg.cn/20200303182543781.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N4ZHR6aGFveGluZ3Vv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>那么在用户使用服务的时候，会消费一定的YD，那么久需要计算账户的剩余YD，详细见如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Copyright 2019. yaodouwang.com Studio All Right Reserved</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Create on Nov 8, 2019 1:56:16 PM</span></span><br><span class="line"><span class="comment"> * created by yolo</span></span><br><span class="line"><span class="comment"> * Version 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.yaodou.baseproduct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yaodou.utils.OtherException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算账户余额</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yolo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-11-08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">caculatePriceUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">generateTotal(<span class="string">"A1001"</span>,<span class="keyword">new</span> BigDecimal(<span class="number">1000</span>));</span><br><span class="line"></span><br><span class="line">generateTotal(<span class="string">"A1001"</span>,<span class="keyword">new</span> BigDecimal(<span class="number">1000</span>));</span><br><span class="line"></span><br><span class="line">generateTotal(<span class="string">"A1001"</span>,<span class="keyword">new</span> BigDecimal(<span class="number">1000</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEAULT_ORDER_ID = <span class="string">"NA"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> BigDecimal DEFAULT_UNIT_PRICE = <span class="keyword">new</span> BigDecimal(<span class="number">0.05</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据用户编码获取当前用户账户余额</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userId 用户唯一标示</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yolo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-11-08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Object&gt; <span class="title">generateTotal</span><span class="params">(String userId,BigDecimal todayQuantity)</span> </span>&#123;</span><br><span class="line"><span class="comment">//如果今日消费数量为0 则不用走以下统计流程</span></span><br><span class="line"><span class="keyword">if</span>(todayQuantity.compareTo(BigDecimal.ZERO) == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回数据形式定义</span></span><br><span class="line"> Map&lt;String,Object&gt; returnMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="comment">//--》消费记录map</span></span><br><span class="line">List&lt;YdyConsumePO&gt; consumeList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">//剩余总额</span></span><br><span class="line">BigDecimal remainTotalMoney = BigDecimal.ZERO;</span><br><span class="line"></span><br><span class="line"><span class="comment">//TODO 根据userId去账户表ydy_account查询该用户对应的 账户account_id 余额remain_balance，剩余条数remain_quantity</span></span><br><span class="line">String accountId = <span class="string">"A1001"</span>;</span><br><span class="line"><span class="comment">//剩余条数，这个条数是统计后的条数</span></span><br><span class="line">BigDecimal remainQuantity = <span class="keyword">new</span> BigDecimal(<span class="number">100000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//TODO 去ydy_recharge表查询 status="N"的充值记录，时间正序排序。取出以下对应字段</span></span><br><span class="line">List&lt;YdyRechargePO&gt;  rechargeList = <span class="keyword">new</span> LinkedList&lt;YdyRechargePO&gt;();</span><br><span class="line"><span class="comment">//如果没有可用充值记录，则直接把今日消费的条数记录成 欠费条数</span></span><br><span class="line"><span class="keyword">if</span>(rechargeList.size() ==<span class="number">0</span>) &#123;</span><br><span class="line">YdyConsumePO consumer = <span class="keyword">new</span> YdyConsumePO();</span><br><span class="line">consumer.setAcountId(accountId);</span><br><span class="line">consumer.setConsumeQuantity(remainQuantity);</span><br><span class="line">consumer.setOrderId(<span class="string">"初始化orderId"</span>); <span class="comment">//为空代表超前消费//欠费</span></span><br><span class="line">consumeList.add(consumer);</span><br><span class="line">remainTotalMoney = remainQuantity.multiply(DEFAULT_UNIT_PRICE).negate();<span class="comment">//取负数</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">BigDecimal totalQuantity = rechargeList.get(<span class="number">0</span>).getTotalQuanity();</span><br><span class="line"><span class="comment">//校准数据，如果剩余量和库存不一样则跑出异常</span></span><br><span class="line"><span class="keyword">if</span>(totalQuantity.compareTo(remainQuantity) != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> OtherException(<span class="string">"数据有异常，请联系开发人员核对数据！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果今日消费条数大于或者等于剩余总的条数</span></span><br><span class="line"><span class="keyword">if</span>(todayQuantity.compareTo(totalQuantity) !=-<span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//TODO 所有的rechage表中的状态都变成 N</span></span><br><span class="line"><span class="keyword">for</span>(YdyRechargePO recharge:rechargeList) &#123;</span><br><span class="line">generateConsumList(consumeList, recharge.getOrderId(), recharge.getRemainQuantity(), accountId);</span><br><span class="line">remainTotalMoney = BigDecimal.ZERO;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//大于</span></span><br><span class="line"><span class="keyword">if</span>(todayQuantity.compareTo(totalQuantity) ==<span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//欠费数量</span></span><br><span class="line">BigDecimal oweQuantity = todayQuantity.divide(totalQuantity);</span><br><span class="line">generateConsumList(consumeList, oweQuantity, accountId);</span><br><span class="line">remainTotalMoney = oweQuantity.multiply(DEFAULT_UNIT_PRICE).negate();</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">Map&lt;String,Object&gt; rechargeMap = getIndex(rechargeList, todayQuantity);</span><br><span class="line">List&lt;YdyRechargePO&gt; rechargeUpdateList= (List&lt;YdyRechargePO&gt;) rechargeMap.get(<span class="string">"rechargeUpdateList"</span>);</span><br><span class="line">BigDecimal newRemainQuantity = (BigDecimal) rechargeMap.get(<span class="string">"newRemainQuantity"</span>);</span><br><span class="line"><span class="keyword">int</span> index = (<span class="keyword">int</span>) rechargeMap.get(<span class="string">"index"</span>);</span><br><span class="line">YdyRechargePO updateRemaining = rechargeList.get(index);</span><br><span class="line"><span class="keyword">if</span>(newRemainQuantity.compareTo(BigDecimal.ZERO)!=<span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//TODO 修改updateRemaining记录 把remianQuantity设置成newRemainQuantity</span></span><br><span class="line">generateConsumList(consumeList, updateRemaining.getOrderId(), </span><br><span class="line">updateRemaining.getRemainQuantity().divide(newRemainQuantity), accountId);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//TODO 把rechargeIdList 集合中的YdyRechargePO 记录状态都修改成N</span></span><br><span class="line">generateConsumList(consumeList, rechargeUpdateList);</span><br><span class="line">remainTotalMoney = (BigDecimal) rechargeMap.get(<span class="string">"remianTotalMoney"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回的数据</span></span><br><span class="line">returnMap.put(<span class="string">"remainTotalMoney"</span>, remainTotalMoney);</span><br><span class="line">returnMap.put(<span class="string">"consumerList"</span>, consumeList);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> returnMap;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成消费记录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> consumeList</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> rechargeList</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yolo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-11-08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">generateConsumList</span><span class="params">(List&lt;YdyConsumePO&gt; consumeList,List&lt;YdyRechargePO&gt;  rechargeList)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(YdyRechargePO recharge:rechargeList) &#123;</span><br><span class="line">generateConsumList(consumeList, recharge.getOrderId(), recharge.getRemainQuantity(), recharge.getAcountId());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成消费记录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> consumeList 消费记录insert数据的list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> orderId 充值编码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> consumeQuantity 消费数量</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> accuntId 账户编码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yolo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-11-08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">generateConsumList</span><span class="params">(List&lt;YdyConsumePO&gt; consumeList,String orderId,BigDecimal consumeQuantity,String accountId)</span> </span>&#123;</span><br><span class="line">YdyConsumePO consumer = <span class="keyword">new</span> YdyConsumePO();</span><br><span class="line">consumer.setOrderId(orderId); </span><br><span class="line">consumer.setConsumeQuantity(consumeQuantity);</span><br><span class="line">consumer.setAcountId(accountId);</span><br><span class="line">consumeList.add(consumer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成消费记录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> consumeList 消费记录insert数据的list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> consumeQuantity 消费数量</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> accountId 账户编码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yolo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-11-08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">generateConsumList</span><span class="params">(List&lt;YdyConsumePO&gt; consumeList, BigDecimal consumeQuantity,String accountId)</span> </span>&#123;</span><br><span class="line">generateConsumList(consumeList, DEAULT_ORDER_ID, consumeQuantity, accountId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算剩余第几条记录的总条数满足扣除</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> rechargeList 没有消费的充值记录的list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> todayQuantity 今日消费条数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yolo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019-11-08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Object&gt; <span class="title">getIndex</span><span class="params">(List&lt;YdyRechargePO&gt; rechargeList,BigDecimal todayQuantity)</span> </span>&#123;</span><br><span class="line">BigDecimal total = BigDecimal.ZERO;</span><br><span class="line"><span class="keyword">int</span> size = rechargeList.size();</span><br><span class="line">List&lt;YdyRechargePO&gt; rechargeUpdateList = <span class="keyword">new</span> ArrayList&lt;&gt;(size);</span><br><span class="line"><span class="comment">//充值记录剩余未使用的条数</span></span><br><span class="line">BigDecimal newRemainQuantity = BigDecimal.ZERO;</span><br><span class="line"><span class="comment">//账余额</span></span><br><span class="line">BigDecimal remianTotalMoney = BigDecimal.ZERO;</span><br><span class="line"><span class="comment">//判断是否需要停止叠加价格</span></span><br><span class="line"><span class="keyword">boolean</span> isCaculateMoney = Boolean.FALSE;</span><br><span class="line">Map&lt;String,Object&gt; returnMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt; size;i++) &#123;</span><br><span class="line">YdyRechargePO recharge = rechargeList.get(i);</span><br><span class="line">total = recharge.getRemainQuantity();<span class="comment">//剩余未使用的的数量</span></span><br><span class="line"><span class="keyword">if</span>(isCaculateMoney) &#123;</span><br><span class="line">remianTotalMoney = remianTotalMoney.add(recharge.getRechargeAmount());<span class="comment">//充值金额</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(total.compareTo(todayQuantity) !=-<span class="number">1</span>) &#123;</span><br><span class="line">newRemainQuantity = total.divide(todayQuantity);</span><br><span class="line">remianTotalMoney = recharge.getRechargeUnitPrice().multiply(newRemainQuantity).setScale(<span class="number">2</span>);<span class="comment">//充值金额</span></span><br><span class="line"><span class="keyword">if</span>(newRemainQuantity.compareTo(BigDecimal.ZERO)==<span class="number">0</span>) &#123;</span><br><span class="line">rechargeUpdateList.add(recharge);</span><br><span class="line">&#125;</span><br><span class="line">returnMap.put(<span class="string">"index"</span>, i);</span><br><span class="line">isCaculateMoney = Boolean.TRUE;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">rechargeUpdateList.add(recharge);</span><br><span class="line">total = total.add(recharge.getRemainQuantity());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">returnMap.put(<span class="string">"newRemainQuantity"</span>, newRemainQuantity);</span><br><span class="line">returnMap.put(<span class="string">"rechargeUpdateList"</span>, rechargeUpdateList);</span><br><span class="line">returnMap.put(<span class="string">"remianTotalMoney"</span>, remianTotalMoney);</span><br><span class="line"><span class="keyword">return</span> returnMap;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 账户 </tag>
            
            <tag> 余额 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java对List里面的元素实现按指定字段排序的方法</title>
      <link href="/2020/02/03/Java%E5%AF%B9List%E9%87%8C%E9%9D%A2%E7%9A%84%E5%85%83%E7%B4%A0%E5%AE%9E%E7%8E%B0%E6%8C%89%E6%8C%87%E5%AE%9A%E5%AD%97%E6%AE%B5%E6%8E%92%E5%BA%8F%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2020/02/03/Java%E5%AF%B9List%E9%87%8C%E9%9D%A2%E7%9A%84%E5%85%83%E7%B4%A0%E5%AE%9E%E7%8E%B0%E6%8C%89%E6%8C%87%E5%AE%9A%E5%AD%97%E6%AE%B5%E6%8E%92%E5%BA%8F%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><strong>摘要：</strong><br>在日常开发中，经常会用到排序算法，这里记录下日常使用比较多的排序方法，其中包括按指定指定：正序、倒序排序，还有按自定义字段排序的方法，方便日后查看；</p><p><strong>一：按指定字段排序，默认倒序，如下写法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 对List集合按指定字段排序，默认倒序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaoxinguo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/12/26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sortList</span><span class="params">(List&lt;Map&lt;String, Object&gt;&gt; platformDataStatistics)</span> </span>&#123;</span><br><span class="line">platformDataStatistics.sort(<span class="keyword">new</span> Comparator&lt;Map&lt;String, Object&gt;&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Map&lt;String, Object&gt; o1, Map&lt;String, Object&gt; o2)</span> </span>&#123;</span><br><span class="line">BigDecimal divideResult2 = (BigDecimal) o2.get(<span class="string">"divideResult"</span>);</span><br><span class="line">BigDecimal divideResult1 = (BigDecimal) o1.get(<span class="string">"divideResult"</span>);</span><br><span class="line"><span class="keyword">return</span> divideResult2.compareTo(divideResult1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>二：按自定义顺序排序，如下写法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 自定义排序规则，默认：京东、天猫、拼多多</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhaoxinguo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/2/3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">customSortList</span><span class="params">(List&lt;Map&lt;String, Object&gt;&gt; platformDataStatistics)</span> </span>&#123;</span><br><span class="line"><span class="comment">//这里的顺序，是我自己定义的一个List&lt;String&gt;</span></span><br><span class="line">String[] regulation = &#123;<span class="string">"京东"</span>,<span class="string">"天猫"</span>,<span class="string">"拼多多"</span>&#125;;</span><br><span class="line"><span class="keyword">final</span> List&lt;String&gt; regulationOrder = Arrays.asList(regulation);</span><br><span class="line">Collections.sort(platformDataStatistics, <span class="keyword">new</span> Comparator&lt;Map&lt;String, Object&gt;&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Map&lt;String, Object&gt; o1, Map&lt;String, Object&gt; o2)</span> </span>&#123;</span><br><span class="line">String websiteName1 = (String) o1.get(<span class="string">"websiteName"</span>);</span><br><span class="line">String websiteName2 = (String) o2.get(<span class="string">"websiteName"</span>);</span><br><span class="line"><span class="keyword">int</span> io1 = regulationOrder.indexOf(websiteName1);</span><br><span class="line"><span class="keyword">int</span> io2 = regulationOrder.indexOf(websiteName2);</span><br><span class="line"><span class="keyword">return</span> (io1 == -<span class="number">1</span> || io2 == -<span class="number">1</span>) ? (io2 - io1) : (io1 - io2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>以上就是经常使用的排序方法。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一篇迟到的2019年年终总结</title>
      <link href="/2020/01/30/%E8%AE%B0%E4%B8%80%E7%AF%87%E8%BF%9F%E5%88%B0%E7%9A%842019%E5%B9%B4%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
      <url>/2020/01/30/%E8%AE%B0%E4%B8%80%E7%AF%87%E8%BF%9F%E5%88%B0%E7%9A%842019%E5%B9%B4%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p><strong>前奏：</strong></p><p>2019年已经过去，现在才写年终总结似乎有些晚了，之前一直想着在2020年到来之前写，结果由于各种外因导致延迟到现在了，不过该总结的还是要总结，不然对不起过去一年发生的各种故事。</p><p><strong>工作：</strong></p><p>2019年我是进入新公司的第一年，2018年底由于公司项目发展规划裁员，我在11月底拿了N+1赔偿离开了供职将近2年的公司，其中还是有些舍不得，毕竟是大公司，各种制度毕竟完善，算是我待过的公司综合起来最好的一个了。离开了上家公司，中间就回老家休息了1周就又回来帝都找下家了，这里感谢当时为我推荐工作的各位朋友，虽然最后我选择了我自己找的公司，但是还是谢谢他们，感谢和他们的相遇，期待后续有机会再一起合作。</p><p>从老家回到帝都，差不多一周的样子就找好了下家，入职是2018年11月30日，公司算创业公司，搞医药电商的，药兜网，这里给公司打个广告，目前成立4年多，团队规模不算大，产品，技术、测试加起来差不多30个人的样子，但是各个环节都有对应的负责人，还算相对完善团队规模。来到这家公司主要担任后端研发工程师，主要负责公司的B2B产品线的后端开发工作，涉及到得业务主要包括：商品、促销等，日常工作主要是根据产品的需求设计对应的数据结构、开发后端接口，和前端联调接口，修复测试发现的缺陷，协助各组按需求上线功能，其中在做促销这块业务的时候是最忙得时候，还有几次通宵上线的情景，现在想起来，那会儿的忙真的是让自己学到了很多东西，尤其是业务方面和产品迭代流程，包括发布流程，测试流程，上线流程等等。2019年的上半年主要参与了B2B电商平台的后端开发，也是本年度最忙得一个阶段，2019年下半年由于公司产品线的发展，我被抽调到数据组做了一段时间的数据方面的工作，主要包括：数据大屏系统的开发、数据仓库的建设，虽然我们的数据产品只是给公司内部使用，但是在这个过程中，也学到很多东西，比如ElasticSearch、Kettle等，更重要的是学到了一些数据处理方案，比如全量同步数据、增量同步数据、不同环境之间数据同步、百万级别数据同步等方案的落地，这些都让我学到了很多东西，在做完上面那些工作之后，时间已经到2019年10月份了，这个时候，公司又发现了一个新的产品方向，所以就抽调人力成立了一个独立的项目组去做这个项目，也是我2019年年底一直在忙得项目，该项目主要是做医疗行业的舆情和监控，在这个项目组我从原来的后端开发角色增加了一个业务负责人的角色，虽然只是个头衔，但是我还是很看重公司给我的机会的，所以也是在一直边摸索，边实践，虽然在过程中遇到一些问题，但是最后在团队小伙伴的努力下，都一一解决了，最后的成果就是完成了项目的PC版本按时上线，同时在春节前还上线了项目的小程序，这里提一点，上线小程序踩了很多坑，由于之前没有开发过小程序，也没有上线经验，导致最后走了一些弯路，这个后面有时间再详细聊聊，最后总结下，2019年过的还是很充实的，业务上有新的突破，技术上也学到一些新技术，个人发展上也跟上了当时来公司的目标，在做技术的同时，可以学习一下管理，虽然还是个管理菜鸟，但是万事开头难，已经开头了，后面努力坚持，总有突破的一天。</p><p>放一张我们一家三口的照片：<br><img src="https://img-blog.csdnimg.cn/2020013021281133.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly96aGFveGluZ3VvLmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>生活：</strong></p><p>生活方面，2019年也是我人生中最重要的一年，爱人在18年底检查怀孕了，所以整个19年我都是精神状态最紧绷的一年，不但要应对工作中的各种问题，还要照顾怀孕的爱人，虽然我爱人是个比较坚强的女汉子，因为工作的原因，在爱人怀孕整个孕期，我只陪过2次去医院产检，这点我觉得作为男人还是不够的，还好爱人算比较坚强的那类人，没有和我计较，我能做的只有在日后的生活中多多分担生活中的琐事了。2019年08月30日下午16点35迎来了我的小佩奇，从待产到生，我们一起度过了比较难熬的2天，随着小朋友的到来，我感受到了初为人父的喜悦，也心疼爱人从怀孕到生产的辛苦付出，在这里很感谢爱人的付出，期待我们往后余生的精彩生活，也祝福我的小佩奇健康，快乐的成长。</p><p><strong>总结：</strong></p><p>回想整个2019年，算是我人生中比较重要的一年，经历了工作的变动，也经历了孩子的降生，算是挑战比较多的一年，现在想想有些事只有经历了才会值得回忆，眼下已经是2020年01月30日21点14分，相信大部分人都在家里，因为我们遇到了肺炎病毒，尤其是武汉的同胞们更是处在离病毒最近的地方，在这里盼望病毒早日远离我们，也为武汉加油。</p>]]></content>
      
      
      <categories>
          
          <category> 年终总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年终总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu Installed Jdk、Tomcat、Nginx、Redis、Zookeeper、Elasticsearch</title>
      <link href="/2019/10/10/Ubuntu-Installed-Jdk%E3%80%81Tomcat%E3%80%81Nginx%E3%80%81Redis%E3%80%81Zookeeper%E3%80%81Elasticsearch/"/>
      <url>/2019/10/10/Ubuntu-Installed-Jdk%E3%80%81Tomcat%E3%80%81Nginx%E3%80%81Redis%E3%80%81Zookeeper%E3%80%81Elasticsearch/</url>
      
        <content type="html"><![CDATA[<h5 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h5><h4 id="1-jdk-1-8-安装"><a href="#1-jdk-1-8-安装" class="headerlink" title="1.jdk 1.8 安装"></a>1.jdk 1.8 安装</h4><p>安装目录：/usr/local/software/</p><p>jdk-8u161-linux-x64.tar.gz</p><p>tar -zxvf jdk-8u161-linux-x64.tar.gz</p><p>vi /etc/profile</p><p>export JAVA_HOME=/usr/local/software/jdk1.8.0_161 <br><br>export  CLASSPATH=$:CLASSPATH:$JAVA_HOME/lib/ <br><br>export  PATH=$PATH:$JAVA_HOME/bin</p><p>source /etc/profile</p><p>java -version</p><p>【JDK】Ubuntu 程序“java”已包含在下列软件包中</p><p>解决方法：(手动设置系统默认JDK)</p><p>在终端中依次输入命令：</p><p>sudo update-alternatives –install /usr/bin/java java /usr/local/software/jdk1.8.0_161/bin/java 300 <br><br>sudo update-alternatives –install /usr/bin/javac javac /usr/local/software/jdk1.8.0_161/bin/javac 300</p><hr><h4 id="2-tomcat-8-x-安装"><a href="#2-tomcat-8-x-安装" class="headerlink" title="2.tomcat 8.x 安装"></a>2.tomcat 8.x 安装</h4><p>tar -zxvf apache-tomcat-8.5.24.tar.gz</p><hr><h4 id="3-nginx-安装"><a href="#3-nginx-安装" class="headerlink" title="3.nginx 安装"></a>3.nginx 安装</h4><p>安装gcc g++的依赖库 <br><br>apt-get install build-essential <br><br>apt-get install libtool</p><p>安装 pcre依赖库 <br><br>sudo apt-get update <br><br>sudo apt-get install libpcre3 libpcre3-dev</p><p>安装 ssl依赖库 <br><br>apt-get install openssl</p><p>安装Nginx<br>#下载最新版本：<br>wget <a href="http://nginx.org/download/nginx-1.11.3.tar.gz" target="_blank" rel="noopener">http://nginx.org/download/nginx-1.11.3.tar.gz</a><br>#解压：<br>tar -zxvf nginx-1.11.3.tar.gz<br>#进入解压目录：<br>cd nginx-1.11.3<br>#配置：<br>./configure –prefix=/usr/local/nginx<br>#编辑nginx：<br>make<br>注意：这里可能会报错，提示“pcre.h No such file or directory”,具体详见：<a href="http://stackoverflow.com/questions/22555561/error-building-fatal-error-pcre-h-no-such-file-or-directory" target="_blank" rel="noopener">http://stackoverflow.com/questions/22555561/error-building-fatal-error-pcre-h-no-such-file-or-directory</a><br>需要安装 libpcre3-dev,命令为：sudo apt-get install libpcre3-dev<br>#安装nginx：<br>sudo make install<br>#启动nginx：<br>sudo /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf<br>注意：-c 指定配置文件的路径，不加的话，nginx会自动加载默认路径的配置文件，可以通过 -h查看帮助命令。<br>#查看nginx进程：<br>ps -ef|grep nginx</p><p>启动 Nginx <br><br>cd /usr/local/nginx/sbin/nginx <br></p><p>./sbin/nginx　 <br><br>停止 Nginx <br></p><p>停止 Nginx <br><br>./sbin/nginx -s stop <br></p><p>./sbin/nginx -s quit <br></p><p>-s都是采用向 Nginx 发送信号的方式 <br></p><p>Nginx重新加载配置 <br><br>./sbin/nginx -s reload</p><p>指定配置文件 <br><br>./sbin/nginx -c /usr/local/nginx/conf/nginx.conf <br><br>-c表示configuration，指定配置文件 <br></p><p>查看 Nginx 版本 <br><br>有两种可以查看 Nginx 的版本信息的参数。第一种如下： <br><br>./sbin/nginx -v</p><p>另一种显示的是详细的版本信息：<br><br>./sbin/nginx -V</p><p>检查配置文件是否正确 <br><br>./sbin/nginx -t</p><p>nginx+tomcat负载均衡配置</p><hr><h4 id="4-redis安装"><a href="#4-redis安装" class="headerlink" title="4.redis安装"></a>4.redis安装</h4><p>参考地址：<a href="https://blog.csdn.net/qq_30242609/article/details/52913145" target="_blank" rel="noopener">https://blog.csdn.net/qq_30242609/article/details/52913145</a></p><p>安装Redis服务器端<br>sudo apt-get install redis-server</p><p>安装完成后，Redis服务器会自动启动，我们检查Redis服务器程序</p><p>检查Redis服务器系统进程<br>ps -aux|grep redis<br>返回结果：<br>redis     4162  0.1  0.0  10676  1420 ?        Ss   23:24   0:00 /usr/bin/redis-server /etc/redis/redis.conf<br>conan     4172  0.0  0.0  11064   924 pts/0    S+   23:26   0:00 grep –color=auto redis</p><p>通过启动命令检查Redis服务器状态<br>netstat -nlt|grep 6379<br>返回结果：<br>tcp        0      0 127.0.0.1:6379          0.0.0.0:*               LISTEN</p><p>通过启动命令检查Redis服务器状态<br>sudo /etc/init.d/redis-server status<br>返回结果：<br>redis-server is running</p><p>通过命令行客户端访问Redis<br>安装Redis服务器，会自动地一起安装Redis命令行客户端程序。</p><p>在本机输入redis-cli命令就可以启动，客户端程序访问Redis服务器。</p><p>redis-cli<br>redis 127.0.0.1:6379&gt;</p><p>#命令行的帮助</p><p>redis 127.0.0.1:6379&gt; help<br>redis-cli 2.2.12<br>Type: “help @” to get a list of commands in<br>      “help “ for help on<br>      “help “ to get a list of possible help topics<br>      “quit” to exit</p><p>#查看所有的key列表</p><p>redis 127.0.0.1:6379&gt; keys *<br>(empty list or set)</p><p>修改Redis的配置</p><p>使用Redis的访问账号<br>默认情况下，访问Redis服务器是不需要密码的，为了增加安全性我们需要设置Redis服务器的访问密码。设置访问密码为redisredis。</p><p>用vi打开Redis服务器的配置文件redis.conf<br>sudo vi /etc/redis/redis.conf</p><p>#取消注释requirepass<br>requirepass redisredis</p><p>让Redis服务器被远程访问</p><p>默认情况下，Redis服务器不允许远程访问，只允许本机访问，所以我们需要设置打开远程访问的功能。</p><p>用vi打开Redis服务器的配置文件redis.conf</p><p>sudo vi /etc/redis/redis.conf</p><p>#注释bind<br>#bind 127.0.0.1</p><p>修改后，重启Redis服务器<br>sudo /etc/init.d/redis-server restart</p><p>未使用密码登陆Redis服务器<br>redis-cli</p><p>redis 127.0.0.1:6379&gt; keys *<br>(error) ERR operation not permitted</p><p>发现可以登陆，但无法执行命令了。</p><p>登陆Redis服务器，输入密码</p><p>redis-cli -a redisredis</p><p>redis 127.0.0.1:6379&gt; keys *</p><p>1) “key2”<br>2) “key3”<br>3) “key4”</p><p>登陆后，一切正常。</p><p>我们检查Redis的网络监听端口</p><p>检查Redis服务器占用端口<br>netstat -nlt|grep 6379<br>tcp        0      0 0.0.0.0:6379            0.0.0.0:*               LISTEN</p><hr><h4 id="5-zookeeper安装"><a href="#5-zookeeper安装" class="headerlink" title="5.zookeeper安装"></a>5.zookeeper安装</h4><p>下载zookeeper-3.4.5版本的安装包</p><p>解压zookeeper到/usr/local <br></p><p>tar -xzvf zookeeper-3.4.5.tar.gz -C /usr/local <br><br>cd /usr/local/zookeeper-3.4.5</p><p>拷贝一份zookeeper的配置文件，zoo_sample.cfg =&gt; zoo.cfg <br><br>cd conf <br><br>cp zoo_sample.cfg zoo.cfg</p><p>变更zoo.cfg配置 <br><br>vi zoo.cfg</p><p>主要更改zookeeper的数据存放地址和日志地址 <br><br>dataDir=/HD/logs/zookeeper <br><br>dataLogDir=/HD/logs/zookeeper <br></p><p>启动zookeeper <br><br>cd ../bin</p><p>sh zkServer.sh start //启动 <br><br>sh zkServer.sh status //检查状态 <br><br>sh zkServer.sh stop //停止</p><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch Getting Started (三)</title>
      <link href="/2019/10/06/%E7%AD%89%E5%BE%85/"/>
      <url>/2019/10/06/%E7%AD%89%E5%BE%85/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/10/08/AaosuTZfbmntexL.jpg" alt="01.jpg"></p><h4 id="一：Introduction"><a href="#一：Introduction" class="headerlink" title="一：Introduction "></a>一：Introduction <br></h4><h4 id="二：Description"><a href="#二：Description" class="headerlink" title="二：Description "></a>二：Description <br></h4><h4 id="三：Summary"><a href="#三：Summary" class="headerlink" title="三：Summary"></a>三：Summary</h4>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch Getting Started (二）</title>
      <link href="/2019/10/06/Elasticsearch-Getting-Started-%E4%BA%8C%EF%BC%89/"/>
      <url>/2019/10/06/Elasticsearch-Getting-Started-%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/10/08/1pH2b65dtLAjPTa.jpg" alt="18.jpg"></p><h4 id="一：Introduction"><a href="#一：Introduction" class="headerlink" title="一：Introduction "></a>一：Introduction <br></h4><h4 id="二：Description"><a href="#二：Description" class="headerlink" title="二：Description "></a>二：Description <br></h4><h4 id="三：Summary"><a href="#三：Summary" class="headerlink" title="三：Summary"></a>三：Summary</h4>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch Getting Started (一）</title>
      <link href="/2019/10/06/Elasticsearch-Getting-Started-%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2019/10/06/Elasticsearch-Getting-Started-%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/10/08/8bSWzU1APphxFLm.jpg" alt="28.jpg"></p><h4 id="一：Introduction"><a href="#一：Introduction" class="headerlink" title="一：Introduction "></a>一：Introduction <br></h4><h4 id="二：Description"><a href="#二：Description" class="headerlink" title="二：Description "></a>二：Description <br></h4><h4 id="三：Summary"><a href="#三：Summary" class="headerlink" title="三：Summary"></a>三：Summary</h4>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My Wedding Photo</title>
      <link href="/2019/10/06/My%20Wedding%20Photo/"/>
      <url>/2019/10/06/My%20Wedding%20Photo/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/10/08/ywjdXMPxET5c6Ca.jpg" alt="22.jpg"><br><img src="https://i.loli.net/2019/10/08/AaosuTZfbmntexL.jpg" alt="01.jpg"><br><img src="https://i.loli.net/2019/10/08/8bSWzU1APphxFLm.jpg" alt="28.jpg"><br><img src="https://i.loli.net/2019/10/08/OwQJ7ELFcBhlMPX.jpg" alt="07.jpg"><br><img src="https://i.loli.net/2019/10/08/1pH2b65dtLAjPTa.jpg" alt="18.jpg"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
